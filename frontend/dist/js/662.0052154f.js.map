{"version":3,"file":"js/662.0052154f.js","mappings":"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","sources":["webpack://logtool-frontend/./src/utils/surgeryDataAdapter.js"],"sourcesContent":["/**\n * 手术数据适配器\n * 统一处理不同来源的手术数据，确保可视化组件能正确解析\n */\n\n/**\n * 将时间格式标准化为ISO UTC格式\n * 处理数据库中的UTC时间格式转换\n * @param {string} timeStr - 时间字符串\n * @returns {string} ISO格式的UTC时间字符串\n */\nfunction normalizeTimeToISO (timeStr) {\n  if (!timeStr) return null\n\n  try {\n    // 如果是数据库格式的UTC时间字符串 (YYYY-MM-DD HH:mm:ss)\n    if (typeof timeStr === 'string' && /^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(timeStr)) {\n      // 添加UTC标识符\n      const utcTime = timeStr.replace(' ', 'T') + 'Z'\n      const date = new Date(utcTime)\n\n      if (isNaN(date.getTime())) {\n        console.warn('⚠️ 无效的时间格式:', timeStr)\n        return timeStr\n      }\n\n      // 返回ISO格式的UTC时间\n      return date.toISOString()\n    }\n\n    // 如果已经是ISO格式或时间戳，直接返回\n    return timeStr\n  } catch (error) {\n    console.warn('⚠️ 时间转换失败:', timeStr, error)\n    return timeStr\n  }\n}\n\n/**\n * 统一的手术数据适配器\n * @param {Object} rawData - 原始手术数据（可能来自统计页面或数据库）\n * @returns {Object} 标准化的手术数据\n */\nexport function adaptSurgeryData (rawData) {\n  if (!rawData) {\n    console.warn('⚠️ 手术数据为空')\n    return null\n  }\n\n  console.log('🔧 开始适配手术数据:', rawData)\n\n  // 提取结构化数据\n  let structuredData = null\n  let metadata = {}\n\n  // 情况1：手术统计页面的数据格式\n  if (rawData.postgresql_row_preview?.structured_data) {\n    structuredData = rawData.postgresql_row_preview.structured_data\n    metadata = {\n      surgery_id: rawData.surgery_id || rawData.postgresql_row_preview.surgery_id,\n      // 统一标准化为ISO UTC\n      start_time: normalizeTimeToISO(rawData.surgery_start_time || rawData.postgresql_row_preview.start_time),\n      end_time: normalizeTimeToISO(rawData.surgery_end_time || rawData.postgresql_row_preview.end_time),\n      is_remote: rawData.is_remote_surgery || rawData.postgresql_row_preview.is_remote,\n      has_fault: rawData.has_error || rawData.postgresql_row_preview.has_fault,\n      device_ids: rawData.postgresql_row_preview.device_ids || [],\n      source_log_ids: rawData.postgresql_row_preview.source_log_ids || []\n    }\n  } else if (rawData.structured_data) {\n    // 情况2：数据库手术记录的数据格式\n    structuredData = rawData.structured_data\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.start_time),\n      end_time: normalizeTimeToISO(rawData.end_time),\n      is_remote: rawData.is_remote,\n      has_fault: rawData.has_fault,\n      device_ids: rawData.device_ids || [],\n      source_log_ids: rawData.source_log_ids || []\n    }\n  } else if (rawData.arms || rawData.surgery_stats || rawData.power_cycles) {\n    // 情况3：直接传入的结构化数据\n    structuredData = rawData\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.start_time || rawData.surgery_start_time),\n      end_time: normalizeTimeToISO(rawData.end_time || rawData.surgery_end_time),\n      is_remote: rawData.is_remote,\n      has_fault: rawData.has_fault,\n      device_ids: rawData.device_ids || [],\n      source_log_ids: rawData.source_log_ids || []\n    }\n  } else if (rawData.arm1_usage || rawData.state_machine_changes || rawData.alarm_details) {\n    // 情况4：手术统计页面的原始分析数据\n    structuredData = convertAnalysisDataToStructured(rawData)\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.surgery_start_time),\n      end_time: normalizeTimeToISO(rawData.surgery_end_time),\n      is_remote: rawData.is_remote_surgery,\n      has_fault: rawData.has_error,\n      device_ids: [],\n      source_log_ids: rawData.log_id ? [rawData.log_id] : []\n    }\n  }\n\n  if (!structuredData) {\n    console.warn('⚠️ 无法识别的数据格式:', rawData)\n    return null\n  }\n\n  // 标准化结构化数据\n  const standardizedData = standardizeStructuredData(structuredData)\n\n  // 合并元数据\n  const result = {\n    ...standardizedData,\n    ...metadata\n  }\n\n  console.log('✅ 手术数据适配完成:', result)\n  return result\n}\n\n/**\n * 将分析器原始数据转换为结构化数据格式\n * @param {Object} analysisData - 分析器原始数据\n * @returns {Object} 结构化数据\n */\nfunction convertAnalysisDataToStructured (analysisData) {\n  const structured = {\n    power_cycles: [],\n    arms: [],\n    surgery_stats: {\n      success: !analysisData.has_error,\n      network_latency_ms: [],\n      faults: [],\n      state_machine: [],\n      arm_switch_count: 0,\n      left_hand_clutch: 0,\n      right_hand_clutch: 0,\n      foot_clutch: 0,\n      endoscope_pedal: 0\n    }\n  }\n\n  // 转换器械使用数据\n  for (let i = 1; i <= 4; i++) {\n    const armUsage = analysisData[`arm${i}_usage`] || []\n    const instrumentUsage = armUsage.map(usage => ({\n      tool_type: usage.instrumentName || usage.tool_type || '未知器械',\n      udi: usage.udi || '无UDI',\n      start_time: normalizeTimeToISO(usage.startTime || usage.start_time),\n      end_time: normalizeTimeToISO(usage.endTime || usage.end_time),\n      energy_activation: []\n    }))\n\n    structured.arms.push({\n      arm_id: i,\n      instrument_usage: instrumentUsage\n    })\n  }\n\n  // 转换状态机数据\n  if (analysisData.state_machine_changes && Array.isArray(analysisData.state_machine_changes)) {\n    structured.surgery_stats.state_machine = analysisData.state_machine_changes.map(change => ({\n      time: normalizeTimeToISO(change.time),\n      state: change.stateName || String(change.state)\n    }))\n  }\n\n  // 转换网络延迟数据\n  if (analysisData.network_latency_data && Array.isArray(analysisData.network_latency_data)) {\n    structured.surgery_stats.network_latency_ms = analysisData.network_latency_data.map(data => ({\n      time: normalizeTimeToISO(data.timestamp),\n      latency: data.latency\n    }))\n  }\n\n  // 转换故障数据\n  if (analysisData.alarm_details && Array.isArray(analysisData.alarm_details)) {\n    structured.surgery_stats.faults = analysisData.alarm_details.map(fault => ({\n      timestamp: normalizeTimeToISO(fault.time),\n      error_code: fault.code,\n      param1: '',\n      param2: '',\n      param3: '',\n      param4: '',\n      explanation: fault.message,\n      log_id: analysisData.log_id\n    }))\n  }\n\n  // 转换电源循环数据\n  if (analysisData.power_on_times && analysisData.shutdown_times) {\n    const onTimes = analysisData.power_on_times\n    const offTimes = analysisData.shutdown_times\n\n    // 智能配对开机和关机时间\n    let onIndex = 0\n    let offIndex = 0\n\n    while (onIndex < onTimes.length || offIndex < offTimes.length) {\n      const onTime = onIndex < onTimes.length ? onTimes[onIndex] : null\n      const offTime = offIndex < offTimes.length ? offTimes[offIndex] : null\n\n      structured.power_cycles.push({\n        on_time: normalizeTimeToISO(onTime),\n        off_time: normalizeTimeToISO(offTime)\n      })\n\n      if (onTime && offTime) {\n        onIndex++\n        offIndex++\n      } else if (onTime) {\n        onIndex++\n      } else {\n        offIndex++\n      }\n    }\n  }\n\n  return structured\n}\n\n/**\n * 标准化结构化数据\n * @param {Object} structuredData - 结构化数据\n * @returns {Object} 标准化后的数据\n */\nfunction standardizeStructuredData (structuredData) {\n  const standardized = {\n    arms: structuredData.arms || [],\n    power_cycles: structuredData.power_cycles || [],\n    surgery_stats: {\n      success: structuredData.surgery_stats?.success ?? true,\n      network_latency_ms: structuredData.surgery_stats?.network_latency_ms || [],\n      faults: structuredData.surgery_stats?.faults || [],\n      state_machine: structuredData.surgery_stats?.state_machine || [],\n      arm_switch_count: structuredData.surgery_stats?.arm_switch_count || 0,\n      left_hand_clutch: structuredData.surgery_stats?.left_hand_clutch || 0,\n      right_hand_clutch: structuredData.surgery_stats?.right_hand_clutch || 0,\n      foot_clutch: structuredData.surgery_stats?.foot_clutch || 0,\n      endoscope_pedal: structuredData.surgery_stats?.endoscope_pedal || 0\n    }\n  }\n\n  // 确保 arms 数组格式正确\n  if (!Array.isArray(standardized.arms)) {\n    standardized.arms = []\n  }\n\n  // 确保每个 arm 都有正确的结构，并转换时间\n  for (let i = 0; i < standardized.arms.length; i++) {\n    if (!standardized.arms[i].arm_id) {\n      standardized.arms[i].arm_id = i + 1\n    }\n    if (!standardized.arms[i].instrument_usage) {\n      standardized.arms[i].instrument_usage = []\n    } else {\n      // 转换器械使用时间\n      standardized.arms[i].instrument_usage = standardized.arms[i].instrument_usage.map(usage => ({\n        ...usage,\n        start_time: normalizeTimeToISO(usage.start_time),\n        end_time: normalizeTimeToISO(usage.end_time)\n      }))\n    }\n  }\n\n  // 转换状态机数据时间\n  if (standardized.surgery_stats.state_machine) {\n    standardized.surgery_stats.state_machine = standardized.surgery_stats.state_machine.map(item => ({\n      ...item,\n      time: normalizeTimeToISO(item.time)\n    }))\n  }\n\n  // 转换网络延迟数据时间\n  if (standardized.surgery_stats.network_latency_ms) {\n    standardized.surgery_stats.network_latency_ms = standardized.surgery_stats.network_latency_ms.map(item => ({\n      ...item,\n      time: normalizeTimeToISO(item.time)\n    }))\n  }\n\n  // 转换故障数据时间\n  if (standardized.surgery_stats.faults) {\n    standardized.surgery_stats.faults = standardized.surgery_stats.faults.map(fault => ({\n      ...fault,\n      timestamp: normalizeTimeToISO(fault.timestamp)\n    }))\n  }\n\n  // 转换电源循环数据时间\n  if (standardized.power_cycles) {\n    standardized.power_cycles = standardized.power_cycles.map(cycle => ({\n      on_time: normalizeTimeToISO(cycle.on_time),\n      off_time: normalizeTimeToISO(cycle.off_time)\n    }))\n  }\n\n  return standardized\n}\n\n/**\n * 验证适配后的数据是否完整\n * @param {Object} adaptedData - 适配后的数据\n * @returns {boolean} 是否有效\n */\nexport function validateAdaptedData (adaptedData) {\n  if (!adaptedData) return false\n\n  const hasRequiredFields = !!(\n    adaptedData.surgery_id &&\n    adaptedData.start_time &&\n    adaptedData.arms &&\n    adaptedData.surgery_stats\n  )\n\n  const hasValidArms = Array.isArray(adaptedData.arms) && adaptedData.arms.length > 0\n\n  console.log('🔍 数据验证结果:', {\n    hasRequiredFields,\n    hasValidArms,\n    armsCount: adaptedData.arms?.length || 0,\n    stateMachineCount: adaptedData.surgery_stats?.state_machine?.length || 0,\n    networkLatencyCount: adaptedData.surgery_stats?.network_latency_ms?.length || 0\n  })\n\n  return hasRequiredFields && hasValidArms\n}\n\n/**\n * 获取数据来源类型\n * @param {Object} rawData - 原始数据\n * @returns {string} 数据来源类型\n */\nexport function getDataSourceType (rawData) {\n  if (!rawData) return 'unknown'\n\n  if (rawData.postgresql_row_preview?.structured_data) {\n    return 'surgery_statistics'\n  } else if (rawData.structured_data) {\n    return 'database_record'\n  } else if (rawData.arms || rawData.surgery_stats || rawData.power_cycles) {\n    return 'structured_data'\n  } else if (rawData.arm1_usage || rawData.state_machine_changes || rawData.alarm_details) {\n    return 'analysis_data'\n  }\n\n  return 'unknown'\n}\n"],"names":["normalizeTimeToISO","timeStr","test","utcTime","replace","date","Date","isNaN","getTime","console","warn","toISOString","error","adaptSurgeryData","rawData","log","structuredData","metadata","postgresql_row_preview","structured_data","surgery_id","start_time","surgery_start_time","end_time","surgery_end_time","is_remote","is_remote_surgery","has_fault","has_error","device_ids","source_log_ids","arms","surgery_stats","power_cycles","arm1_usage","state_machine_changes","alarm_details","convertAnalysisDataToStructured","log_id","standardizedData","standardizeStructuredData","result","analysisData","structured","success","network_latency_ms","faults","state_machine","arm_switch_count","left_hand_clutch","right_hand_clutch","foot_clutch","endoscope_pedal","i","armUsage","instrumentUsage","map","usage","tool_type","instrumentName","udi","startTime","endTime","energy_activation","push","arm_id","instrument_usage","Array","isArray","change","time","state","stateName","String","network_latency_data","data","timestamp","latency","fault","error_code","code","param1","param2","param3","param4","explanation","message","power_on_times","shutdown_times","onTimes","offTimes","onIndex","offIndex","length","onTime","offTime","on_time","off_time","standardized","item","cycle","validateAdaptedData","adaptedData","hasRequiredFields","hasValidArms","armsCount","stateMachineCount","networkLatencyCount","getDataSourceType"],"sourceRoot":""}