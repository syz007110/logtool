{"version":3,"file":"js/573.63405ef3.js","mappings":"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","sources":["webpack://logtool-frontend/./src/utils/timeFormatter.js","webpack://logtool-frontend/./src/views/SurgeryStatistics.vue","webpack://logtool-frontend/./src/views/SurgeryStatistics.vue?30b3"],"sourcesContent":["/**\r\n * 修复后的时间格式化工具\r\n * 处理UTC时间到本地时间的转换，确保所有页面显示一致\r\n */\r\n\r\n// 服务器时区偏移量（分钟）\r\nlet serverOffsetMinutes = null\r\n\r\n/**\r\n * 加载服务器时区信息\r\n */\r\nexport const loadServerTimezone = async () => {\r\n  try {\r\n    const resp = await fetch('/api/timezone')\r\n    const json = await resp.json()\r\n    if (typeof json.offsetMinutes === 'number') {\r\n      serverOffsetMinutes = json.offsetMinutes\r\n    }\r\n  } catch (error) {\r\n    console.warn('加载服务器时区信息失败:', error)\r\n    serverOffsetMinutes = null\r\n  }\r\n}\r\n\r\n/**\r\n * 统一的时间格式化函数\r\n * 将UTC时间转换为服务器时区时间显示\r\n * @param {string|Date|number} timestamp - 时间戳\r\n * @param {boolean} useServerTimezone - 是否使用服务器时区转换，默认为true\r\n * @param {boolean} isUtcTime - 输入时间是否为UTC时间，默认为true（数据库时间）\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport const formatTime = (timestamp, useServerTimezone = true, isUtcTime = true) => {\r\n  if (!timestamp) return '-'\r\n\r\n  // 如果明确指定为本地时间且是本地时间格式，直接返回\r\n  if (!isUtcTime && typeof timestamp === 'string' && /^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(timestamp)) {\r\n    return timestamp\r\n  }\r\n\r\n  let date\r\n\r\n  // 处理不同的时间格式\r\n  if (typeof timestamp === 'string') {\r\n    // 如果是UTC格式 YYYY-MM-DD HH:mm:ss，需要添加UTC标识符\r\n    if (/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(timestamp)) {\r\n      // 这是数据库中的UTC格式，需要添加Z标识符\r\n      const utcTimeStr = timestamp.replace(' ', 'T') + 'Z'\r\n      date = new Date(utcTimeStr)\r\n    } else if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/.test(timestamp)) {\r\n      // 如果是ISO格式的UTC时间 YYYY-MM-DDTHH:mm:ss.fffZ\r\n      date = new Date(timestamp)\r\n    } else {\r\n      date = new Date(timestamp)\r\n    }\r\n  } else {\r\n    date = new Date(timestamp)\r\n  }\r\n\r\n  if (isNaN(date.getTime())) return '-'\r\n\r\n  // 如果启用服务器时区转换\r\n  if (useServerTimezone) {\r\n    if (serverOffsetMinutes !== null) {\r\n      // 以服务端时区为准：将UTC时间转换为服务器时区时间\r\n      const localOffset = -date.getTimezoneOffset()\r\n      const delta = (serverOffsetMinutes - localOffset) * 60 * 1000\r\n      date.setTime(date.getTime() + delta)\r\n    }\r\n    // 注意：JavaScript的Date对象会自动处理时区转换\r\n    // 如果输入是UTC时间，Date对象会自动转换为本地时间显示\r\n    // 我们不需要手动加减8小时\r\n  }\r\n\r\n  const year = date.getFullYear()\r\n  const month = String(date.getMonth() + 1).padStart(2, '0')\r\n  const day = String(date.getDate()).padStart(2, '0')\r\n  const hours = String(date.getHours()).padStart(2, '0')\r\n  const minutes = String(date.getMinutes()).padStart(2, '0')\r\n  const seconds = String(date.getSeconds()).padStart(2, '0')\r\n\r\n  const result = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * 格式化短时间（只显示时分）\r\n * @param {string|Date|number} timestamp - 时间戳\r\n * @param {boolean} useServerTimezone - 是否使用服务器时区转换，默认为true\r\n * @param {boolean} isUtcTime - 输入时间是否为UTC时间，默认为true（数据库时间）\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport const formatTimeShort = (timestamp, useServerTimezone = true, isUtcTime = true) => {\r\n  if (!timestamp) return '-'\r\n\r\n  const date = new Date(timestamp)\r\n  if (isNaN(date.getTime())) return '-'\r\n\r\n  // 如果启用服务器时区转换\r\n  if (useServerTimezone) {\r\n    if (serverOffsetMinutes !== null) {\r\n      const localOffset = -date.getTimezoneOffset()\r\n      const delta = (serverOffsetMinutes - localOffset) * 60 * 1000\r\n      date.setTime(date.getTime() + delta)\r\n    }\r\n    // 注意：JavaScript的Date对象会自动处理时区转换\r\n    // 如果输入是UTC时间，Date对象会自动转换为本地时间显示\r\n    // 我们不需要手动加减8小时\r\n  }\r\n\r\n  const hours = String(date.getHours()).padStart(2, '0')\r\n  const minutes = String(date.getMinutes()).padStart(2, '0')\r\n\r\n  return `${hours}:${minutes}`\r\n}\r\n\r\n/**\r\n * 格式化手术时间范围\r\n * @param {Object} surgery - 手术对象\r\n * @param {boolean} useServerTimezone - 是否使用服务器时区转换，默认为true\r\n * @returns {string} 格式化后的时间范围字符串\r\n */\r\nexport const formatSurgeryTime = (surgery, useServerTimezone = true) => {\r\n  if (!surgery.surgery_start_time || !surgery.surgery_end_time) {\r\n    return '手术时间未确定'\r\n  }\r\n\r\n  const start = formatTime(surgery.surgery_start_time, useServerTimezone, true) // 数据库时间默认为UTC\r\n  const end = formatTime(surgery.surgery_end_time, useServerTimezone, true) // 数据库时间默认为UTC\r\n\r\n  return `${start} ~ ${end}`\r\n}\r\n\r\n/**\r\n * 获取服务器时区信息\r\n * @returns {Object|null} 服务器时区信息\r\n */\r\nexport const getServerTimezone = () => {\r\n  return serverOffsetMinutes !== null ? { offsetMinutes: serverOffsetMinutes } : null\r\n}\r\n\r\n/**\r\n * 格式化系统时间（用于显示创建时间、更新时间等）\r\n * 使用24小时制，格式：YYYY-MM-DD HH:mm:ss\r\n * @param {string|Date|number} timestamp - 时间戳\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport const formatSystemTime = (timestamp) => {\r\n  if (!timestamp) return '-'\r\n\r\n  const date = new Date(timestamp)\r\n  if (isNaN(date.getTime())) return '-'\r\n\r\n  const year = date.getFullYear()\r\n  const month = String(date.getMonth() + 1).padStart(2, '0')\r\n  const day = String(date.getDate()).padStart(2, '0')\r\n  const hours = String(date.getHours()).padStart(2, '0')\r\n  const minutes = String(date.getMinutes()).padStart(2, '0')\r\n  const seconds = String(date.getSeconds()).padStart(2, '0')\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n}\r\n\r\n/**\r\n * 检查是否已加载服务器时区信息\r\n * @returns {boolean} 是否已加载\r\n */\r\nexport const isServerTimezoneLoaded = () => {\r\n  return serverOffsetMinutes !== null\r\n}\r\n","<template>\r\n  <div class=\"surgery-statistics-container\">\r\n    <!-- 页面标题和操作栏 -->\r\n    <div class=\"action-bar\">\r\n      <div class=\"title-section\">\r\n        <h2 class=\"page-title\">手术统计</h2>\r\n        <p class=\"page-subtitle\">查看各场手术的详细统计数据</p>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 分析按钮 -->\r\n    <div class=\"analysis-section\" v-if=\"!surgeries.length && !analyzing\">\r\n      <el-card class=\"empty-card\">\r\n        <div class=\"empty-content\">\r\n          <el-icon class=\"empty-icon\"><Calendar /></el-icon>\r\n          <h3>手术数据统计</h3>\r\n          <p v-if=\"logEntriesCount > 0\">\r\n                          检测到 {{ logEntriesCount }} 条日志数据，点击按钮开始统计\r\n          </p>\r\n          <p v-else>\r\n                          暂无日志数据，请先在批量查看或日志查看页面加载日志数据\r\n          </p>\r\n          \r\n          <el-button \r\n            type=\"primary\" \r\n            @click=\"analyzeLogs\" \r\n            :loading=\"analyzing\"\r\n            :disabled=\"logEntriesCount === 0\"\r\n          >\r\n            <el-icon><DataAnalysis /></el-icon>\r\n            {{ getAnalysisButtonText() }}\r\n          </el-button>\r\n        </div>\r\n      </el-card>\r\n    </div>\r\n\r\n    <!-- 分析中状态 -->\r\n    <div class=\"analysis-section\" v-if=\"!surgeries.length && analyzing\">\r\n      <el-card class=\"empty-card\">\r\n        <div class=\"empty-content\">\r\n          <el-icon class=\"empty-icon\"><Loading /></el-icon>\r\n          <h3>正在统计手术数据...</h3>\r\n        </div>\r\n      </el-card>\r\n    </div>\r\n\r\n    <!-- 手术统计内容 -->\r\n    <div v-else>\r\n      \r\n      \r\n      <!-- 标签页导航 -->\r\n      <el-card class=\"tab-card\">\r\n        <el-tabs \r\n          v-model=\"activeTab\" \r\n          type=\"card\" \r\n          @tab-click=\"handleTabClick\"\r\n          :lazy=\"true\"\r\n          :before-leave=\"handleBeforeTabLeave\"\r\n          :stretch=\"false\"\r\n          :closable=\"false\"\r\n          :addable=\"false\"\r\n        >\r\n          <el-tab-pane \r\n            v-for=\"surgery in surgeries\" \r\n            :key=\"surgery.id\"\r\n            :label=\"surgery.surgery_id\"\r\n            :name=\"surgery.id.toString()\"\r\n            :data-surgery-id=\"surgery.id\"\r\n          >\r\n            <!-- 导出按钮 -->\r\n            <div class=\"export-section\">\r\n              <el-button type=\"primary\" @click=\"exportSurgeryData(surgery.id)\">\r\n                <el-icon><Download /></el-icon>\r\n                导出手术数据（手术结构化数据）\r\n              </el-button>\r\n            </div>\r\n            \r\n                        <!-- 手术信息布局 -->\r\n            <div class=\"surgery-info-layout\">\r\n              <!-- 手术时间线 - 30%宽度 -->\r\n              <div class=\"timeline-section\">\r\n                <el-card class=\"info-card\">\r\n                  <div class=\"info-header\">\r\n                    <div class=\"time\">手术时间线</div>\r\n                    <div class=\"badges\">\r\n                      <el-tag \r\n                        v-if=\"surgery.alarm_count > 0\" \r\n                        type=\"danger\" \r\n                        size=\"small\"\r\n                        class=\"alarm-tag\"\r\n                        @click=\"scrollToAlarmCard(surgery.id)\"\r\n                        style=\"cursor: pointer;\"\r\n                      >\r\n                        查看手术故障\r\n                      </el-tag>\r\n                      <el-tag \r\n                        v-if=\"surgery.is_remote_surgery\" \r\n                        type=\"info\" \r\n                        size=\"small\"\r\n                        class=\"network-tag\"\r\n                        @click=\"scrollToNetworkCard(surgery.id)\"\r\n                        style=\"cursor: pointer; margin-left: 8px;\"\r\n                      >\r\n                        查看网络延时\r\n                      </el-tag>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- PostgreSQL结构化数据预览 -->\r\n                  <div class=\"postgresql-preview-section\">\r\n                    <div class=\"preview-header\">\r\n                      <span class=\"preview-title\">PostgreSQL结构化数据预览</span>\r\n                      <el-button \r\n                        type=\"text\" \r\n                        size=\"small\" \r\n                        @click=\"togglePostgreSQLPreview(surgery.id)\"\r\n                        style=\"padding: 0; margin-left: 8px;\"\r\n                      >\r\n                        {{ postgresqlPreviewVisible[surgery.id] ? '收起' : '展开' }}\r\n                      </el-button>\r\n                    </div>\r\n                    \r\n                    <div v-if=\"postgresqlPreviewVisible[surgery.id]\" class=\"preview-content\">\r\n                      <el-input\r\n                        v-model=\"postgresqlDataText[surgery.id]\"\r\n                        type=\"textarea\"\r\n                        :rows=\"8\"\r\n                        readonly\r\n                        placeholder=\"正在生成PostgreSQL结构化数据...\"\r\n                        class=\"postgresql-textarea\"\r\n                      />\r\n                      <div class=\"preview-actions\">\r\n                        <el-button \r\n                          type=\"primary\" \r\n                          size=\"small\" \r\n                          @click=\"copyPostgreSQLData(surgery.id)\"\r\n                          :loading=\"copyingData[surgery.id]\"\r\n                        >\r\n                          <el-icon><Document /></el-icon>\r\n                          复制数据\r\n                        </el-button>\r\n                        <el-button \r\n                          type=\"success\" \r\n                          size=\"small\" \r\n                          @click=\"refreshPostgreSQLData(surgery.id)\"\r\n                          :loading=\"refreshingData[surgery.id]\"\r\n                        >\r\n                          <el-icon><Refresh /></el-icon>\r\n                          刷新数据\r\n                        </el-button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- 按时间顺序排序的时间线（AntD Steps progressDot 风格） -->\r\n                  <a-steps\r\n                    direction=\"vertical\"\r\n                    :current=\"getSortedTimelineEvents(surgery).length - 1\"\r\n                    :progress-dot=\"true\"\r\n                    class=\"surgery-steps\"\r\n                  >\r\n                    <a-step\r\n                      v-for=\"(event, index) in getSortedTimelineEvents(surgery)\"\r\n                      :key=\"`event-${index}`\"\r\n                      :title=\"event.label\"\r\n                      :description=\"formatTime(event.time)\"\r\n                    />\r\n                  </a-steps>\r\n                </el-card>\r\n              </div>\r\n\r\n              <!-- 手术状态变化图 - 70%宽度 -->\r\n              <div class=\"state-chart-section\">\r\n                <el-card class=\"state-chart-card\">\r\n                  <div class=\"chart-header\">\r\n                    <div class=\"chart-title\">手术状态机变化图</div>\r\n                  </div>\r\n                  \r\n                  <!-- 状态机曲线图容器（ECharts） -->\r\n                  <div \r\n                    class=\"state-chart-container\"\r\n                  >\r\n                    <div :id=\"`stateMachineChart_${surgery.id}`\" style=\"width: 100%; height: 100%\"></div>\r\n                  </div>\r\n                </el-card>\r\n              </div>\r\n            </div>\r\n                        \r\n            <!-- 手术统计（恢复整行宽度），并在卡片内下方显示手术器械表 -->\r\n            <el-card class=\"arm-usage-card\">\r\n              <template #header>\r\n                <div class=\"card-header\">\r\n                  <span>手术统计</span>\r\n                  <el-tag type=\"info\">总手术时长: {{ surgery.total_duration }} 分钟</el-tag>\r\n                </div>\r\n              </template>\r\n\r\n              <!-- 统一时间轴视图 - 结合手术时长和工具臂使用 -->\r\n              <div class=\"unified-timeline-view\">\r\n                <!-- 手术时长进度条 -->\r\n                <div class=\"surgery-progress-container\">\r\n                  <div class=\"surgery-duration-info\">\r\n                    <span class=\"duration-text\">手术时长：{{ surgery.total_duration }} 分钟</span>\r\n                    <span class=\"time-range\">手术时间：{{ formatTime(surgery.surgery_start_time) }} - {{ formatTime(surgery.surgery_end_time) }}</span>\r\n                  </div>\r\n                  <div class=\"surgery-timeline-wrapper\">\r\n                    <div class=\"surgery-label\">\r\n                      <div class=\"surgery-color\"></div>\r\n                      <span class=\"surgery-name\">手术时间段</span>\r\n                    </div>\r\n                    <div class=\"surgery-timeline-container\">\r\n                      <div class=\"surgery-timeline-bar\">\r\n                        <div \r\n                          class=\"surgery-timeline-segment\"\r\n                          :style=\"getSurgeryTimelineStyle(surgery)\"\r\n                        >\r\n                          <span class=\"surgery-segment-text\">手术时间段</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"progress-labels\">\r\n                    <span class=\"time-label\">{{ formatTimeShort(getProgressTimelineRange(surgery).start) }}</span>\r\n                    <span class=\"time-label\">{{ formatTimeShort(getProgressTimelineRange(surgery).end) }}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- 工具臂时间线（更紧凑） -->\r\n                <div class=\"arm-timeline\">\r\n                  <div \r\n                    v-for=\"(armUsage, index) in getArmUsages(surgery)\" \r\n                    :key=\"index\"\r\n                    class=\"arm-item\"\r\n                  >\r\n                    <div class=\"arm-header\">\r\n                      <div class=\"arm-actions\">\r\n                        <el-button \r\n                          size=\"small\" \r\n                          type=\"primary\" \r\n                          plain\r\n                          @click=\"toggleArmDetails(surgery.id, index)\"\r\n                        >\r\n                          <el-icon><ArrowDown /></el-icon>\r\n                          详情\r\n                        </el-button>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"arm-timeline-container\">\r\n                      <div class=\"arm-label\">\r\n                        <div class=\"arm-color\" :class=\"`arm-${index + 1}`\"></div>\r\n                        <span class=\"arm-name\">工具臂 {{ index + 1 }}</span>\r\n                      </div>\r\n                      <div class=\"arm-timeline-bar\">\r\n                        <div \r\n                          v-for=\"(segment, segmentIndex) in getArmTimelineSegments(armUsage, surgery)\" \r\n                          :key=\"segmentIndex\"\r\n                          class=\"timeline-segment\" \r\n                          :class=\"`arm-${index + 1}`\" \r\n                          :style=\"segment\"\r\n                        >\r\n                          <el-tooltip \r\n                            :content=\"`${getSegmentInstrumentName(segment, armUsage, surgery)}`\"\r\n                            placement=\"top\"\r\n                            :show-arrow=\"true\"\r\n                            :popper-class=\"'usage-time-tooltip'\"\r\n                          >\r\n                            <div class=\"segment-content\">\r\n                              <span class=\"segment-text\"> </span>\r\n                            </div>\r\n                          </el-tooltip>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <el-collapse-transition>\r\n                      <div v-show=\"armDetailsVisible[surgery.id + '_' + index]\" class=\"arm-details\">\r\n                        <div \r\n                          v-for=\"(groupedUsage, udiCode) in getGroupedUsagesByUdi(armUsage)\" \r\n                          :key=\"udiCode\"\r\n                          class=\"usage-group\"\r\n                        >\r\n                          <div class=\"usage-group-header\">\r\n                            <div class=\"usage-group-info\">\r\n                              <div class=\"usage-group-name\">\r\n                                {{ groupedUsage.instrumentName }}\r\n                              </div>\r\n                              <div class=\"usage-group-udi\">UDI: {{ udiCode }}</div>\r\n                              <div class=\"usage-group-duration\">总使用时长: {{ getGroupedUsageDuration(groupedUsage) }}</div>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"arm-timeline-container\">\r\n                            <div class=\"arm-timeline-bar\">\r\n                              <div \r\n                                v-for=\"(usage, usageIndex) in groupedUsage.usages\" \r\n                                :key=\"usageIndex\"\r\n                                class=\"timeline-segment\" \r\n                                :class=\"`arm-${index + 1}`\" \r\n                                :style=\"getUsageTimelineStyle(usage, surgery)\"\r\n                              >\r\n                                <el-tooltip \r\n                                  :content=\"`器械：${usage.instrumentName}\\n时间：${formatTime(usage.startTime)} - ${formatTime(usage.endTime)}\\n时长：${Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)}分钟`\"\r\n                                  placement=\"top\"\r\n                                  :show-arrow=\"true\"\r\n                                  :popper-class=\"'usage-time-tooltip'\"\r\n                                >\r\n                                  <div class=\"segment-content\">\r\n                                    <span class=\"segment-text\">{{ getSegmentText(usage, surgery) }}</span>\r\n                                  </div>\r\n                                </el-tooltip>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"energy-time\">\r\n                          <el-icon class=\"energy-icon\"><Lightning /></el-icon>\r\n                          器械总使用时间: {{ getEnergyTime(armUsage) }}\r\n                        </div>\r\n                      </div>\r\n                    </el-collapse-transition>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- 手术器械（位于手术统计卡片内，工具臂激活时间下方） -->\r\n              <div class=\"instruments-inside\">\r\n                <div class=\"card-header\" style=\"margin-top: 12px; margin-bottom: 8px;\">\r\n                  <span>手术器械</span>\r\n                </div>\r\n                <el-table :data=\"getInstrumentRows(surgery)\" size=\"small\" style=\"width: 100%\">\r\n                  <el-table-column prop=\"instrumentName\" label=\"器械名称\" min-width=\"180\" />\r\n                  <el-table-column prop=\"udi\" label=\"UDI码\" min-width=\"220\" />\r\n                </el-table>\r\n              </div>\r\n            </el-card>\r\n            \r\n            <!-- 安全报警信息 -->\r\n            <el-card class=\"alarm-card\">\r\n              <template #header>\r\n                <span>安全报警记录</span>\r\n              </template>\r\n              \r\n              <el-table :data=\"getAlarmDetails(surgery).slice(0, showAllAlarms[surgery.id] ? undefined : 5)\" style=\"width: 100%\">\r\n                <el-table-column prop=\"time\" label=\"时间\" width=\"180\">\r\n                  <template #default=\"{ row }\">\r\n                    {{ formatTime(row.time) }}\r\n                  </template>\r\n                </el-table-column>\r\n                <el-table-column prop=\"code\" label=\"故障码\" width=\"120\">\r\n                  <template #default=\"{ row }\">\r\n                    {{ row.code || row.error_code || '无' }}\r\n                  </template>\r\n                </el-table-column>\r\n                <el-table-column prop=\"message\" label=\"报警信息\" />\r\n                <el-table-column prop=\"status\" label=\"处理状态\" width=\"120\">\r\n                  <template #default=\"{ row }\">\r\n                    <el-tag :type=\"row.status === '已恢复' ? 'success' : row.status === '未处理' ? 'danger' : 'warning'\">\r\n                      {{ row.status }}\r\n                    </el-tag>\r\n                  </template>\r\n                </el-table-column>\r\n              </el-table>\r\n              \r\n              <!-- 展开/折叠按钮 -->\r\n              <div v-if=\"getAlarmDetails(surgery).length > 5\" class=\"alarm-toggle\">\r\n                <el-button \r\n                  type=\"text\" \r\n                  @click=\"toggleAlarms(surgery.id)\"\r\n                  size=\"small\"\r\n                >\r\n                  <el-icon>\r\n                    <ArrowDown v-if=\"!showAllAlarms[surgery.id]\" />\r\n                    <ArrowUp v-else />\r\n                  </el-icon>\r\n                  {{ showAllAlarms[surgery.id] ? '收起' : `展开更多 (${getAlarmDetails(surgery).length - 5}条)` }}\r\n                </el-button>\r\n              </div>\r\n              \r\n              <div class=\"alarm-summary\">\r\n                <el-tag type=\"danger\">报警总数: {{ surgery.alarm_count || 0 }}</el-tag>\r\n                <el-tag type=\"info\" style=\"margin-left: 8px;\">未处理: {{ getDeduplicatedAlarmStats(surgery).activeCount }}</el-tag>\r\n                <div style=\"margin-top: 8px; font-size: 12px; color: #909399;\">\r\n                  <span>说明：相同故障码在解除恢复前只统计一次</span>\r\n                </div>\r\n              </div>\r\n            </el-card>\r\n            \r\n            <!-- 网络延时统计 -->\r\n            <el-card v-if=\"surgery.is_remote_surgery\" class=\"network-card\">\r\n              <template #header>\r\n                <span>网络延时统计</span>\r\n              </template>\r\n              \r\n              <div v-if=\"surgery.network_stats\" class=\"network-stats\">\r\n                <div class=\"network-summary\">\r\n                  <el-tag type=\"info\">数据点: {{ surgery.network_stats.count }}</el-tag>\r\n                  <el-tag type=\"success\" style=\"margin-left: 8px;\">平均延时: {{ surgery.network_stats.avg }}ms</el-tag>\r\n                  <el-tag type=\"warning\" style=\"margin-left: 8px;\">范围: {{ surgery.network_stats.min }}-{{ surgery.network_stats.max }}ms</el-tag>\r\n                </div>\r\n                \r\n                <!-- 网络延时曲线图 -->\r\n                <div class=\"network-chart-container\">\r\n                  <div :id=\"`networkChart_${surgery.id}`\" style=\"width: 100%; height: 300px\"></div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div v-else class=\"network-no-data\">\r\n                <el-empty description=\"暂无网络延时数据\" :image-size=\"60\" />\r\n              </div>\r\n            </el-card>\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted, nextTick, computed, watch, h, resolveComponent } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\nimport { formatTime, formatTimeShort, formatSurgeryTime, loadServerTimezone } from '../utils/timeFormatter'\r\nimport { \r\n  DataAnalysis, \r\n  Download, \r\n  SwitchButton, \r\n  Close, \r\n  VideoPlay, \r\n  VideoPause, \r\n  ArrowUp, \r\n  ArrowDown,\r\n  ArrowLeft,\r\n  ArrowRight,\r\n  Calendar,\r\n  Lightning,\r\n  Loading,\r\n  InfoFilled,\r\n  Document,\r\n  Refresh\r\n} from '@element-plus/icons-vue'\r\nimport { debounce, safeNextTick } from '@/utils/resizeObserverFix'\r\nimport * as echarts from 'echarts'\r\n\r\nimport api from '@/api'\r\n\r\nexport default {\r\n  name: 'SurgeryStatistics',\r\n  components: {\r\n    DataAnalysis,\r\n    Download,\r\n    SwitchButton,\r\n    Close,\r\n    VideoPlay,\r\n    VideoPause,\r\n        ArrowUp, \r\n    ArrowDown,\r\n    ArrowLeft,\r\n    ArrowRight,\r\n    Calendar,\r\n    Lightning,\r\n    Loading,\r\n    Document,\r\n    Refresh\r\n  },\r\n  setup() {\r\n    // 不需要悬停效果：移除自定义 progressDot 渲染与状态区分\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    const route = useRoute()\r\n    \r\n    // ResizeObserver 错误处理已在全局初始化，这里不需要重复处理\r\n    \r\n    // 响应式数据\r\n    const surgeries = ref([])\r\n    const activeTab = ref('')\r\n    const armDetailsVisible = reactive({})\r\n    const showAllAlarms = reactive({})\r\n    const analyzing = ref(false)\r\n    \r\n    // PostgreSQL数据预览相关\r\n    const postgresqlPreviewVisible = reactive({})\r\n    const postgresqlDataText = reactive({})\r\n    const copyingData = reactive({})\r\n    const refreshingData = reactive({})\r\n    \r\n    // 状态机图表相关\r\n    const stateMachineCharts = new Map() // 为每个手术存储独立的图表实例\r\n    const chartViewRange = ref(5) // 默认显示5分钟\r\n    const chartCurrentTime = ref(null) // 当前图表中心时间\r\n    \r\n    // Y轴刻度配置 - 固定间隔\r\n    const yAxisConfig = {\r\n      // 固定间隔 - 显示指定的刻度值，使用映射位置增大间距\r\n      fixedInterval: {\r\n        afterBuildTicks: function(axis) {\r\n          // 使用固定的刻度值\r\n          const fixedStates = getFixedTicks()\r\n          const positionMap = getStateToYPositionMap()\r\n          \r\n          // 创建刻度数组，确保显示正确的状态值\r\n          axis.ticks = fixedStates.map(stateValue => {\r\n            const yPosition = positionMap[stateValue]\r\n            return {\r\n              value: yPosition,        // Y轴位置使用映射值\r\n              label: stateValue.toString() // 显示原始状态值\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 状态值到Y轴位置的映射 - 增大特定刻度之间的距离\r\n    // 这个映射用于在Y轴上增大特定状态值之间的视觉距离，而不改变显示的刻度值\r\n    const getStateToYPositionMap = () => {\r\n      return {\r\n        0: 0,   // 0位置\r\n        1: 5,   // 1位置（与0距离增大）\r\n        2: 10,  // 2位置\r\n        10: 20, // 10位置\r\n        12: 25, // 12位置（与10距离增大）\r\n        13: 30, // 13位置（与12距离增大）\r\n        14: 35, // 14位置（与13距离增大）\r\n        20: 45, // 20位置（与14距离增大）\r\n        21: 50, // 21位置（与20距离增大）\r\n        30: 60, // 30位置（与21距离增大）\r\n        31: 65  // 31位置（与30距离增大）\r\n      }\r\n    }\r\n    \r\n    // 固定显示指定的刻度值\r\n    const getFixedTicks = () => {\r\n      // 显示的刻度值：0, 1, 2, 10, 12, 13, 14, 20, 21, 30, 31\r\n      return [0, 1, 2, 10, 12, 13, 14, 20, 21, 30, 31]\r\n    }\r\n\r\n    \r\n\r\n\r\n    // 计算属性 - 获取日志条目数据\r\n    const logEntries = computed(() => {\r\n      // 优先从URL参数获取日志ID\r\n      const logIdsParam = route.query.logIds\r\n      if (logIdsParam) {\r\n        // 如果有URL参数，直接返回空数组，让后端处理\r\n        return []\r\n      }\r\n      \r\n      // 如果没有URL参数，尝试从sessionStorage获取数据（兼容旧版本）\r\n      try {\r\n        const surgeryData = sessionStorage.getItem('surgeryAnalysisData')\r\n        if (surgeryData) {\r\n          const data = JSON.parse(surgeryData)\r\n          if (data && data.entries && data.entries.length > 0) {\r\n            // 检查数据是否过期（1小时）\r\n            const dataAge = Date.now() - (data.timestamp || 0)\r\n            if (dataAge > 60 * 60 * 1000) {\r\n              console.log('手术分析数据已过期，清除缓存')\r\n              sessionStorage.removeItem('surgeryAnalysisData')\r\n              return []\r\n            }\r\n            \r\n            // 检查是否是压缩格式的数据\r\n            if (data.compressed) {\r\n              // 解压缩数据\r\n              const decompressedEntries = data.entries.map(entry => ({\r\n                timestamp: entry.t,\r\n                error_code: entry.e,\r\n                param1: entry.p1,\r\n                param2: entry.p2,\r\n                param3: entry.p3,\r\n                param4: entry.p4,\r\n                explanation: entry.exp,\r\n                log_name: entry.ln\r\n              }))\r\n              \r\n              return decompressedEntries\r\n            } else {\r\n              return data.entries\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('解析手术分析数据失败:', error)\r\n        sessionStorage.removeItem('surgeryAnalysisData')\r\n      }\r\n      \r\n      return []\r\n    })\r\n    \r\n    const logEntriesCount = computed(() => logEntries.value.length)\r\n    \r\n    // 通过URL参数中的日志ID直接分析手术数据\r\n    const loadBatchLogEntriesByIds = async () => {\r\n      try {\r\n        // 从URL参数获取日志ID\r\n        const logIdsParam = route.query.logIds\r\n        if (!logIdsParam) return\r\n        \r\n        const logIds = logIdsParam.split(',').map(id => parseInt(id))\r\n        if (!logIds || logIds.length === 0) return\r\n        \r\n        // 设置分析状态\r\n        analyzing.value = true\r\n        \r\n        // 调用后端API创建分析任务\r\n        const response = await api.surgeryStatistics.analyzeByLogIds(logIds)\r\n        \r\n        if (response.data.success && response.data.taskId) {\r\n          // 异步任务已创建，开始轮询结果\r\n          await pollTaskResult(response.data.taskId)\r\n        } else if (response.data.success && response.data.data) {\r\n          // 直接返回结果（兼容旧版本）\r\n          surgeries.value = response.data.data || []\r\n          \r\n          if (surgeries.value.length > 0) {\r\n            activeTab.value = surgeries.value[0].id.toString()\r\n            surgeries.value.forEach(surgery => {\r\n              armDetailsVisible[surgery.id] = false\r\n              showAllAlarms[surgery.id] = false\r\n              // 初始化PostgreSQL预览状态\r\n              postgresqlPreviewVisible[surgery.id] = false\r\n              postgresqlDataText[surgery.id] = ''\r\n            })\r\n          }\r\n          \r\n          ElMessage.success(response.data.message || `成功统计出 ${surgeries.value.length} 场手术`)\r\n        } else {\r\n          ElMessage.error(response.data.message || '统计失败')\r\n        }\r\n        \r\n      } catch (error) {\r\n        ElMessage.error('分析批量日志数据失败: ' + (error.response?.data?.message || error.message))\r\n      } finally {\r\n        analyzing.value = false\r\n      }\r\n    }\r\n    \r\n    // 轮询任务结果\r\n    const pollTaskResult = async (taskId) => {\r\n      const maxAttempts = 60 // 最多轮询60次（5分钟）\r\n      let attempts = 0\r\n      \r\n      const poll = async () => {\r\n        try {\r\n          const response = await api.surgeryStatistics.getAnalysisTaskStatus(taskId)\r\n          \r\n          if (response.data.success) {\r\n            const task = response.data.data\r\n            \r\n            if (task.status === 'completed') {\r\n              // 任务完成，显示结果\r\n              surgeries.value = task.result || []\r\n              \r\n              if (surgeries.value.length > 0) {\r\n                activeTab.value = surgeries.value[0].id.toString()\r\n                surgeries.value.forEach(surgery => {\r\n                  armDetailsVisible[surgery.id] = false\r\n                  showAllAlarms[surgery.id] = false\r\n                  // 初始化PostgreSQL预览状态\r\n                  postgresqlPreviewVisible[surgery.id] = false\r\n                  postgresqlDataText[surgery.id] = ''\r\n                })\r\n              }\r\n              \r\n              ElMessage.success(`成功分析出 ${surgeries.value.length} 场手术`)\r\n              return\r\n            } else if (task.status === 'failed') {\r\n              // 任务失败\r\n              ElMessage.error(task.error || '分析任务失败')\r\n              return\r\n            } else if (task.status === 'processing') {\r\n              // 任务进行中，继续轮询\r\n              attempts++\r\n              if (attempts < maxAttempts) {\r\n                // 使用Promise包装setTimeout\r\n                await new Promise(resolve => setTimeout(resolve, 5000))\r\n                await poll()\r\n              } else {\r\n                ElMessage.error('分析任务超时，请稍后查看结果')\r\n              }\r\n            }\r\n          } else {\r\n            ElMessage.error('查询任务状态失败')\r\n          }\r\n        } catch (error) {\r\n          ElMessage.error('查询任务状态失败: ' + error.message)\r\n        }\r\n      }\r\n      \r\n      // 开始轮询\r\n      await poll()\r\n    }\r\n    \r\n    // 获取时间范围\r\n    const getTimeRange = () => {\r\n      if (logEntries.value.length === 0) return '无数据'\r\n      \r\n      const timestamps = logEntries.value.map(entry => new Date(entry.timestamp))\r\n      const minTime = new Date(Math.min(...timestamps))\r\n      const maxTime = new Date(Math.max(...timestamps))\r\n      \r\n      return `${formatTimeShort(minTime)} 至 ${formatTimeShort(maxTime)}`\r\n    }\r\n\r\n    // 获取分析按钮文本\r\n    const getAnalysisButtonText = () => {\r\n      if (logEntriesCount.value === 0) {\r\n        return '请先加载日志条目数据'\r\n      }\r\n              return `统计日志条目 (${logEntriesCount.value})`\r\n    }\r\n\r\n          // 统计日志数据\r\n    const analyzeLogs = async () => {\r\n      if (logEntries.value.length === 0) {\r\n        ElMessage.warning('暂无日志数据，请先在批量查看或日志查看页面加载日志数据')\r\n        return\r\n      }\r\n      \r\n      analyzing.value = true\r\n      try {\r\n        // 直接使用已排序的日志条目数据进行手术分析\r\n        \r\n        // 检查数据大小\r\n        const dataSize = JSON.stringify(logEntries.value).length\r\n        const maxSize = 10 * 1024 * 1024 // 10MB\r\n        let analysisData = logEntries.value\r\n        \r\n        if (dataSize > maxSize) {\r\n          ElMessage.warning(`数据量较大(${(dataSize / 1024 / 1024).toFixed(1)}MB)，将进行数据采样以提高统计速度`)\r\n          \r\n          // 数据采样：保留关键数据点\r\n          const sampleSize = Math.floor(maxSize / (dataSize / logEntries.value.length))\r\n          const step = Math.floor(logEntries.value.length / sampleSize)\r\n          analysisData = []\r\n          \r\n          for (let i = 0; i < logEntries.value.length; i += step) {\r\n            analysisData.push(logEntries.value[i])\r\n            if (analysisData.length >= sampleSize) break\r\n          }\r\n          \r\n        }\r\n        \r\n\r\n        \r\n        // 调用新的API端点，传递已排序的日志条目数据\r\n        const response = await api.surgeryStatistics.analyzeSortedEntries({\r\n          logEntries: analysisData,\r\n          includePostgreSQLStructure: true\r\n        })\r\n        \r\n        if (response.data.success) {\r\n          surgeries.value = response.data.data || []\r\n          \r\n          \r\n          \r\n          if (surgeries.value.length > 0) {\r\n            activeTab.value = surgeries.value[0].id.toString()\r\n            surgeries.value.forEach(surgery => {\r\n              armDetailsVisible[surgery.id] = false\r\n              showAllAlarms[surgery.id] = false\r\n              // 初始化PostgreSQL预览状态\r\n              postgresqlPreviewVisible[surgery.id] = false\r\n              postgresqlDataText[surgery.id] = ''\r\n            })\r\n          }\r\n          \r\n          ElMessage.success(`手术数据统计完成，共发现 ${surgeries.value.length} 场手术`)\r\n        } else {\r\n          ElMessage.error(response.data.message || '统计失败')\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('统计日志数据失败: ' + (error.response?.data?.message || error.message))\r\n      } finally {\r\n        analyzing.value = false\r\n      }\r\n    }\r\n\r\n    // 导出手术数据（结构化数据）\r\n    const exportSurgeryData = async (surgeryId) => {\r\n      try {\r\n        const response = await api.surgeryStatistics.exportSingleSurgeryData(surgeryId)\r\n        if (response.data.success) {\r\n          ElMessage.success('手术结构化数据导出成功')\r\n          // 可以在这里添加下载功能\r\n          console.log('导出的结构化数据:', response.data.data)\r\n        } else {\r\n          ElMessage.error(response.data.message || '导出失败')\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('导出手术数据失败: ' + (error.response?.data?.message || error.message))\r\n      }\r\n    }\r\n\r\n    // 切换PostgreSQL数据预览显示\r\n    const togglePostgreSQLPreview = (surgeryId) => {\r\n      postgresqlPreviewVisible[surgeryId] = !postgresqlPreviewVisible[surgeryId]\r\n      \r\n      // 如果展开预览，则生成PostgreSQL数据\r\n      if (postgresqlPreviewVisible[surgeryId] && !postgresqlDataText[surgeryId]) {\r\n        generatePostgreSQLData(surgeryId)\r\n      }\r\n    }\r\n\r\n    // 本地时间格式：YYYY-MM-DD HH:mm:ss（与批量查看一致）\r\n    const serverOffsetMinutes = ref(null)\r\n    const loadServerTimezone = async () => {\r\n      try {\r\n        const resp = await fetch('/api/timezone')\r\n        const json = await resp.json()\r\n        if (typeof json.offsetMinutes === 'number') serverOffsetMinutes.value = json.offsetMinutes\r\n      } catch (_) {\r\n        serverOffsetMinutes.value = null\r\n      }\r\n    }\r\n\r\n    // UTC时间写库格式：YYYY-MM-DD HH:mm:ss（与后端保持一致）\r\n    const formatUtcForDatabase = (value) => {\r\n      if (!value) return null\r\n      const d = new Date(value)\r\n      if (Number.isNaN(d.getTime())) return null\r\n      \r\n      const pad = (n) => String(n).padStart(2, '0')\r\n      const y = d.getUTCFullYear()\r\n      const m = pad(d.getUTCMonth() + 1)\r\n      const day = pad(d.getUTCDate())\r\n      const h = pad(d.getUTCHours())\r\n      const mi = pad(d.getUTCMinutes())\r\n      const s = pad(d.getUTCSeconds())\r\n      return `${y}-${m}-${day} ${h}:${mi}:${s}`\r\n    }\r\n\r\n    const formatLocalTimestamp = (value) => {\r\n      if (!value) return null\r\n      const d = new Date(value)\r\n      if (!Number.isNaN(d.getTime()) && serverOffsetMinutes.value !== null) {\r\n        const localOffset = -d.getTimezoneOffset()\r\n        const delta = (serverOffsetMinutes.value - localOffset) * 60 * 1000\r\n        d.setTime(d.getTime() + delta)\r\n      }\r\n      if (Number.isNaN(d.getTime())) return null\r\n      const pad = (n) => String(n).padStart(2, '0')\r\n      const y = d.getFullYear()\r\n      const m = pad(d.getMonth() + 1)\r\n      const day = pad(d.getDate())\r\n      const h = pad(d.getHours())\r\n      const mi = pad(d.getMinutes())\r\n      const s = pad(d.getSeconds())\r\n      return `${y}-${m}-${day} ${h}:${mi}:${s}`\r\n    }\r\n\r\n    // 生成PostgreSQL结构化数据\r\n    const generatePostgreSQLData = (surgeryId) => {\r\n      const surgery = surgeries.value.find(s => s.id === surgeryId)\r\n      if (!surgery) {\r\n        postgresqlDataText[surgeryId] = '未找到手术数据'\r\n        return\r\n      }\r\n\r\n      try {\r\n        // 设备编号统一使用字符串：优先后端返回的 device_ids，其次预览，最后从 surgery_id 提取前缀\r\n        const extractedPrefix = surgery.surgery_id ? surgery.surgery_id.split('-').slice(0, -1).join('-') : undefined\r\n        const deviceIdStr = (Array.isArray(surgery.device_ids) && surgery.device_ids[0])\r\n          || (surgery.postgresql_row_preview?.device_ids?.[0])\r\n          || extractedPrefix\r\n        \r\n        // 构建完整的surgeries表数据\r\n        const structured = surgery.postgresql_structure || generateStructuredData(surgery)\r\n        const surgeriesData = {\r\n          surgery_id: surgery.surgery_id,\r\n          source_log_ids: Array.isArray(surgery.source_log_ids) ? surgery.source_log_ids : (surgery.log_id ? [surgery.log_id] : []),\r\n          device_ids: deviceIdStr ? [String(deviceIdStr)] : [],\r\n          log_entry_start_id: surgery.log_entry_start_id || null,\r\n          log_entry_end_id: surgery.log_entry_end_id || null,\r\n          start_time: formatUtcForDatabase(surgery.surgery_start_time),\r\n          end_time: formatUtcForDatabase(surgery.surgery_end_time),\r\n          has_fault: (structured?.surgery_stats?.has_fault) ?? (surgery.has_error || false),\r\n          is_remote: surgery.is_remote_surgery || false,\r\n          success: (structured?.surgery_stats?.success) ?? !(surgery.has_error || false),\r\n          structured_data: structured,\r\n          // 让数据库默认列负责 created_at/updated_at/last_analyzed_at\r\n        }\r\n\r\n        postgresqlDataText[surgeryId] = JSON.stringify(surgeriesData, null, 2)\r\n      } catch (error) {\r\n        console.error('生成PostgreSQL数据失败:', error)\r\n        postgresqlDataText[surgeryId] = '生成PostgreSQL数据失败: ' + error.message\r\n      }\r\n    }\r\n\r\n    // 生成结构化数据（如果后端没有提供）\r\n    const generateStructuredData = (surgery) => {\r\n      // 构建power_cycles - 使用正确的字段名\r\n      const powerCycles = []\r\n      \r\n      // 使用正确的字段名：power_on_times 和 shutdown_times\r\n      if (surgery.power_on_times && surgery.shutdown_times) {\r\n        const onTimes = surgery.power_on_times\r\n        const offTimes = surgery.shutdown_times\r\n        \r\n        for (let i = 0; i < Math.max(onTimes.length, offTimes.length); i++) {\r\n          if (onTimes[i] || offTimes[i]) {\r\n            powerCycles.push({\r\n              on_time: onTimes[i] ? formatUtcForDatabase(onTimes[i]) : null,\r\n              off_time: offTimes[i] ? formatUtcForDatabase(offTimes[i]) : null\r\n            })\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 兼容旧版本字段名\r\n      if (powerCycles.length === 0) {\r\n        for (let i = 1; i <= 4; i++) {\r\n          const powerOnTime = surgery[`power${i}_on_time`]\r\n          const powerOffTime = surgery[`power${i}_off_time`]\r\n          if (powerOnTime && powerOffTime) {\r\n            powerCycles.push({\r\n              on_time: formatUtcForDatabase(powerOnTime),\r\n              off_time: formatUtcForDatabase(powerOffTime)\r\n            })\r\n          }\r\n        }\r\n      }\r\n\r\n      // 构建arms数据 - 使用正确的字段名\r\n      const arms = []\r\n      for (let i = 1; i <= 4; i++) {\r\n        const armUsage = surgery[`arm${i}_usage`] || []\r\n        arms.push({\r\n          arm_id: i,\r\n          instrument_usage: armUsage.map(usage => ({\r\n            tool_type: usage.instrumentName || usage.tool_type || '未知器械',\r\n            udi: usage.udi || '',\r\n            start_time: formatUtcForDatabase(usage.startTime || usage.start_time),\r\n            end_time: formatUtcForDatabase(usage.endTime || usage.end_time),\r\n            energy_activation: Array.isArray(usage.energy_activation)\r\n              ? usage.energy_activation.map(t => (t ? formatUtcForDatabase(t) : t))\r\n              : []\r\n          }))\r\n        })\r\n      }\r\n\r\n      // 构建surgery_stats\r\n      const surgeryStats = {\r\n        success: !surgery.has_error,\r\n        network_latency_ms: surgery.network_stats ? surgery.network_stats.data.map(d => ({\r\n          time: formatUtcForDatabase(d.timestamp),\r\n          latency: d.latency\r\n        })) : [],\r\n        faults: surgery.alarm_details ? surgery.alarm_details.map(fault => ({\r\n          timestamp: formatUtcForDatabase(fault.time),\r\n          error_code: fault.code,\r\n          param1: \"\",\r\n          param2: \"\",\r\n          param3: \"\",\r\n          param4: \"\",\r\n          explanation: fault.message,\r\n          log_id: surgery.log_id || 1\r\n        })) : [],\r\n        arm_switch_count: 0,\r\n        left_hand_clutch: surgery.hand_clutch_stats?.arm1 || 0,\r\n        right_hand_clutch: surgery.hand_clutch_stats?.arm2 || 0,\r\n        foot_clutch: surgery.foot_pedal_stats?.clutch || 0,\r\n        endoscope_pedal: surgery.foot_pedal_stats?.camera || 0\r\n      }\r\n\r\n      return {\r\n        power_cycles: powerCycles,\r\n        arms: arms,\r\n        surgery_stats: surgeryStats\r\n      }\r\n    }\r\n\r\n    // 复制PostgreSQL数据到剪贴板\r\n    const copyPostgreSQLData = async (surgeryId) => {\r\n      copyingData[surgeryId] = true\r\n      try {\r\n        const text = postgresqlDataText[surgeryId]\r\n        if (text) {\r\n          await navigator.clipboard.writeText(text)\r\n          ElMessage.success('PostgreSQL数据已复制到剪贴板')\r\n        } else {\r\n          ElMessage.warning('没有可复制的数据')\r\n        }\r\n      } catch (error) {\r\n        console.error('复制失败:', error)\r\n        ElMessage.error('复制失败: ' + error.message)\r\n      } finally {\r\n        copyingData[surgeryId] = false\r\n      }\r\n    }\r\n\r\n    // 刷新PostgreSQL数据\r\n    const refreshPostgreSQLData = async (surgeryId) => {\r\n      refreshingData[surgeryId] = true\r\n      try {\r\n        generatePostgreSQLData(surgeryId)\r\n        ElMessage.success('PostgreSQL数据已刷新')\r\n      } catch (error) {\r\n        console.error('刷新失败:', error)\r\n        ElMessage.error('刷新失败: ' + error.message)\r\n      } finally {\r\n        refreshingData[surgeryId] = false\r\n      }\r\n    }\r\n\r\n    // 切换工具臂详情显示\r\n    const toggleArmDetails = (surgeryId, armIndex) => {\r\n      const key = `${surgeryId}_${armIndex}`\r\n      armDetailsVisible[key] = !armDetailsVisible[key]\r\n    }\r\n\r\n    // 切换报警记录显示\r\n    const toggleAlarms = (surgeryId) => {\r\n      showAllAlarms[surgeryId] = !showAllAlarms[surgeryId]\r\n    }\r\n\r\n    // 滚动到安全报警记录卡片\r\n    const scrollToAlarmCard = (surgeryId) => {\r\n      // 确保当前手术标签页是激活的\r\n      if (activeTab.value !== surgeryId.toString()) {\r\n        activeTab.value = surgeryId.toString()\r\n      }\r\n      \r\n      // 等待DOM更新后滚动到报警卡片\r\n      nextTick(() => {\r\n        const alarmCard = document.querySelector(`[data-surgery-id=\"${surgeryId}\"] .alarm-card`)\r\n        if (alarmCard) {\r\n          alarmCard.scrollIntoView({ \r\n            behavior: 'smooth', \r\n            block: 'start' \r\n          })\r\n          \r\n          // 添加高亮效果\r\n          alarmCard.style.boxShadow = '0 0 0 2px #F56C6C, 0 4px 12px rgba(245, 108, 108, 0.3)'\r\n          alarmCard.style.transition = 'box-shadow 0.3s ease'\r\n          \r\n          // 3秒后移除高亮效果\r\n          setTimeout(() => {\r\n            alarmCard.style.boxShadow = ''\r\n          }, 3000)\r\n        }\r\n      })\r\n    }\r\n\r\n    // 滚动到网络延时统计卡片\r\n    const scrollToNetworkCard = (surgeryId) => {\r\n      // 确保当前手术标签页是激活的\r\n      if (activeTab.value !== surgeryId.toString()) {\r\n        activeTab.value = surgeryId.toString()\r\n      }\r\n      \r\n      // 等待DOM更新后滚动到网络卡片\r\n      nextTick(() => {\r\n        const networkCard = document.querySelector(`[data-surgery-id=\"${surgeryId}\"] .network-card`)\r\n        if (networkCard) {\r\n          networkCard.scrollIntoView({ \r\n            behavior: 'smooth', \r\n            block: 'start' \r\n          })\r\n          \r\n          // 添加高亮效果\r\n          networkCard.style.boxShadow = '0 0 0 2px #409EFF, 0 4px 12px rgba(64, 158, 255, 0.3)'\r\n          networkCard.style.transition = 'box-shadow 0.3s ease'\r\n          \r\n          // 3秒后移除高亮效果\r\n          setTimeout(() => {\r\n            networkCard.style.boxShadow = ''\r\n          }, 3000)\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n\r\n    // 获取工具臂使用情况\r\n    const getArmUsages = (surgery) => {\r\n      return [\r\n        surgery.arm1_usage || [],\r\n        surgery.arm2_usage || [],\r\n        surgery.arm3_usage || [],\r\n        surgery.arm4_usage || []\r\n      ]\r\n    }\r\n\r\n      // 手术器械表数据\r\n      const getInstrumentRows = (surgery) => {\r\n        if (!surgery) return []\r\n        const grouped = new Map()\r\n        const allArms = getArmUsages(surgery)\r\n        allArms.forEach(armUsage => {\r\n          (armUsage || []).forEach(u => {\r\n            if (!u) return\r\n            if (!u.startTime || !u.endTime) return\r\n            const udi = u.udi || '未知'\r\n            const key = `${udi}__${u.instrumentName || '未知器械'}`\r\n            if (!grouped.has(key)) {\r\n              grouped.set(key, {\r\n                instrumentName: u.instrumentName || '未知器械',\r\n                udi: udi,\r\n                segments: []\r\n              })\r\n            }\r\n            grouped.get(key).segments.push({ startTime: u.startTime, endTime: u.endTime })\r\n          })\r\n        })\r\n        // 合并相邻/重叠的段，并计算整体起止\r\n        const rows = Array.from(grouped.values()).map(item => {\r\n          // 排序\r\n          item.segments.sort((a, b) => new Date(a.startTime) - new Date(b.startTime))\r\n          // 合并重叠或相邻\r\n          const merged = []\r\n          for (const seg of item.segments) {\r\n            if (merged.length === 0) { merged.push({ ...seg }); continue }\r\n            const last = merged[merged.length - 1]\r\n            const lastEnd = new Date(last.endTime).getTime()\r\n            const curStart = new Date(seg.startTime).getTime()\r\n            const curEnd = new Date(seg.endTime).getTime()\r\n            if (curStart <= lastEnd) {\r\n              if (curEnd > lastEnd) last.endTime = seg.endTime\r\n            } else {\r\n              merged.push({ ...seg })\r\n            }\r\n          }\r\n          const startTime = merged.length ? merged[0].startTime : null\r\n          const endTime = merged.length ? merged[merged.length - 1].endTime : null\r\n          return { ...item, segments: merged, startTime, endTime }\r\n        })\r\n        // 按起始时间排序\r\n        rows.sort((a, b) => new Date(a.startTime) - new Date(b.startTime))\r\n        return rows\r\n      }\r\n\r\n    // 获取工具臂总时间\r\n    const getArmTotalTime = (armUsage) => {\r\n      if (!armUsage || armUsage.length === 0) return '0分钟'\r\n      \r\n      // 计算所有完整使用时间段的总时长\r\n      const totalMinutes = armUsage\r\n        .filter(usage => usage.startTime && usage.endTime)\r\n        .reduce((total, usage) => {\r\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)\r\n          return total + duration\r\n        }, 0)\r\n      \r\n      return `${totalMinutes}分钟`\r\n    }\r\n\r\n    // 获取报警类型标签类型\r\n    const getAlarmTypeTag = (type) => {\r\n      switch (type) {\r\n        case '错误':\r\n          return 'danger'\r\n        case '警告':\r\n          return 'warning'\r\n        case '网络':\r\n          return 'info'\r\n        default:\r\n          return 'info'\r\n      }\r\n    }\r\n\r\n    // 获取报警详情\r\n    const getAlarmDetails = (surgery) => {\r\n      if (!surgery || !surgery.alarm_details) return []\r\n      \r\n      let details = []\r\n      \r\n      if (typeof surgery.alarm_details === 'string') {\r\n        try {\r\n          details = JSON.parse(surgery.alarm_details)\r\n        } catch (error) {\r\n          console.error('解析alarm_details字符串失败:', error)\r\n          return []\r\n        }\r\n      } else {\r\n        details = surgery.alarm_details || []\r\n      }\r\n      \r\n      return details\r\n    }\r\n\r\n    // 获取去重后的故障统计信息\r\n    const getDeduplicatedAlarmStats = (surgery) => {\r\n      const details = getAlarmDetails(surgery)\r\n      if (!details || details.length === 0) {\r\n        return { uniqueCount: 0, totalCount: 0, activeCount: 0 }\r\n      }\r\n      \r\n      // 统计唯一故障码数量\r\n      const uniqueCodes = new Set(details.map(d => d.code))\r\n      const uniqueCount = uniqueCodes.size\r\n      \r\n      // 统计总故障数量\r\n      const totalCount = details.length\r\n      \r\n      // 统计未处理的故障数量\r\n      const activeCount = details.filter(d => d.status === '未处理' && d.isActive === true).length\r\n      \r\n      return { uniqueCount, totalCount, activeCount }\r\n    }\r\n\r\n\r\n    // 获取统一的时间轴范围（重新设计：严格使用手术开始到手术结束时间）\r\n    const getTimelineRange = (surgery) => {\r\n      if (!surgery) return { start: null, end: null }\r\n      \r\n      // 重新设计：严格使用手术开始和结束时间，确保与状态机图表一致\r\n      const start = surgery.surgery_start_time\r\n      const end = surgery.surgery_end_time\r\n      \r\n      // 确保开始时间早于结束时间\r\n      if (start && end) {\r\n        const startTime = new Date(start).getTime()\r\n        const endTime = new Date(end).getTime()\r\n        \r\n        if (startTime >= endTime) {\r\n          console.warn('时间轴范围异常：开始时间晚于或等于结束时间', {\r\n            surgery_id: surgery.surgery_id,\r\n            start: start,\r\n            end: end,\r\n            startTime: startTime,\r\n            endTime: endTime\r\n          })\r\n          return { start: null, end: null }\r\n        }\r\n      }\r\n      \r\n      console.log('时间轴范围 (重新设计):', surgery.surgery_id, {\r\n        start: start,\r\n        end: end,\r\n        duration: start && end ? (new Date(end).getTime() - new Date(start).getTime()) / (1000 * 60) : 'N/A'\r\n      })\r\n      \r\n      return { start, end }\r\n    }\r\n\r\n    // 获取\"手术时间线\"事件范围：起点为第一个事件时间，终点为最后一个事件时间\r\n    const getEventTimelineRange = (surgery) => {\r\n      try {\r\n        const events = getSortedTimelineEvents(surgery)\r\n        if (!events || events.length === 0) {\r\n          // 回退到进度条时间轴范围（开机-关机）\r\n          return getProgressTimelineRange(surgery)\r\n        }\r\n        const start = events[0].time\r\n        const end = events[events.length - 1].time\r\n        return { start, end }\r\n      } catch (e) {\r\n        return getProgressTimelineRange(surgery)\r\n      }\r\n    }\r\n\r\n    // 获取进度条时间轴范围（使用开机时间和关机时间）\r\n    const getProgressTimelineRange = (surgery) => {\r\n      if (!surgery) return { start: null, end: null }\r\n      \r\n      // 获取开机时间\r\n      const powerOnTime = getPowerOnTime(surgery)\r\n      \r\n      // 获取关机时间，如果没有则使用手术结束时间\r\n      const powerOffTime = getPowerOffTime(surgery)\r\n      const endTime = powerOffTime || surgery.surgery_end_time\r\n      \r\n      // 确定时间轴起点：优先使用开机时间，如果没有则使用手术开始时间\r\n      let start = powerOnTime\r\n      if (!start && surgery.surgery_start_time) {\r\n        start = surgery.surgery_start_time\r\n      }\r\n      \r\n      // 确定时间轴终点：优先使用关机时间，如果没有则使用手术结束时间\r\n      let end = endTime\r\n      if (!end && surgery.surgery_end_time) {\r\n        end = surgery.surgery_end_time\r\n      }\r\n      \r\n      // 确保开始时间早于结束时间\r\n      if (start && end) {\r\n        const startTime = new Date(start).getTime()\r\n        const endTime = new Date(end).getTime()\r\n        \r\n        if (startTime >= endTime) {\r\n          console.warn('进度条时间轴范围异常：开始时间晚于或等于结束时间', {\r\n            surgery_id: surgery.surgery_id,\r\n            start: start,\r\n            end: end,\r\n            startTime: startTime,\r\n            endTime: endTime\r\n          })\r\n          return { start: null, end: null }\r\n        }\r\n      }\r\n      \r\n      console.log('进度条时间轴范围:', surgery.surgery_id, {\r\n        start: start,\r\n        end: end,\r\n        powerOnTime: powerOnTime,\r\n        powerOffTime: powerOffTime,\r\n        surgeryEndTime: surgery.surgery_end_time,\r\n        duration: start && end ? (new Date(end).getTime() - new Date(start).getTime()) / (1000 * 60) : 'N/A'\r\n      })\r\n      \r\n      return { start, end }\r\n    }\r\n\r\n    // 计算时间在时间轴上的位置百分比（改进版本，支持跨天）\r\n    const getTimePosition = (time, startTime, endTime) => {\r\n      if (!time || !startTime || !endTime) return 0\r\n      \r\n      try {\r\n        // 确保时间格式正确\r\n        const start = new Date(startTime).getTime()\r\n        const end = new Date(endTime).getTime()\r\n        const current = new Date(time).getTime()\r\n        \r\n        // 检查时间有效性\r\n        if (isNaN(start) || isNaN(end) || isNaN(current)) {\r\n          console.warn('时间计算异常：无效的时间值', { time, startTime, endTime })\r\n          return 0\r\n        }\r\n        \r\n        // 检查时间顺序\r\n        if (start >= end) {\r\n          console.warn('时间轴范围异常：开始时间晚于或等于结束时间', { startTime, endTime })\r\n          return 0\r\n        }\r\n        \r\n        // 计算位置百分比\r\n        const position = ((current - start) / (end - start)) * 100\r\n        \r\n        // 确保位置在有效范围内\r\n        return Math.max(0, Math.min(100, position))\r\n      } catch (error) {\r\n        console.error('时间位置计算失败:', error, { time, startTime, endTime })\r\n        return 0\r\n      }\r\n    }\r\n\r\n    // 获取时间轴刻度位置\r\n    const getTimelineTicks = (startTime, endTime) => {\r\n      if (!startTime || !endTime) return []\r\n      const start = new Date(startTime)\r\n      const end = new Date(endTime)\r\n      const duration = end.getTime() - start.getTime()\r\n      \r\n      // 根据手术时长决定刻度间隔\r\n      let interval\r\n      if (duration <= 30 * 60 * 1000) { // 30分钟以内，5分钟间隔\r\n        interval = 5 * 60 * 1000\r\n      } else if (duration <= 2 * 60 * 60 * 1000) { // 2小时以内，15分钟间隔\r\n        interval = 15 * 60 * 1000\r\n      } else { // 超过2小时，30分钟间隔\r\n        interval = 30 * 60 * 1000\r\n      }\r\n      \r\n      const ticks = []\r\n      let current = start.getTime() + interval // 从第一个间隔开始，避免与开始时间重叠\r\n      while (current < end.getTime()) { // 使用 < 而不是 <=，避免与结束时间重叠\r\n        const position = getTimePosition(current, startTime, endTime)\r\n        ticks.push({\r\n          time: new Date(current),\r\n          position: position\r\n        })\r\n        current += interval\r\n      }\r\n      \r\n      return ticks\r\n    }\r\n\r\n    // 合并重叠的时间段\r\n    const mergeOverlappingTimeRanges = (usages) => {\r\n      if (!usages || usages.length === 0) return []\r\n      \r\n      // 将使用记录转换为时间范围对象\r\n      const timeRanges = usages.map(usage => ({\r\n        startTime: new Date(usage.startTime).getTime(),\r\n        endTime: new Date(usage.endTime).getTime()\r\n      }))\r\n      \r\n      // 按开始时间排序\r\n      timeRanges.sort((a, b) => a.startTime - b.startTime)\r\n      \r\n      const merged = []\r\n      let current = timeRanges[0]\r\n      \r\n      for (let i = 1; i < timeRanges.length; i++) {\r\n        const next = timeRanges[i]\r\n        \r\n        // 如果当前时间段与下一个时间段重叠或相邻，则合并\r\n        if (current.endTime >= next.startTime) {\r\n          current.endTime = Math.max(current.endTime, next.endTime)\r\n        } else {\r\n          // 不重叠，添加当前时间段到结果中\r\n          merged.push(current)\r\n          current = next\r\n        }\r\n      }\r\n      \r\n      // 添加最后一个时间段\r\n      if (current) {\r\n        merged.push(current)\r\n      }\r\n      \r\n      return merged\r\n    }\r\n\r\n    // 获取工具臂时间线样式（时间对齐）\r\n    const getArmTimelineStyle = (armUsage, surgery) => {\r\n      if (!armUsage || armUsage.length === 0 || !surgery.surgery_start_time || !surgery.surgery_end_time) {\r\n        return { left: '0%', width: '0%' }\r\n      }\r\n      \r\n      // 找到所有完整的使用时间段（有开始和结束时间）\r\n      const completeUsages = armUsage.filter(usage => usage.startTime && usage.endTime)\r\n      \r\n      if (completeUsages.length === 0) return { left: '0%', width: '0%' }\r\n      \r\n      // 如果有多个器械使用时间段，需要合并重叠的时间段\r\n      const mergedTimeRanges = mergeOverlappingTimeRanges(completeUsages)\r\n      \r\n      if (mergedTimeRanges.length === 0) return { left: '0%', width: '0%' }\r\n      \r\n      // 计算所有合并后时间段的总长度\r\n      let totalWidth = 0\r\n      const segments = []\r\n      \r\n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件）\r\n      const timelineRange = getEventTimelineRange(surgery)\r\n      if (!timelineRange.start || !timelineRange.end) return { left: '0%', width: '0%' }\r\n      \r\n      mergedTimeRanges.forEach(range => {\r\n        const startPosition = getTimePosition(range.startTime, timelineRange.start, timelineRange.end)\r\n        const endPosition = getTimePosition(range.endTime, timelineRange.start, timelineRange.end)\r\n        const width = Math.max(0, endPosition - startPosition)\r\n        \r\n        segments.push({\r\n          left: `${startPosition}%`,\r\n          width: `${width}%`\r\n        })\r\n        \r\n        totalWidth += width\r\n      })\r\n      \r\n      // 如果有多个时间段，返回第一个（主要时间段）\r\n      // 如果需要显示多个时间段，可以在这里扩展逻辑\r\n      return segments.length > 0 ? segments[0] : { left: '0%', width: '0%' }\r\n    }\r\n\r\n    // 获取工具臂时间线所有段（用于显示多个时间段）\r\n    const getArmTimelineSegments = (armUsage, surgery) => {\r\n      if (!armUsage || armUsage.length === 0 || !surgery.surgery_start_time || !surgery.surgery_end_time) {\r\n        return []\r\n      }\r\n      \r\n      // 找到所有完整的使用时间段（有开始和结束时间）\r\n      const completeUsages = armUsage.filter(usage => usage.startTime && usage.endTime)\r\n      \r\n      if (completeUsages.length === 0) return []\r\n      \r\n      // 合并重叠的时间段\r\n      const mergedTimeRanges = mergeOverlappingTimeRanges(completeUsages)\r\n      \r\n      if (mergedTimeRanges.length === 0) return []\r\n      \r\n      // 计算所有合并后时间段的样式\r\n      const segments = []\r\n      \r\n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件）\r\n      const timelineRange = getEventTimelineRange(surgery)\r\n      if (!timelineRange.start || !timelineRange.end) return []\r\n      \r\n      mergedTimeRanges.forEach((range, index) => {\r\n        const startPosition = getTimePosition(range.startTime, timelineRange.start, timelineRange.end)\r\n        const endPosition = getTimePosition(range.endTime, timelineRange.start, timelineRange.end)\r\n        const width = Math.max(0, endPosition - startPosition)\r\n        \r\n        if (width > 0) {\r\n          segments.push({\r\n            left: `${startPosition}%`,\r\n            width: `${width}%`\r\n          })\r\n        }\r\n      })\r\n      \r\n      return segments\r\n    }\r\n\r\n    // 获取手术时间段在总时间轴上的样式\r\n    const getSurgeryTimelineStyle = (surgery) => {\r\n      if (!surgery || !surgery.surgery_start_time || !surgery.surgery_end_time) {\r\n        return { left: '0%', width: '0%' }\r\n      }\r\n      \r\n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件）\r\n      const timelineRange = getEventTimelineRange(surgery)\r\n      if (!timelineRange.start || !timelineRange.end) {\r\n        return { left: '0%', width: '0%' }\r\n      }\r\n      \r\n      // 手术进度条：显示手术开始到手术结束的时间段，但基于开机时间到关机时间的时间轴\r\n      const startPosition = getTimePosition(surgery.surgery_start_time, timelineRange.start, timelineRange.end)\r\n      const endPosition = getTimePosition(surgery.surgery_end_time, timelineRange.start, timelineRange.end)\r\n      const width = Math.max(0, endPosition - startPosition)\r\n      \r\n      console.log('手术进度条计算:', surgery.surgery_id, {\r\n        surgeryStartTime: surgery.surgery_start_time,\r\n        surgeryEndTime: surgery.surgery_end_time,\r\n        timelineStart: timelineRange.start,\r\n        timelineEnd: timelineRange.end,\r\n        startPosition: startPosition.toFixed(2) + '%',\r\n        endPosition: endPosition.toFixed(2) + '%',\r\n        width: width.toFixed(2) + '%'\r\n      })\r\n      \r\n      return { \r\n        left: `${startPosition}%`, \r\n        width: `${width}%` \r\n      }\r\n    }\r\n\r\n    // 获取使用时间线样式（时间对齐）\r\n    const getUsageTimelineStyle = (usage, surgery) => {\r\n      if (!usage || !surgery.surgery_start_time || !surgery.surgery_end_time) {\r\n        return { left: '0%', width: '0%' }\r\n      }\r\n      \r\n      // 检查是否有完整的时间段信息\r\n      if (!usage.startTime || !usage.endTime) {\r\n        return { left: '0%', width: '0%' }\r\n      }\r\n      \r\n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件），确保与时间线完全对齐\r\n      const timelineRange = getEventTimelineRange(surgery)\r\n      if (!timelineRange.start || !timelineRange.end) {\r\n        return { left: '0%', width: '0%' }\r\n      }\r\n      \r\n      const startTime = new Date(usage.startTime).getTime()\r\n      const endTime = new Date(usage.endTime).getTime()\r\n      \r\n      // 使用与arm-timeline-bar完全相同的时间计算逻辑\r\n      const startPosition = getTimePosition(startTime, timelineRange.start, timelineRange.end)\r\n      const endPosition = getTimePosition(endTime, timelineRange.start, timelineRange.end)\r\n      \r\n      // 确保进度条宽度不为负数，并且位置在有效范围内\r\n      const width = Math.max(0, endPosition - startPosition)\r\n      const left = Math.max(0, Math.min(100 - width, startPosition))\r\n      \r\n      return { \r\n        left: `${left}%`, \r\n        width: `${width}%` \r\n      }\r\n    }\r\n\r\n    // 获取能量时间\r\n    const getEnergyTime = (armUsage) => {\r\n      if (!armUsage || armUsage.length === 0) return '0分0秒'\r\n      \r\n      // 计算所有完整使用时间段的总时长（不再过滤术前安装的器械）\r\n      const totalSeconds = armUsage\r\n        .filter(usage => usage.startTime && usage.endTime)\r\n        .reduce((total, usage) => {\r\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000)\r\n          return total + duration\r\n        }, 0)\r\n      \r\n      const minutes = Math.floor(totalSeconds / 60)\r\n      const seconds = totalSeconds % 60\r\n      return `${minutes}分${seconds}秒`\r\n    }\r\n\r\n\r\n\r\n    // 获取开机时间：支持多个开机时间\r\n    const getPowerOnTime = (surgery) => {\r\n      if (!surgery) return null\r\n      \r\n      // 如果有开机时间数组，返回第一个（最早的开机时间）\r\n      if (surgery.power_on_times && surgery.power_on_times.length > 0) {\r\n        return surgery.power_on_times[0]\r\n      }\r\n      \r\n      // 兼容旧版本：如果有单个开机时间，直接使用\r\n      if (surgery.power_on_time) {\r\n        return surgery.power_on_time\r\n      }\r\n      \r\n      // 如果没有开机时间，使用手术开始时间\r\n      return surgery.surgery_start_time\r\n    }\r\n\r\n    // 获取关机时间：支持多个关机时间\r\n    const getPowerOffTime = (surgery) => {\r\n      if (!surgery) return null\r\n      \r\n      // 如果有关机时间数组，返回最后一个（最晚的关机时间）\r\n      if (surgery.shutdown_times && surgery.shutdown_times.length > 0) {\r\n        return surgery.shutdown_times[surgery.shutdown_times.length - 1]\r\n      }\r\n      \r\n      // 兼容旧版本：如果有单个关机时间，直接使用\r\n      if (surgery.power_off_time) {\r\n        return surgery.power_off_time\r\n      }\r\n      \r\n      // 如果没有关机时间，返回null（让调用方决定使用什么作为终点）\r\n      return null\r\n    }\r\n\r\n    // 获取所有开机时间\r\n    const getAllPowerOnTimes = (surgery) => {\r\n      if (!surgery) return []\r\n      \r\n      // 如果有开机时间数组，返回所有\r\n      if (surgery.power_on_times && surgery.power_on_times.length > 0) {\r\n        return surgery.power_on_times\r\n      }\r\n      \r\n      // 兼容旧版本：如果有单个开机时间，返回数组\r\n      if (surgery.power_on_time) {\r\n        return [surgery.power_on_time]\r\n      }\r\n      \r\n      return []\r\n    }\r\n\r\n    // 获取所有关机时间\r\n    const getAllPowerOffTimes = (surgery) => {\r\n      if (!surgery) return []\r\n      \r\n      // 如果有关机时间数组，返回所有\r\n      if (surgery.shutdown_times && surgery.shutdown_times.length > 0) {\r\n        return surgery.shutdown_times\r\n      }\r\n      \r\n      // 兼容旧版本：如果有单个关机时间，返回数组\r\n      if (surgery.power_off_time) {\r\n        return [surgery.power_off_time]\r\n      }\r\n      \r\n      return []\r\n    }\r\n\r\n    // 获取按时间排序的所有事件\r\n    const getSortedTimelineEvents = (surgery) => {\r\n      if (!surgery) return []\r\n      \r\n      const events = []\r\n      \r\n      // 添加开机事件 - 支持多个开机时间\r\n      const powerOnTimes = getAllPowerOnTimes(surgery)\r\n      \r\n      // 调试信息：检查连台手术数据\r\n      if (surgery.is_consecutive_surgery) {\r\n        console.log('连台手术调试信息:', {\r\n          surgery_id: surgery.surgery_id,\r\n          is_consecutive_surgery: surgery.is_consecutive_surgery,\r\n          previous_surgery_end_time: surgery.previous_surgery_end_time,\r\n          power_on_times: surgery.power_on_times,\r\n          powerOnTimes: powerOnTimes\r\n        })\r\n      }\r\n      \r\n      powerOnTimes.forEach((time, index) => {\r\n        // 检查是否为连台手术，如果是则显示\"上一场手术结束时间\"\r\n        let label = '开机'\r\n        let displayTime = time\r\n        \r\n        if (surgery.is_consecutive_surgery && index === 0 && surgery.previous_surgery_end_time) {\r\n          // 连台手术：使用上一场手术结束时间而不是开机时间\r\n          label = '上一场手术结束时间'\r\n          displayTime = surgery.previous_surgery_end_time\r\n        } else if (powerOnTimes.length > 1) {\r\n          label = `开机 ${index + 1}`\r\n        }\r\n        \r\n        events.push({\r\n          time: new Date(displayTime),\r\n          type: 'powerOn',\r\n          label: label,\r\n          color: 'green',\r\n          icon: 'PowerOff'\r\n        })\r\n      })\r\n      \r\n      // 添加手术开始事件\r\n      if (surgery.surgery_start_time) {\r\n        events.push({\r\n          time: new Date(surgery.surgery_start_time),\r\n          type: 'surgeryStart',\r\n          label: '手术开始',\r\n          color: 'blue',\r\n          icon: 'VideoPlay'\r\n        })\r\n      }\r\n      \r\n      // 添加手术结束事件\r\n      if (surgery.surgery_end_time) {\r\n        events.push({\r\n          time: new Date(surgery.surgery_end_time),\r\n          type: 'surgeryEnd',\r\n          label: '手术结束',\r\n          color: 'orange',\r\n          icon: 'VideoPause'\r\n        })\r\n      }\r\n      \r\n      // 添加关机事件 - 支持多个关机时间\r\n      const powerOffTimes = getAllPowerOffTimes(surgery)\r\n      powerOffTimes.forEach((time, index) => {\r\n        events.push({\r\n          time: new Date(time),\r\n          type: 'powerOff',\r\n          label: powerOffTimes.length > 1 ? `关机 ${index + 1}` : '关机',\r\n          color: 'red',\r\n          icon: 'PowerOff'\r\n        })\r\n      })\r\n      \r\n      // 按时间排序\r\n      return events.sort((a, b) => a.time.getTime() - b.time.getTime())\r\n    }\r\n\r\n    // 获取手术状态变化数据\r\n    const getStateChanges = (surgery) => {\r\n      if (!surgery) return []\r\n      \r\n      // 优先使用后端提供的状态机变化数据\r\n      let stateMachineChanges = []\r\n      \r\n      if (surgery.state_machine_changes) {\r\n        if (typeof surgery.state_machine_changes === 'string') {\r\n          try {\r\n            stateMachineChanges = JSON.parse(surgery.state_machine_changes)\r\n          } catch (error) {\r\n            console.error('解析state_machine_changes字符串失败:', error)\r\n            stateMachineChanges = []\r\n          }\r\n        } else {\r\n          stateMachineChanges = surgery.state_machine_changes || []\r\n        }\r\n      }\r\n      \r\n      // 调试信息\r\n      console.log('手术状态机变化数据:', surgery.surgery_id, stateMachineChanges)\r\n      \r\n      // 如果没有状态机变化数据，返回空数组\r\n      if (stateMachineChanges.length === 0) {\r\n        console.log('没有状态机变化数据')\r\n        return []\r\n      }\r\n      \r\n      // 将状态机变化数据转换为柱状图数据\r\n      const stateChanges = []\r\n      \r\n      for (let i = 0; i < stateMachineChanges.length; i++) {\r\n        const currentChange = stateMachineChanges[i]\r\n        const nextChange = stateMachineChanges[i + 1]\r\n        \r\n        const currentState = parseInt(currentChange.state)\r\n        const startTime = new Date(currentChange.time)\r\n        const endTime = nextChange ? new Date(nextChange.time) : (surgery.surgery_end_time ? new Date(surgery.surgery_end_time) : new Date())\r\n        const duration = endTime.getTime() - startTime.getTime()\r\n        \r\n        // 调试信息\r\n        console.log(`状态变化 ${i}: currentState=${currentState}, startTime=${startTime}, endTime=${endTime}, duration=${duration}ms`)\r\n        \r\n        // 根据currentState分类 - 新的阶段定义\r\n        let stateCategory = 'none'\r\n        \r\n        // 关机到开机阶段 (currentState <= 0) 不显示柱状图\r\n        if (currentState <= 0) {\r\n          stateCategory = 'none'\r\n        } \r\n        // currentState < 30 都用浅绿色柱状体表示\r\n        else if (currentState > 0 && currentState < 30) {\r\n          stateCategory = 'surgery' // 浅绿色 - 正常阶段\r\n        } \r\n        // currentState = 30 且未变化至 currentState >= 10 时都用红色柱状体表示\r\n        else if (currentState === 30) {\r\n          // 检查下一个状态是否 >= 10，如果不是则标记为错误\r\n          const nextState = nextChange ? parseInt(nextChange.state) : null\r\n          if (nextState === null || nextState < 10) {\r\n            stateCategory = 'error' // 红色 - 故障阶段\r\n          } else {\r\n            stateCategory = 'surgery' // 浅绿色 - 正常阶段\r\n          }\r\n        }\r\n        // currentState > 30 的其他状态不显示柱状图\r\n        else {\r\n          stateCategory = 'none'\r\n        }\r\n        \r\n        console.log(`状态分类: currentState=${currentState}, nextState=${nextChange ? nextChange.state : 'null'} -> stateCategory=${stateCategory}`)\r\n        \r\n        if (stateCategory !== 'none') {\r\n          stateChanges.push({\r\n            state: stateCategory,\r\n            startTime: startTime,\r\n            endTime: endTime,\r\n            duration: duration,\r\n            originalState: currentState,\r\n            stateName: currentChange.stateName || `状态${currentState}`\r\n          })\r\n        }\r\n      }\r\n      \r\n      console.log('生成的柱状图数据:', stateChanges)\r\n      return stateChanges\r\n    }\r\n\r\n    // 获取状态名称\r\n    const getStateName = (state) => {\r\n      const stateMap = {\r\n        'surgery': '正常阶段',\r\n        'error': '故障阶段',\r\n        'idle': '空闲',\r\n        'active': '激活',\r\n        'standby': '待机',\r\n        'offline': '离线'\r\n      }\r\n      return stateMap[state] || state\r\n    }\r\n\r\n    // 计算状态柱状图高度\r\n    const getStateBarHeight = (state) => {\r\n      // 根据状态类型设置不同高度\r\n      const heightMap = {\r\n        'surgery': 60,     // 正常阶段 60% 高度 (浅绿色)\r\n        'error': 100       // 故障阶段 100% 高度 (红色)\r\n      }\r\n      const height = heightMap[state] || 60;\r\n      console.log(`柱状图高度: state=${state}, height=${height}px`);\r\n      return height;\r\n    }\r\n\r\n    // 计算状态柱状图位置\r\n    const getStateBarPosition = (startTime, surgery) => {\r\n      if (!startTime || !surgery) return 0\r\n      \r\n      const timelineRange = getProgressTimelineRange(surgery)\r\n      if (!timelineRange.start || !timelineRange.end) return 0\r\n      \r\n      const position = getTimePosition(startTime, timelineRange.start, timelineRange.end)\r\n      console.log(`柱状图位置计算: startTime=${startTime}, timelineStart=${timelineRange.start}, timelineEnd=${timelineRange.end}, position=${position}%`)\r\n      \r\n      // 确保位置在有效范围内\r\n      const clampedPosition = Math.max(0, Math.min(95, position)) // 留出5%的边距\r\n      return clampedPosition\r\n    }\r\n\r\n\r\n\r\n    // 按UID码分组器械使用\r\n    const getGroupedUsagesByUdi = (armUsage) => {\r\n      const grouped = {}\r\n      armUsage.forEach((usage, index) => {\r\n        // 不过滤术前安装的器械，详情中需要完整显示\r\n        \r\n        // 使用UDI码作为分组键，如果没有UDI则使用器械名称和索引\r\n        const udi = usage.udi || `${usage.instrumentName}_${index}`\r\n        if (!grouped[udi]) {\r\n          grouped[udi] = {\r\n            instrumentName: usage.instrumentName,\r\n            usages: []\r\n          }\r\n        }\r\n        grouped[udi].usages.push(usage)\r\n      })\r\n      return grouped\r\n    }\r\n\r\n\r\n\r\n    // 获取分组器械的总使用时长\r\n    const getGroupedUsageDuration = (groupedUsage) => {\r\n      if (!groupedUsage || groupedUsage.usages.length === 0) return '0分钟'\r\n      \r\n      const totalDuration = groupedUsage.usages\r\n        .filter(usage => usage.startTime && usage.endTime)\r\n        .reduce((total, usage) => {\r\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)\r\n          return total + duration\r\n        }, 0)\r\n      \r\n      return `${totalDuration}分钟`\r\n    }\r\n\r\n         // 根据进度条宽度获取合适的显示文本\r\n     const getSegmentText = (usage, surgery) => {\r\n       try {\r\n         // 计算进度条宽度百分比\r\n         const style = getUsageTimelineStyle(usage, surgery);\r\n         const width = style.width;\r\n         const widthPercent = parseFloat(width);\r\n         \r\n         // 获取器械名称\r\n         const instrumentName = usage.instrumentName || '器械';\r\n         \r\n         // 计算所需的最小宽度（每个字符约1.5%宽度，加上一些边距）\r\n         const minWidthPerChar = 1.5;\r\n         const padding = 2; // 左右边距\r\n         const requiredWidth = Math.min(instrumentName.length * minWidthPerChar + padding, 20); // 最大20%\r\n         \r\n         // 只有当宽度足够显示器械名称时才显示文本\r\n         if (widthPercent >= requiredWidth) {\r\n           // 如果宽度足够显示完整名称，直接显示\r\n           if (widthPercent >= instrumentName.length * minWidthPerChar + padding) {\r\n             return instrumentName;\r\n           } else {\r\n             // 否则截断显示\r\n             const maxChars = Math.floor((widthPercent - padding) / minWidthPerChar);\r\n             return instrumentName.substring(0, maxChars) + '...';\r\n           }\r\n         } else {\r\n           // 宽度不足，不显示任何文本\r\n           return '';\r\n         }\r\n       } catch (error) {\r\n         console.error('计算进度条文本失败:', error);\r\n         return '';\r\n       }\r\n     };\r\n\r\n    // 获取时间段对应的器械名称\r\n    const getSegmentInstrumentName = (segment, armUsage, surgery) => {\r\n      if (!segment || !armUsage || !surgery) return '未知器械'\r\n      \r\n      // 获取进度条时间轴范围\r\n      const timelineRange = getProgressTimelineRange(surgery)\r\n      if (!timelineRange.start || !timelineRange.end) return '未知器械'\r\n      \r\n      // 计算时间段的开始和结束时间\r\n      const startPercent = parseFloat(segment.left)\r\n      const endPercent = startPercent + parseFloat(segment.width)\r\n      \r\n      const startTime = new Date(timelineRange.start).getTime() + (startPercent / 100) * (new Date(timelineRange.end).getTime() - new Date(timelineRange.start).getTime())\r\n      const endTime = new Date(timelineRange.start).getTime() + (endPercent / 100) * (new Date(timelineRange.end).getTime() - new Date(timelineRange.start).getTime())\r\n      \r\n      // 查找在这个时间段内使用的器械\r\n      const instrumentsInSegment = armUsage.filter(usage => {\r\n        if (!usage.startTime || !usage.endTime) return false\r\n        \r\n        const usageStart = new Date(usage.startTime).getTime()\r\n        const usageEnd = new Date(usage.endTime).getTime()\r\n        \r\n        // 检查是否有重叠\r\n        return usageStart < endTime && usageEnd > startTime\r\n      })\r\n      \r\n      if (instrumentsInSegment.length === 0) return '无器械使用'\r\n      \r\n      // 返回第一个找到的器械名称\r\n      return instrumentsInSegment[0].instrumentName || '未知器械'\r\n    }\r\n\r\n    \r\n\r\n\r\n    // 标签页点击处理 - 使用防抖和安全的 nextTick\r\n    const handleTabClick = debounce((tab) => {\r\n      safeNextTick(() => {\r\n        activeTab.value = tab.name\r\n      })\r\n    }, 50)\r\n\r\n    // 标签页切换前的处理 - 使用安全的 nextTick\r\n    const handleBeforeTabLeave = (newTabName, oldTabName) => {\r\n      return safeNextTick().then(() => true)\r\n    }\r\n\r\n    // 状态机图表相关方法\r\n    const resetChartView = () => {\r\n      // 清理所有图表实例\r\n      stateMachineCharts.forEach((chart, surgeryId) => {\r\n        console.log('销毁图表实例:', surgeryId)\r\n        try {\r\n          chart.dispose && chart.dispose()\r\n        } catch (e) {\r\n          console.warn('图表实例释放失败', surgeryId, e)\r\n        }\r\n      })\r\n      stateMachineCharts.clear()\r\n      // 清理响应式对象的所有属性\r\n      Object.keys(surgeryChartStates).forEach(key => {\r\n        delete surgeryChartStates[key]\r\n      })\r\n      surgeryScrollbarStates.clear()\r\n      chartCurrentTime.value = null\r\n    }\r\n\r\n    // 获取状态机图表数据（全时段，ECharts）\r\n    const getStateMachineChartData = (surgery) => {\r\n      if (!surgery) return null\r\n      let changes = []\r\n      if (surgery.state_machine_changes) {\r\n        if (typeof surgery.state_machine_changes === 'string') {\r\n          try {\r\n            changes = JSON.parse(surgery.state_machine_changes)\r\n          } catch (e) {\r\n            console.error('解析state_machine_changes失败', e)\r\n            return null\r\n          }\r\n        } else {\r\n          changes = surgery.state_machine_changes || []\r\n        }\r\n      }\r\n\r\n      // 时间范围：使用时间线事件的最早与最晚时间；若无事件，回退到状态机数据\r\n      const events = getSortedTimelineEvents(surgery)\r\n      let xMin = null\r\n      let xMax = null\r\n      if (events.length > 0) {\r\n        xMin = new Date(events[0].time).getTime()\r\n        xMax = new Date(events[events.length - 1].time).getTime()\r\n      }\r\n\r\n      if (changes.length === 0) {\r\n        if (!xMin || !xMax) return null\r\n        return { points: [], rawData: [], xMin, xMax }\r\n      }\r\n\r\n      // 排序并构建阶梯数据点\r\n      changes.sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime())\r\n      if (!xMin || !xMax) {\r\n        xMin = new Date(changes[0].time).getTime()\r\n        xMax = new Date(changes[changes.length - 1].time).getTime()\r\n      }\r\n\r\n      const positionMap = getStateToYPositionMap()\r\n\r\n      // 仅使用与时间线相同范围内的状态机数据，并在边界补点\r\n      const changesWithin = []\r\n      let lastBefore = null\r\n      for (const ch of changes) {\r\n        const t = new Date(ch.time).getTime()\r\n        if (t <= xMin) {\r\n          lastBefore = ch\r\n        }\r\n        if (t > xMin && t <= xMax) {\r\n          changesWithin.push(ch)\r\n        }\r\n      }\r\n\r\n      const points = []\r\n      // 起点：xMin 使用边界前最后状态（若无，则用第一个变化的状态）\r\n      let startState = lastBefore ? lastBefore.state : (changes.length > 0 ? changes[0].state : '0')\r\n      points.push([xMin, positionMap[parseInt(startState)] ?? parseInt(startState), startState])\r\n\r\n      // 区间内变化\r\n      for (const ch of changesWithin) {\r\n        const t = new Date(ch.time).getTime()\r\n        const y = positionMap[parseInt(ch.state)] ?? parseInt(ch.state)\r\n        points.push([t, y, ch.state])\r\n      }\r\n\r\n      // 终点：xMax 使用区间内最后状态（或起点状态）\r\n      const lastState = changesWithin.length > 0 ? changesWithin[changesWithin.length - 1].state : startState\r\n      points.push([xMax, positionMap[parseInt(lastState)] ?? parseInt(lastState), lastState])\r\n\r\n      return { points, rawData: changesWithin, xMin, xMax }\r\n    }\r\n\r\n    // 获取状态机图表配置\r\n    const getStateMachineChartOptions = (surgery) => {\r\n      const surgeryStartTime = surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : null\r\n      if (!surgeryStartTime) return {}\r\n      \r\n      // 获取当前手术的图表状态\r\n      let surgeryState = surgeryChartStates[surgery.id]\r\n      if (!surgeryState) {\r\n        surgeryState = {\r\n          currentTime: surgeryStartTime,\r\n          viewRange: chartViewRange.value\r\n        }\r\n        surgeryChartStates[surgery.id] = surgeryState\r\n      }\r\n      \r\n      const startTime = new Date(surgeryState.currentTime.getTime() - (surgeryState.viewRange * 30 * 1000))\r\n      const endTime = new Date(surgeryState.currentTime.getTime() + (surgeryState.viewRange * 30 * 1000))\r\n      \r\n      return {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n          mode: 'index',\r\n          intersect: false,\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: false\r\n          },\r\n          tooltip: {\r\n            callbacks: {\r\n              title: function(context) {\r\n                const dataIndex = context[0].dataIndex\r\n                const rawData = context[0].chart.data.rawData\r\n                if (rawData && rawData[dataIndex]) {\r\n                  const time = new Date(rawData[dataIndex].time)\r\n                  // 检查是否跨天，如果是则显示日期\r\n                  const isCrossDay = startTime.getDate() !== endTime.getDate() || \r\n                                   startTime.getMonth() !== endTime.getMonth() || \r\n                                   startTime.getFullYear() !== endTime.getFullYear()\r\n                  \r\n                  if (isCrossDay) {\r\n                    return formatTime(time)\r\n                  } else {\r\n                    return formatTimeShort(time)\r\n                  }\r\n                }\r\n                return context[0].label\r\n              },\r\n              label: function(context) {\r\n                const dataIndex = context.dataIndex\r\n                const rawData = context.chart.data.rawData\r\n                if (rawData && rawData[dataIndex]) {\r\n                  const originalState = parseInt(rawData[dataIndex].state)\r\n                  const stateName = getStateMachineStateName(originalState.toString())\r\n                  return `状态: ${originalState} (${stateName})`\r\n                }\r\n                return `状态: ${context.parsed.y}`\r\n              }\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n                     x: {\r\n             title: {\r\n               display: true,\r\n               text: '时间'\r\n             },\r\n             ticks: {\r\n               maxTicksLimit: 10,\r\n               callback: function(value, index, ticks) {\r\n                 const rawData = this.chart.data.rawData\r\n                 if (rawData && rawData[index]) {\r\n                   const time = new Date(rawData[index].time)\r\n                   // 检查是否跨天\r\n                   const isCrossDay = startTime.getDate() !== endTime.getDate() || \r\n                                    startTime.getMonth() !== endTime.getMonth() || \r\n                                    startTime.getFullYear() !== endTime.getFullYear()\r\n                   \r\n                   if (isCrossDay) {\r\n                     return formatTime(time)\r\n                   } else {\r\n                     return formatTimeShort(time)\r\n                   }\r\n                 }\r\n                 return value\r\n               }\r\n             },\r\n             // 移除afterBuildTicks函数，使用更简单的回调方式\r\n             // afterBuildTicks在Chart.js 4.x中可能有问题，改用callback方式\r\n           },\r\n          y: {\r\n            beginAtZero: true,\r\n            min: 0,\r\n            max: 30, // 调整为映射后的最大值\r\n            title: {\r\n              display: true,\r\n              text: '状态机状态'\r\n            },\r\n            // 简化Y轴配置，避免afterBuildTicks问题\r\n            ticks: {\r\n              stepSize: 1,\r\n              maxTicksLimit: 15\r\n            }\r\n          }\r\n        },\r\n        animation: {\r\n          duration: 300\r\n        }\r\n      }\r\n    }\r\n\r\n    // 更新状态机图表 - 确保所有组件同步\r\n    const updateStateMachineChart = (surgery) => {\r\n      if (!surgery) return\r\n      const container = document.getElementById(`stateMachineChart_${surgery.id}`)\r\n      if (!container) {\r\n        setTimeout(() => updateStateMachineChart(surgery), 50)\r\n        return\r\n      }\r\n\r\n      const data = getStateMachineChartData(surgery)\r\n      // 清理旧实例\r\n      const existing = stateMachineCharts.get(surgery.id)\r\n      if (existing) {\r\n        try { existing.dispose && existing.dispose() } catch (_) {}\r\n        stateMachineCharts.delete(surgery.id)\r\n      }\r\n\r\n      if (!data) {\r\n        container.innerHTML = '<div style=\"display:flex;align-items:center;justify-content:center;height:100%;color:#909399;\">暂无状态机数据</div>'\r\n        return\r\n      }\r\n\r\n      const chart = echarts.init(container)\r\n      stateMachineCharts.set(surgery.id, chart)\r\n\r\n      const positionMap = getStateToYPositionMap()\r\n      const reverseMap = {}\r\n      Object.keys(positionMap).forEach(k => { reverseMap[positionMap[k]] = k })\r\n\r\n      const fiveMinutesMs = 5 * 60 * 1000\r\n      const initialEnd = Math.min(data.xMin + fiveMinutesMs, data.xMax)\r\n\r\n      chart.setOption({\r\n        grid: { left: 60, right: 20, top: 70, bottom: 80, containLabel: true },\r\n        toolbox: {\r\n          right: 10,\r\n          top: 10,\r\n          feature: {\r\n            dataZoom: { yAxisIndex: 'none' },\r\n            restore: {},\r\n            saveAsImage: {}\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: { type: 'line' },\r\n          formatter: (params) => {\r\n            if (!params || !params[0]) return ''\r\n            const p = params[0]\r\n            const t = new Date(p.value[0])\r\n            const yMapped = p.value[1]\r\n            const originalState = p.value[2] ?? reverseMap[yMapped] ?? yMapped\r\n            const stateName = getStateMachineStateName(String(originalState))\r\n            return `${formatTime(t)}<br/>状态: ${originalState}（${stateName}）`\r\n          }\r\n        },\r\n        dataZoom: [\r\n          {\r\n            type: 'inside',\r\n            xAxisIndex: 0,\r\n            filterMode: 'none',\r\n            zoomOnMouseWheel: true,\r\n            moveOnMouseWheel: true,\r\n            moveOnMouseMove: true,\r\n            startValue: data.xMin,\r\n            endValue: initialEnd\r\n          },\r\n          {\r\n            type: 'slider',\r\n            xAxisIndex: 0,\r\n            filterMode: 'none',\r\n            height: 40,\r\n            bottom: 20,\r\n            showDataShadow: true,\r\n            brushSelect: true,\r\n            startValue: data.xMin,\r\n            endValue: initialEnd\r\n          }\r\n        ],\r\n        xAxis: {\r\n          type: 'time',\r\n          min: data.xMin,\r\n          max: data.xMax,\r\n          axisLabel: { formatter: (value) => formatTime(value) }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          min: 0,\r\n          max: 65,\r\n          axisLabel: {\r\n            formatter: (val) => {\r\n              const original = reverseMap[val]\r\n              return original ? String(original) : ''\r\n            }\r\n          },\r\n          axisTick: { show: false },\r\n          splitNumber: 8\r\n        },\r\n        series: [{\r\n          type: 'line',\r\n          step: 'end',\r\n          showSymbol: false,\r\n          lineStyle: { width: 2, color: '#409EFF' },\r\n          areaStyle: {\r\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              { offset: 0, color: 'rgba(64,158,255,0.25)' },\r\n              { offset: 1, color: 'rgba(64,158,255,0.05)' }\r\n            ])\r\n          },\r\n          data: data.points\r\n        }]\r\n      })\r\n    }\r\n\r\n    // 获取状态机状态名称\r\n    const getStateMachineStateName = (state) => {\r\n      const stateMap = {\r\n        \"0\": \"初始化（S00）\",\r\n        \"1\": \"使能（S01）\",\r\n        \"2\": \"自检（S02）\",\r\n        \"10\": \"待机（S10）\",\r\n        \"12\": \"从手调整（S12）\",\r\n        \"13\": \"主手跟随（S13）\",\r\n        \"14\": \"断开主从/离合（S14）\",\r\n        \"15\": \"初始化（S00）\",\r\n        \"20\": \"主从控制（S20）\",\r\n        \"21\": \"内窥镜控制（S21）\",\r\n        \"30\": \"错误（S30）\",\r\n        \"31\": \"关机（S31）\"\r\n      }\r\n      return stateMap[state] || `状态${state}`\r\n    }\r\n\r\n    // 网络图表相关功能\r\n    const networkCharts = new Map() // 为每个手术存储网络图表实例\r\n\r\n    // 更新网络延时图表\r\n    const updateNetworkChart = (surgery) => {\r\n      if (!surgery || !surgery.is_remote_surgery || !surgery.network_stats) return\r\n      \r\n      const container = document.getElementById(`networkChart_${surgery.id}`)\r\n      if (!container) {\r\n        setTimeout(() => updateNetworkChart(surgery), 50)\r\n        return\r\n      }\r\n\r\n      // 清理旧实例\r\n      const existing = networkCharts.get(surgery.id)\r\n      if (existing) {\r\n        try { existing.dispose && existing.dispose() } catch (_) {}\r\n        networkCharts.delete(surgery.id)\r\n      }\r\n\r\n      const chart = echarts.init(container)\r\n      networkCharts.set(surgery.id, chart)\r\n\r\n      // 获取手术开始和结束时间\r\n      const surgeryStartTime = new Date(surgery.surgery_start_time).getTime()\r\n      const surgeryEndTime = new Date(surgery.surgery_end_time).getTime()\r\n\r\n      // 准备数据 - 只包含手术时间段内的数据\r\n      const data = surgery.network_stats.data\r\n        .filter(item => {\r\n          const timestamp = new Date(item.timestamp).getTime()\r\n          return timestamp >= surgeryStartTime && timestamp <= surgeryEndTime\r\n        })\r\n        .map(item => [\r\n          new Date(item.timestamp).getTime(),\r\n          item.latency\r\n        ])\r\n\r\n      // 按时间排序\r\n      data.sort((a, b) => a[0] - b[0])\r\n\r\n      chart.setOption({\r\n        grid: { left: 60, right: 20, top: 70, bottom: 80, containLabel: true },\r\n        toolbox: {\r\n          right: 10,\r\n          top: 10,\r\n          feature: {\r\n            dataZoom: { yAxisIndex: 'none' },\r\n            restore: {},\r\n            saveAsImage: {}\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: { type: 'line' },\r\n          formatter: (params) => {\r\n            if (!params || !params[0]) return ''\r\n            const p = params[0]\r\n            const time = new Date(p.value[0])\r\n            const latency = p.value[1]\r\n            return `${formatTime(time)}<br/>网络延时: ${latency}ms`\r\n          }\r\n        },\r\n        dataZoom: [\r\n          {\r\n            type: 'inside',\r\n            xAxisIndex: 0,\r\n            filterMode: 'none',\r\n            zoomOnMouseWheel: true,\r\n            moveOnMouseWheel: true,\r\n            moveOnMouseMove: true\r\n          },\r\n          {\r\n            type: 'slider',\r\n            xAxisIndex: 0,\r\n            filterMode: 'none',\r\n            height: 40,\r\n            bottom: 20,\r\n            showDataShadow: true,\r\n            brushSelect: true\r\n          }\r\n        ],\r\n        xAxis: {\r\n          type: 'time',\r\n          min: surgeryStartTime,\r\n          max: surgeryEndTime,\r\n          axisLabel: { \r\n            formatter: (value) => formatTime(value)\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '延时 (ms)',\r\n          axisLabel: { formatter: '{value}ms' },\r\n          scale: true\r\n        },\r\n        series: [{\r\n          type: 'line',\r\n          name: '网络延时',\r\n          showSymbol: false,\r\n          lineStyle: { width: 2, color: '#409EFF' },\r\n          itemStyle: { color: '#409EFF' },\r\n          areaStyle: {\r\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              { offset: 0, color: 'rgba(64,158,255,0.25)' },\r\n              { offset: 1, color: 'rgba(64,158,255,0.05)' }\r\n            ])\r\n          },\r\n          data: data\r\n        }]\r\n      })\r\n    }\r\n\r\n    // 图表滚动功能已移除，现在只使用滚动条控制\r\n    \r\n    // 使用智能间隔模式\r\n\r\n    // 滚动条相关功能\r\n    const surgeryScrollbarStates = new Map() // 为每个手术存储滚动条状态\r\n    const surgeryChartStates = reactive({}) // 为每个手术存储图表状态（响应式）\r\n    const scrollbarUpdateTrigger = ref(0) // 用于触发滚动条重新渲染\r\n\r\n    // 获取滚动条滑块样式 - 重新设计：滚动条范围从手术开始到手术结束\r\n    const getScrollbarThumbStyle = (surgery, updateTrigger) => {\r\n      if (!surgery || !surgery.state_machine_changes) return {}\r\n      \r\n      // 重新设计：滚动条的总范围就是手术开始到手术结束\r\n      const totalStartTime = new Date(surgery.surgery_start_time)\r\n      const totalEndTime = new Date(surgery.surgery_end_time)\r\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n      \r\n      if (totalDuration <= 0) return {}\r\n      \r\n      // 获取图表数据 - 使用与图表完全相同的时间计算逻辑\r\n      const chartData = getStateMachineChartData(surgery)\r\n      let viewStartTime, viewEndTime\r\n      \r\n      if (chartData && chartData.startTime && chartData.endTime) {\r\n        // 使用图表实际的时间范围，确保完全同步\r\n        viewStartTime = new Date(chartData.startTime)\r\n        viewEndTime = new Date(chartData.endTime)\r\n      } else {\r\n        // 如果没有图表数据，使用与图表相同的计算逻辑\r\n        let surgeryState = surgeryChartStates[surgery.id]\r\n        if (!surgeryState) {\r\n          surgeryState = {\r\n            currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n            viewRange: chartViewRange.value\r\n          }\r\n          surgeryChartStates[surgery.id] = surgeryState\r\n        }\r\n        \r\n        // 使用与图表完全相同的视图窗口计算\r\n        const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n        let viewCenterTime = surgeryState.currentTime\r\n        \r\n        // 重新设计：确保视图中心时间在手术时间范围内\r\n          const minCenterTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\r\n          const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\r\n          \r\n        // 如果总时间范围小于视图窗口，允许在整个范围内移动\r\n        if (totalDuration <= viewWindowDuration) {\r\n          // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\r\n          const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), viewCenterTime.getTime())))\r\n          viewCenterTime = clampedTime\r\n        } else {\r\n          // 正常的时间范围限制\r\n          if (viewCenterTime.getTime() < minCenterTime.getTime()) {\r\n            viewCenterTime = minCenterTime\r\n          } else if (viewCenterTime.getTime() > maxCenterTime.getTime()) {\r\n            viewCenterTime = maxCenterTime\r\n          }\r\n        }\r\n        \r\n        // 计算视图的开始和结束时间\r\n        viewStartTime = new Date(viewCenterTime.getTime() - viewWindowDuration / 2)\r\n        viewEndTime = new Date(viewCenterTime.getTime() + viewWindowDuration / 2)\r\n        \r\n        // 确保视图范围不超出手术总时间范围\r\n        if (viewStartTime.getTime() < totalStartTime.getTime()) {\r\n          viewStartTime = totalStartTime\r\n          viewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\r\n        }\r\n        \r\n        if (viewEndTime.getTime() > totalEndTime.getTime()) {\r\n          viewEndTime = totalEndTime\r\n          viewStartTime = new Date(totalEndTime.getTime() - viewWindowDuration)\r\n          \r\n          // 确保调整后的开始时间不早于手术开始时间\r\n          if (viewStartTime.getTime() < totalStartTime.getTime()) {\r\n            viewStartTime = totalStartTime\r\n            viewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\r\n          }\r\n        }\r\n      }\r\n      \r\n      const viewDuration = viewEndTime.getTime() - viewStartTime.getTime()\r\n      \r\n      // 计算滑块位置和宽度 - 基于手术开始到手术结束的总范围\r\n      const thumbPosition = ((viewStartTime.getTime() - totalStartTime.getTime()) / totalDuration) * 100\r\n      const thumbWidth = (viewDuration / totalDuration) * 100\r\n      \r\n      // 确保滑块位置和宽度在有效范围内\r\n      const clampedPosition = Math.max(0, Math.min(100 - thumbWidth, thumbPosition))\r\n      const clampedWidth = Math.max(5, Math.min(100, thumbWidth))\r\n      \r\n      console.log('滚动条计算 (重新设计):', {\r\n        surgeryId: surgery.surgery_id,\r\n        totalStartTime: totalStartTime.toISOString(),\r\n        totalEndTime: totalEndTime.toISOString(),\r\n        totalDuration: totalDuration / (1000 * 60),\r\n        viewStartTime: viewStartTime.toISOString(),\r\n        viewEndTime: viewEndTime.toISOString(),\r\n        viewDuration: viewDuration / (1000 * 60),\r\n        thumbPosition: thumbPosition.toFixed(2),\r\n        thumbWidth: thumbWidth.toFixed(2),\r\n        clampedPosition: clampedPosition.toFixed(2),\r\n        clampedWidth: clampedWidth.toFixed(2),\r\n        isAtEnd: viewEndTime.getTime() === totalEndTime.getTime(),\r\n        isAtStart: viewStartTime.getTime() === totalStartTime.getTime()\r\n      })\r\n      \r\n      return {\r\n        left: `${clampedPosition}%`,\r\n        width: `${clampedWidth}%`\r\n      }\r\n    }\r\n\r\n         // 处理滚动条轨道点击 - 重新设计：基于手术开始到手术结束的范围\r\n     const handleTrackClick = (event, surgery) => {\r\n       if (!surgery) return\r\n       \r\n       const track = event.currentTarget\r\n       const rect = track.getBoundingClientRect()\r\n       const clickX = event.clientX - rect.left\r\n       const trackWidth = rect.width\r\n       \r\n       // 计算点击位置占总宽度的百分比\r\n       const clickPercentage = clickX / trackWidth\r\n       \r\n       // 重新设计：计算总时间范围从手术开始到手术结束\r\n       const totalStartTime = new Date(surgery.surgery_start_time)\r\n       const totalEndTime = new Date(surgery.surgery_end_time)\r\n       const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n       \r\n       // 计算目标时间（考虑5分钟窗口的中心）\r\n       const targetTime = new Date(totalStartTime.getTime() + (clickPercentage * totalDuration))\r\n       \r\n       // 使用与图表完全相同的视图窗口计算\r\n       const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n       const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\r\n       const maxTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\r\n       \r\n       // 更新当前手术的图表状态\r\n       let surgeryState = surgeryChartStates[surgery.id]\r\n       if (!surgeryState) {\r\n         surgeryState = {\r\n           currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n           viewRange: chartViewRange.value\r\n         }\r\n         surgeryChartStates[surgery.id] = surgeryState\r\n       }\r\n       \r\n       // 重新设计：如果总时间范围小于视图窗口，允许在整个范围内移动\r\n       if (totalDuration <= viewWindowDuration) {\r\n         // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\r\n         const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), targetTime.getTime())))\r\n         surgeryState.currentTime = clampedTime\r\n       } else {\r\n         // 正常的时间范围限制\r\n         if (targetTime.getTime() < minTime.getTime()) {\r\n           surgeryState.currentTime = minTime\r\n         } else if (targetTime.getTime() > maxTime.getTime()) {\r\n           surgeryState.currentTime = maxTime\r\n         } else {\r\n           surgeryState.currentTime = targetTime\r\n         }\r\n       }\r\n       \r\n       console.log('滚动条点击 (重新设计):', {\r\n         surgeryId: surgery.surgery_id,\r\n         clickPercentage: clickPercentage.toFixed(2),\r\n         targetTime: targetTime.toISOString(),\r\n         newCurrentTime: surgeryState.currentTime.toISOString(),\r\n         totalStartTime: totalStartTime.toISOString(),\r\n         totalEndTime: totalEndTime.toISOString(),\r\n         totalDuration: totalDuration / (1000 * 60)\r\n       })\r\n       \r\n       // 触发滚动条重新渲染\r\n       scrollbarUpdateTrigger.value++\r\n       updateStateMachineChart(surgery)\r\n     }\r\n\r\n     // 开始滚动条拖拽\r\n     const startScrollbarDrag = (event, surgery) => {\r\n       if (!surgery) return\r\n       \r\n       event.preventDefault()\r\n       event.stopPropagation() // 防止触发轨道点击事件\r\n       \r\n       // 获取或创建当前手术的滚动条状态\r\n       let scrollbarState = surgeryScrollbarStates.get(surgery.id)\r\n       if (!scrollbarState) {\r\n         scrollbarState = {\r\n           isDragging: false,\r\n           dragStartX: 0,\r\n           dragStartTime: null\r\n         }\r\n         surgeryScrollbarStates.set(surgery.id, scrollbarState)\r\n       }\r\n       \r\n       scrollbarState.isDragging = true\r\n       scrollbarState.dragStartX = event.clientX\r\n       \r\n       // 获取当前手术的图表状态\r\n       let surgeryState = surgeryChartStates[surgery.id]\r\n       if (!surgeryState) {\r\n         surgeryState = {\r\n           currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n           viewRange: chartViewRange.value\r\n         }\r\n         surgeryChartStates[surgery.id] = surgeryState\r\n       }\r\n       scrollbarState.dragStartTime = surgeryState.currentTime ? new Date(surgeryState.currentTime) : null\r\n       \r\n       // 添加全局事件监听\r\n       document.addEventListener('mousemove', (e) => handleScrollbarDrag(e, surgery))\r\n       document.addEventListener('mouseup', () => stopScrollbarDrag(surgery))\r\n     }\r\n\r\n     // 处理滚动条拖拽 - 重新设计：基于手术开始到手术结束的范围\r\n     const handleScrollbarDrag = (event, surgery) => {\r\n       // 获取当前手术的滚动条状态\r\n       let scrollbarState = surgeryScrollbarStates.get(surgery.id)\r\n       if (!scrollbarState || !scrollbarState.isDragging || !scrollbarState.dragStartTime) return\r\n       \r\n       const deltaX = event.clientX - scrollbarState.dragStartX\r\n       \r\n       // 查找当前手术的滚动条轨道\r\n       // 通过手术ID查找对应的滚动条容器\r\n       const scrollbarContainer = document.querySelector(`[data-surgery-id=\"${surgery.id}\"] .chart-scrollbar-container`)\r\n       const scrollbarTrack = scrollbarContainer?.querySelector('.scrollbar-track')\r\n       if (!scrollbarTrack) {\r\n         console.warn('找不到滚动条轨道:', surgery.id)\r\n         return\r\n       }\r\n       \r\n       const trackWidth = scrollbarTrack.offsetWidth\r\n       // 重新设计：计算总时间范围从手术开始到手术结束\r\n       const totalStartTime = new Date(surgery.surgery_start_time)\r\n       const totalEndTime = new Date(surgery.surgery_end_time)\r\n       const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n       \r\n       // 计算拖拽对应的总时间变化\r\n       const dragTimeChange = (deltaX / trackWidth) * totalDuration\r\n       \r\n       // 计算新的中心时间\r\n       const newCenterTime = new Date(scrollbarState.dragStartTime.getTime() + dragTimeChange)\r\n       \r\n       // 使用与图表完全相同的视图窗口计算\r\n       const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n       const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\r\n       const maxTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\r\n       \r\n       // 更新当前手术的图表状态\r\n       let surgeryState = surgeryChartStates[surgery.id]\r\n       if (!surgeryState) {\r\n         surgeryState = {\r\n           currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n           viewRange: chartViewRange.value\r\n         }\r\n         surgeryChartStates[surgery.id] = surgeryState\r\n       }\r\n       \r\n       // 重新设计：如果总时间范围小于视图窗口，允许在整个范围内移动\r\n       if (totalDuration <= viewWindowDuration) {\r\n         // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\r\n         const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), newCenterTime.getTime())))\r\n         surgeryState.currentTime = clampedTime\r\n       } else {\r\n         // 正常的时间范围限制\r\n         if (newCenterTime.getTime() < minTime.getTime()) {\r\n           surgeryState.currentTime = minTime\r\n         } else if (newCenterTime.getTime() > maxTime.getTime()) {\r\n           surgeryState.currentTime = maxTime\r\n         } else {\r\n           surgeryState.currentTime = newCenterTime\r\n         }\r\n       }\r\n       \r\n       console.log('滚动条拖拽 (重新设计):', {\r\n         surgeryId: surgery.surgery_id,\r\n         deltaX: deltaX.toFixed(2),\r\n         dragTimeChange: dragTimeChange / (1000 * 60),\r\n         newCenterTime: newCenterTime.toISOString(),\r\n         newCurrentTime: surgeryState.currentTime.toISOString(),\r\n         totalStartTime: totalStartTime.toISOString(),\r\n         totalEndTime: totalEndTime.toISOString(),\r\n         totalDuration: totalDuration / (1000 * 60)\r\n       })\r\n       \r\n       // 触发滚动条重新渲染\r\n       scrollbarUpdateTrigger.value++\r\n       updateStateMachineChart(surgery)\r\n     }\r\n\r\n    // 停止滚动条拖拽\r\n    const stopScrollbarDrag = (surgery) => {\r\n      if (!surgery) return\r\n      \r\n      // 获取当前手术的滚动条状态\r\n      let scrollbarState = surgeryScrollbarStates.get(surgery.id)\r\n      if (scrollbarState) {\r\n        scrollbarState.isDragging = false\r\n        scrollbarState.dragStartX = 0\r\n        scrollbarState.dragStartTime = null\r\n      }\r\n      \r\n      // 移除全局事件监听\r\n      document.removeEventListener('mousemove', (e) => handleScrollbarDrag(e, surgery))\r\n      document.removeEventListener('mouseup', () => stopScrollbarDrag(surgery))\r\n    }\r\n\r\n    // 向左滚动图表 - 重新设计：基于手术开始到手术结束的范围\r\n    const scrollChartLeft = (surgery) => {\r\n      if (!surgery) return\r\n      \r\n      let surgeryState = surgeryChartStates[surgery.id]\r\n      if (!surgeryState) {\r\n        surgeryState = {\r\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n          viewRange: chartViewRange.value\r\n        }\r\n        surgeryChartStates[surgery.id] = surgeryState\r\n      }\r\n      \r\n      const scrollStep = 60 * 1000 // 1分钟\r\n      const newCurrentTime = new Date(surgeryState.currentTime.getTime() - scrollStep)\r\n      \r\n      // 重新设计：使用与图表完全相同的边界检查逻辑\r\n      const totalStartTime = new Date(surgery.surgery_start_time)\r\n      const totalEndTime = new Date(surgery.surgery_end_time)\r\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n      \r\n      // 重新设计：如果总时间范围小于等于视图窗口，允许在整个范围内移动\r\n      if (totalDuration <= viewWindowDuration) {\r\n        const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), newCurrentTime.getTime())))\r\n        surgeryState.currentTime = clampedTime\r\n      } else {\r\n        // 正常的时间范围限制\r\n        const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\r\n        \r\n        // 确保不超出左边界\r\n        if (newCurrentTime.getTime() >= minTime.getTime()) {\r\n          surgeryState.currentTime = newCurrentTime\r\n        } else {\r\n          surgeryState.currentTime = minTime\r\n        }\r\n      }\r\n      \r\n      console.log('向左滚动 (重新设计):', {\r\n        surgeryId: surgery.surgery_id,\r\n        oldTime: surgeryState.currentTime.toISOString(),\r\n        newTime: newCurrentTime.toISOString(),\r\n        totalStartTime: totalStartTime.toISOString(),\r\n        totalEndTime: totalEndTime.toISOString(),\r\n        totalDuration: totalDuration / (1000 * 60)\r\n      })\r\n      \r\n      // 触发滚动条重新渲染\r\n      scrollbarUpdateTrigger.value++\r\n      updateStateMachineChart(surgery)\r\n    }\r\n\r\n    // 向右滚动图表 - 重新设计：基于手术开始到手术结束的范围\r\n    const scrollChartRight = (surgery) => {\r\n      if (!surgery) return\r\n      \r\n      let surgeryState = surgeryChartStates[surgery.id]\r\n      if (!surgeryState) {\r\n        surgeryState = {\r\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n          viewRange: chartViewRange.value\r\n        }\r\n        surgeryChartStates[surgery.id] = surgeryState\r\n      }\r\n      \r\n      const scrollStep = 60 * 1000 // 1分钟\r\n      const newCurrentTime = new Date(surgeryState.currentTime.getTime() + scrollStep)\r\n      \r\n      // 重新设计：使用与图表完全相同的边界检查逻辑\r\n      const totalStartTime = new Date(surgery.surgery_start_time)\r\n      const totalEndTime = new Date(surgery.surgery_end_time)\r\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n      \r\n      // 重新设计：如果总时间范围小于等于视图窗口，允许在整个范围内移动\r\n      if (totalDuration <= viewWindowDuration) {\r\n        const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), newCurrentTime.getTime())))\r\n        surgeryState.currentTime = clampedTime\r\n        \r\n        console.log('向右滚动 (短手术 - 重新设计):', {\r\n          surgeryId: surgery.surgery_id,\r\n          oldTime: surgeryState.currentTime.toISOString(),\r\n          newTime: newCurrentTime.toISOString(),\r\n          clampedTime: clampedTime.toISOString(),\r\n          totalStartTime: totalStartTime.toISOString(),\r\n          totalEndTime: totalEndTime.toISOString(),\r\n          totalDuration: totalDuration / (1000 * 60)\r\n        })\r\n      } else {\r\n        // 正常的时间范围限制\r\n        const maxTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\r\n        \r\n        // 确保不超出右边界\r\n        if (newCurrentTime.getTime() <= maxTime.getTime()) {\r\n          surgeryState.currentTime = newCurrentTime\r\n        } else {\r\n          surgeryState.currentTime = maxTime\r\n        }\r\n        \r\n        console.log('向右滚动 (长手术 - 重新设计):', {\r\n          surgeryId: surgery.surgery_id,\r\n          oldTime: surgeryState.currentTime.toISOString(),\r\n          newTime: newCurrentTime.toISOString(),\r\n          maxTime: maxTime.toISOString(),\r\n          totalStartTime: totalStartTime.toISOString(),\r\n          totalEndTime: totalEndTime.toISOString(),\r\n          totalDuration: totalDuration / (1000 * 60)\r\n        })\r\n      }\r\n      \r\n      // 触发滚动条重新渲染\r\n      scrollbarUpdateTrigger.value++\r\n      updateStateMachineChart(surgery)\r\n    }\r\n\r\n    // 检查是否可以向左滚动 - 重新设计：基于手术开始到手术结束的范围\r\n    const canScrollLeft = (surgery) => {\r\n      if (!surgery) return false\r\n      \r\n      let surgeryState = surgeryChartStates[surgery.id]\r\n      if (!surgeryState) {\r\n        surgeryState = {\r\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n          viewRange: chartViewRange.value\r\n        }\r\n        surgeryChartStates[surgery.id] = surgeryState\r\n      }\r\n      \r\n      // 重新设计：使用与图表完全相同的边界检查逻辑\r\n      const totalStartTime = new Date(surgery.surgery_start_time)\r\n      const totalEndTime = new Date(surgery.surgery_end_time)\r\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n      \r\n      // 重新设计：如果总时间范围小于等于视图窗口，无法滚动\r\n      if (totalDuration <= viewWindowDuration) {\r\n        return false\r\n      }\r\n      \r\n      const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\r\n      \r\n      return surgeryState.currentTime.getTime() > minTime.getTime()\r\n    }\r\n\r\n    // 检查是否可以向右滚动 - 重新设计：基于手术开始到手术结束的范围\r\n    const canScrollRight = (surgery) => {\r\n      if (!surgery) return false\r\n      \r\n      let surgeryState = surgeryChartStates[surgery.id]\r\n      if (!surgeryState) {\r\n        surgeryState = {\r\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n          viewRange: chartViewRange.value\r\n        }\r\n        surgeryChartStates[surgery.id] = surgeryState\r\n      }\r\n      \r\n      // 重新设计：使用与图表完全相同的边界检查逻辑\r\n      const totalStartTime = new Date(surgery.surgery_start_time)\r\n      const totalEndTime = new Date(surgery.surgery_end_time)\r\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n      \r\n      // 重新设计：如果总时间范围小于等于视图窗口，无法滚动\r\n      if (totalDuration <= viewWindowDuration) {\r\n        return false // 无法滚动，因为已经显示全部\r\n      }\r\n      \r\n      // 计算最大中心时间：当视图中心时间到达这个时间时，视图的结束时间正好是手术结束时间\r\n      const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\r\n      \r\n      console.log('向右滚动检查 (重新设计):', {\r\n        surgeryId: surgery.surgery_id,\r\n        currentTime: surgeryState.currentTime.toISOString(),\r\n        maxCenterTime: maxCenterTime.toISOString(),\r\n        totalStartTime: totalStartTime.toISOString(),\r\n        totalEndTime: totalEndTime.toISOString(),\r\n        totalDuration: totalDuration / (1000 * 60),\r\n        viewWindowDuration: (viewWindowDuration / (1000 * 60)).toFixed(1) + '分钟',\r\n        canScroll: surgeryState.currentTime.getTime() < maxCenterTime.getTime()\r\n      })\r\n      \r\n      return surgeryState.currentTime.getTime() < maxCenterTime.getTime()\r\n    }\r\n\r\n    // 检查所有组件的同步状态\r\n    const checkSynchronization = (surgery) => {\r\n      if (!surgery) return\r\n      \r\n      const chartData = getStateMachineChartData(surgery)\r\n      const scrollbarStyle = getScrollbarThumbStyle(surgery, scrollbarUpdateTrigger.value)\r\n      const scrollbarInfo = getScrollbarInfo(surgery, scrollbarUpdateTrigger.value)\r\n      \r\n      // 重新设计：计算总时间范围和视图窗口\r\n      const totalStartTime = new Date(surgery.surgery_start_time)\r\n      const totalEndTime = new Date(surgery.surgery_end_time)\r\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n      \r\n      // 计算边界时间用于调试\r\n      const minCenterTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\r\n      const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\r\n      \r\n      console.log('同步状态检查 (重新设计):', {\r\n        surgeryId: surgery.surgery_id,\r\n        totalStartTime: totalStartTime.toISOString(),\r\n        totalEndTime: totalEndTime.toISOString(),\r\n        totalDuration: (totalDuration / (1000 * 60)).toFixed(1) + '分钟',\r\n        viewWindowDuration: (viewWindowDuration / (1000 * 60)).toFixed(1) + '分钟',\r\n        isShortSurgery: totalDuration <= viewWindowDuration,\r\n        minCenterTime: minCenterTime.toISOString(),\r\n        maxCenterTime: maxCenterTime.toISOString(),\r\n        chartDataExists: !!chartData,\r\n        chartLabels: chartData?.labels?.length || 0,\r\n        chartDataPoints: chartData?.data?.length || 0,\r\n        chartStartTime: chartData?.startTime?.toISOString() || 'N/A',\r\n        chartEndTime: chartData?.endTime?.toISOString() || 'N/A',\r\n        scrollbarLeft: scrollbarStyle.left,\r\n        scrollbarWidth: scrollbarStyle.width,\r\n        scrollbarInfo: scrollbarInfo,\r\n        canScrollLeft: canScrollLeft(surgery),\r\n        canScrollRight: canScrollRight(surgery),\r\n        // 添加调试信息\r\n        surgeryStartTime: surgery.surgery_start_time,\r\n        surgeryEndTime: surgery.surgery_end_time,\r\n        timelineRange: getTimelineRange(surgery),\r\n        powerOnTime: getPowerOnTime(surgery),\r\n        powerOffTime: getPowerOffTime(surgery)\r\n      })\r\n    }\r\n\r\n    // 获取滚动条信息 - 重新设计：基于手术开始到手术结束的范围\r\n    const getScrollbarInfo = (surgery, updateTrigger) => {\r\n      if (!surgery) return ''\r\n      \r\n      // 获取图表实际的时间范围\r\n      const chartData = getStateMachineChartData(surgery)\r\n      if (!chartData || !chartData.startTime || !chartData.endTime) {\r\n        // 如果没有图表数据，使用与图表相同的计算逻辑\r\n        let surgeryState = surgeryChartStates[surgery.id]\r\n        if (!surgeryState) {\r\n          surgeryState = {\r\n            currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\r\n            viewRange: chartViewRange.value\r\n          }\r\n          surgeryChartStates[surgery.id] = surgeryState\r\n        }\r\n        \r\n        // 重新设计：使用与图表完全相同的视图窗口计算\r\n        const totalStartTime = new Date(surgery.surgery_start_time)\r\n        const totalEndTime = new Date(surgery.surgery_end_time)\r\n        const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\r\n        const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\r\n        let viewCenterTime = surgeryState.currentTime\r\n        \r\n        // 重新设计：确保视图中心时间在手术时间范围内\r\n          const minCenterTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\r\n          const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\r\n          \r\n        // 如果总时间范围小于视图窗口，允许在整个范围内移动\r\n        if (totalDuration <= viewWindowDuration) {\r\n          // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\r\n          const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), viewCenterTime.getTime())))\r\n          viewCenterTime = clampedTime\r\n        } else {\r\n          // 正常的时间范围限制\r\n          if (viewCenterTime.getTime() < minCenterTime.getTime()) {\r\n            viewCenterTime = minCenterTime\r\n          } else if (viewCenterTime.getTime() > maxCenterTime.getTime()) {\r\n            viewCenterTime = maxCenterTime\r\n          }\r\n        }\r\n        \r\n        // 计算视图的开始和结束时间\r\n        const viewStartTime = new Date(viewCenterTime.getTime() - viewWindowDuration / 2)\r\n        const viewEndTime = new Date(viewCenterTime.getTime() + viewWindowDuration / 2)\r\n        \r\n        // 确保视图范围不超出手术总时间范围\r\n        let finalViewStartTime = viewStartTime\r\n        let finalViewEndTime = viewEndTime\r\n        \r\n        if (finalViewStartTime.getTime() < totalStartTime.getTime()) {\r\n          finalViewStartTime = totalStartTime\r\n          finalViewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\r\n        }\r\n        \r\n        if (finalViewEndTime.getTime() > totalEndTime.getTime()) {\r\n          finalViewEndTime = totalEndTime\r\n          finalViewStartTime = new Date(totalEndTime.getTime() - viewWindowDuration)\r\n          \r\n          // 确保调整后的开始时间不早于手术开始时间\r\n          if (finalViewStartTime.getTime() < totalStartTime.getTime()) {\r\n            finalViewStartTime = totalStartTime\r\n            finalViewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\r\n          }\r\n        }\r\n        \r\n        const startTimeStr = formatTimeShort(finalViewStartTime)\r\n        const endTimeStr = formatTimeShort(finalViewEndTime)\r\n        \r\n        const durationMinutes = (finalViewEndTime.getTime() - finalViewStartTime.getTime()) / (1000 * 60)\r\n        \r\n        return `${startTimeStr} - ${endTimeStr} (${durationMinutes.toFixed(1)}分钟)`\r\n      }\r\n      \r\n      // 使用图表实际的时间范围\r\n      const actualStartTime = new Date(chartData.startTime)\r\n      const actualEndTime = new Date(chartData.endTime)\r\n      \r\n      const startTimeStr = formatTimeShort(actualStartTime)\r\n      const endTimeStr = formatTimeShort(actualEndTime)\r\n      \r\n      // 计算实际的时间范围（分钟）\r\n      const actualDurationMinutes = (actualEndTime.getTime() - actualStartTime.getTime()) / (1000 * 60)\r\n      \r\n      console.log('滚动条时间范围 (重新设计):', surgery.surgery_id, {\r\n        startTime: actualStartTime.toISOString(),\r\n        endTime: actualEndTime.toISOString(),\r\n        duration: actualDurationMinutes.toFixed(1) + '分钟',\r\n        totalStartTime: new Date(surgery.surgery_start_time).toISOString(),\r\n        totalEndTime: new Date(surgery.surgery_end_time).toISOString()\r\n      })\r\n      \r\n      return `${startTimeStr} - ${endTimeStr} (${actualDurationMinutes.toFixed(1)}分钟)`\r\n    }\r\n\r\n\r\n\r\n    // 监听手术数据变化，自动更新图表\r\n    watch(surgeries, (newSurgeries) => {\r\n      if (newSurgeries.length > 0 && activeTab.value) {\r\n        const currentSurgery = newSurgeries.find(s => s.id.toString() === activeTab.value)\r\n        if (currentSurgery) {\r\n          // 延迟更新图表，确保DOM已渲染\r\n          nextTick(() => {\r\n            // 检查canvas元素是否存在\r\n            const canvasId = `stateMachineChart_${currentSurgery.id}`\r\n            const canvas = document.getElementById(canvasId)\r\n            if (canvas) {\r\n            updateStateMachineChart(currentSurgery)\r\n            } else {\r\n              console.warn('Canvas元素不存在，等待DOM渲染:', canvasId)\r\n              // 如果canvas不存在，再等待一下\r\n              setTimeout(() => {\r\n                updateStateMachineChart(currentSurgery)\r\n              }, 100)\r\n            }\r\n            \r\n            // 更新网络延时图表\r\n            if (currentSurgery.is_remote_surgery && currentSurgery.network_stats) {\r\n              updateNetworkChart(currentSurgery)\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }, { deep: true })\r\n\r\n    // 监听活动标签页变化，更新图表\r\n    watch(activeTab, (newTab) => {\r\n      if (newTab && surgeries.value.length > 0) {\r\n        const currentSurgery = surgeries.value.find(s => s.id.toString() === newTab)\r\n        if (currentSurgery) {\r\n          // 延迟更新图表，确保DOM已渲染\r\n          nextTick(() => {\r\n            // 再次检查canvas元素是否存在\r\n            const canvasId = `stateMachineChart_${currentSurgery.id}`\r\n            const canvas = document.getElementById(canvasId)\r\n            if (canvas) {\r\n              console.log('切换到手术标签页:', currentSurgery.surgery_id)\r\n              \r\n              // 添加调试信息，特别关注第四场手术\r\n              if (currentSurgery.surgery_id === '4371-17') {\r\n                console.log('=== 第四场手术调试信息 ===')\r\n                console.log('手术开始时间:', currentSurgery.surgery_start_time)\r\n                console.log('手术结束时间:', currentSurgery.surgery_end_time)\r\n                console.log('时间轴范围:', getTimelineRange(currentSurgery))\r\n                console.log('开机时间:', getPowerOnTime(currentSurgery))\r\n                console.log('关机时间:', getPowerOffTime(currentSurgery))\r\n                console.log('状态机变化数据:', currentSurgery.state_machine_changes)\r\n                console.log('========================')\r\n              }\r\n              \r\n              updateStateMachineChart(currentSurgery)\r\n            } else {\r\n              console.warn('Canvas元素不存在，等待DOM渲染:', canvasId)\r\n              // 如果canvas不存在，再等待一下\r\n              setTimeout(() => {\r\n                updateStateMachineChart(currentSurgery)\r\n              }, 100)\r\n            }\r\n            \r\n            // 更新网络延时图表\r\n            if (currentSurgery.is_remote_surgery && currentSurgery.network_stats) {\r\n              updateNetworkChart(currentSurgery)\r\n            }\r\n          })\r\n        }\r\n      }\r\n    })\r\n\r\n    // 生命周期\r\n    onMounted(async () => {\r\n      // 加载服务器时区信息\r\n      await loadServerTimezone()\r\n      \r\n      // 优先处理URL参数中的日志ID\r\n      const logIdsParam = route.query.logIds\r\n      if (logIdsParam) {\r\n        await loadBatchLogEntriesByIds()\r\n        return\r\n      }\r\n      \r\n      // 如果没有URL参数，检查是否有sessionStorage数据\r\n      if (logEntries.value.length > 0) {\r\n        // 检查是否有自动分析标志\r\n        const autoAnalyze = sessionStorage.getItem('autoAnalyze')\r\n        if (autoAnalyze === 'true') {\r\n          sessionStorage.removeItem('autoAnalyze')\r\n          await analyzeLogs()\r\n        }\r\n      }\r\n    })\r\n\r\n          return {\r\n        surgeries,\r\n        activeTab,\r\n        armDetailsVisible,\r\n        showAllAlarms,\r\n        analyzing,\r\n        logEntriesCount,\r\n        analyzeLogs,\r\n        exportSurgeryData,\r\n        toggleArmDetails,\r\n        toggleAlarms,\r\n        scrollToAlarmCard,\r\n        scrollToNetworkCard,\r\n        getArmUsages,\r\n        getInstrumentRows,\r\n        getArmTotalTime,\r\n        getArmTimelineStyle,\r\n              getArmTimelineSegments,\r\n      getSurgeryTimelineStyle,\r\n      getUsageTimelineStyle,\r\n        getEnergyTime,\r\n        getAlarmTypeTag,\r\n        getAlarmDetails,\r\n        getDeduplicatedAlarmStats,\r\n        formatTime,\r\n        formatSurgeryTime,\r\n        formatTimeShort,\r\n        getTimePosition,\r\n        getTimelineTicks,\r\n        handleTabClick,\r\n        getAnalysisButtonText,\r\n        getTimeRange,\r\n        loadBatchLogEntriesByIds,\r\n        pollTaskResult,\r\n        getPowerOnTime,\r\n        getPowerOffTime,\r\n        getAllPowerOnTimes,\r\n        getAllPowerOffTimes,\r\n        getSurgeryTimelineStyle,\r\n        getGroupedUsagesByUdi,\r\n        getGroupedUsageDuration,\r\n        getSegmentText,\r\n        getTimelineRange,\r\n        getProgressTimelineRange,\r\n        getSegmentInstrumentName,\r\n        getSortedTimelineEvents,\r\n        getStateChanges,\r\n        getStateName,\r\n        getStateBarHeight,\r\n        getStateBarPosition,\r\n        handleBeforeTabLeave,\r\n        \r\n        // 状态机图表相关方法\r\n        resetChartView,\r\n        updateStateMachineChart,\r\n        getStateMachineChartData,\r\n        getStateMachineChartOptions,\r\n\r\n        // 网络图表相关方法\r\n        updateNetworkChart,\r\n\r\n                 // 滚动条相关方法\r\n         getScrollbarThumbStyle,\r\n         handleTrackClick,\r\n         startScrollbarDrag,\r\n         scrollChartLeft,\r\n         scrollChartRight,\r\n         canScrollLeft,\r\n         canScrollRight,\r\n         getScrollbarInfo,\r\n         checkSynchronization,\r\n\r\n        // PostgreSQL数据预览相关\r\n        postgresqlPreviewVisible,\r\n        postgresqlDataText,\r\n        copyingData,\r\n        refreshingData,\r\n        togglePostgreSQLPreview,\r\n        copyPostgreSQLData,\r\n        refreshPostgreSQLData,\r\n\r\n      }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.surgery-statistics-container {\r\n  padding: 20px;\r\n  min-height: calc(100vh - 40px);\r\n  box-sizing: border-box;\r\n}\r\n\r\n.action-bar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.analysis-section {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  min-height: 400px;\r\n}\r\n\r\n.title-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.page-subtitle {\r\n  margin: 4px 0 0 0;\r\n  font-size: 14px;\r\n  color: #909399;\r\n}\r\n\r\n.empty-card {\r\n  text-align: center;\r\n  padding: 40px;\r\n  margin-top: 100px;\r\n}\r\n\r\n.empty-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 16px;\r\n  min-height: 300px;\r\n  justify-content: center;\r\n}\r\n\r\n.empty-icon {\r\n  font-size: 48px;\r\n  color: #C0C4CC;\r\n}\r\n\r\n.empty-content h3 {\r\n  margin: 0;\r\n  font-size: 18px;\r\n  color: #303133;\r\n}\r\n\r\n.empty-content p {\r\n  margin: 0;\r\n  color: #909399;\r\n}\r\n\r\n.log-entries-info {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 20px 0;\r\n  text-align: left;\r\n}\r\n\r\n.entries-preview {\r\n  font-size: 12px;\r\n  color: #606266;\r\n  margin-top: 8px;\r\n}\r\n\r\n.analysis-info-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.tab-card {\r\n  border-radius: 8px;\r\n  min-height: 500px;\r\n  /* 优化ResizeObserver性能 */\r\n  contain: layout style paint;\r\n}\r\n\r\n/* 优化标签页性能 */\r\n.el-tabs__content {\r\n  contain: layout style paint;\r\n}\r\n\r\n.el-tab-pane {\r\n  contain: layout style paint;\r\n}\r\n\r\n/* 减少标签页切换时的重绘 */\r\n.el-tabs__item {\r\n  will-change: auto;\r\n}\r\n\r\n.el-tabs__content {\r\n  will-change: auto;\r\n}\r\n\r\n/* 禁用标签页切换动画，减少 ResizeObserver 错误 */\r\n.el-tabs__item {\r\n  transition: none !important;\r\n}\r\n\r\n.el-tabs__content {\r\n  transition: none !important;\r\n}\r\n\r\n.el-tab-pane {\r\n  transition: none !important;\r\n}\r\n\r\n/* 优化标签页内容渲染 */\r\n.el-tabs__content > .el-tab-pane {\r\n  contain: layout style paint;\r\n  will-change: auto;\r\n}\r\n\r\n/* 减少标签页切换时的布局计算 */\r\n.el-tabs__header {\r\n  contain: layout style paint;\r\n}\r\n\r\n.el-tabs__nav-wrap {\r\n  contain: layout style paint;\r\n}\r\n\r\n.el-tabs__nav {\r\n  contain: layout style paint;\r\n}\r\n\r\n.export-section {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* 手术信息布局 */\r\n.surgery-info-layout {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n  align-items: stretch;\r\n}\r\n\r\n.timeline-section {\r\n  width: 25%;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.state-chart-section {\r\n  width: 75%;\r\n  flex-shrink: 0;\r\n}\r\n\r\n/* 第二行布局：器械卡片 + 手术统计卡片 */\r\n/* 删除外部分栏后的残留样式（不再使用） */\r\n\r\n/* 手术信息卡片样式 */\r\n.info-card {\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  /* 确保时间线内容不被遮挡 */\r\n  overflow: visible;\r\n}\r\n\r\n/* 状态图表卡片样式 */\r\n.state-chart-card {\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.info-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n  padding-bottom: 12px;\r\n  border-bottom: 1px solid #E4E7ED;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.info-header .time {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #1d2129;\r\n}\r\n\r\n.info-header .badges {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n/* 故障手术标签样式 */\r\n.alarm-tag {\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  user-select: none;\r\n}\r\n\r\n.alarm-tag:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 2px 8px rgba(245, 108, 108, 0.3);\r\n}\r\n\r\n.alarm-tag:active {\r\n  transform: scale(0.95);\r\n}\r\n\r\n/* AntD Steps 时间线样式 */\r\n.surgery-steps {\r\n  padding-left: 2px;\r\n}\r\n\r\n:deep(.ant-steps-vertical) {\r\n  align-items: stretch;\r\n}\r\n\r\n:deep(.ant-steps-item) {\r\n  padding-bottom: 10px;\r\n}\r\n\r\n:deep(.ant-steps-item:last-child) {\r\n  padding-bottom: 0;\r\n}\r\n\r\n:deep(.ant-steps-item-container) {\r\n  align-items: flex-start;\r\n}\r\n\r\n:deep(.ant-steps-item-title) {\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n:deep(.ant-steps-item-description) {\r\n  color: #606266; /* 统一时间字体颜色，不按类型区分 */\r\n}\r\n:deep(.ant-steps-item-icon),\r\n:deep(.ant-steps-item-tail) {\r\n  color: #dcdfe6; /* 统一连接线/节点颜色 */\r\n}\r\n\r\n:deep(.ant-steps-item-finish) .ant-steps-item-icon,\r\n:deep(.ant-steps-item-process) .ant-steps-item-icon,\r\n:deep(.ant-steps-item-wait) .ant-steps-item-icon,\r\n:deep(.ant-steps-item-error) .ant-steps-item-icon {\r\n  color: #dcdfe6;\r\n}\r\n\r\n:deep(.ant-steps-item-finish) .ant-steps-item-title::after,\r\n:deep(.ant-steps-item-process) .ant-steps-item-title::after,\r\n:deep(.ant-steps-item-wait) .ant-steps-item-title::after,\r\n:deep(.ant-steps-item-error) .ant-steps-item-title::after {\r\n  background-color: #dcdfe6; /* 统一连接线颜色 */\r\n}\r\n\r\n.timeline-content {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 12px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 6px;\r\n  border-left: 3px solid;\r\n  /* 移除悬停动画效果 */\r\n  transition: none;\r\n}\r\n\r\n/* 移除悬停时的动态效果 */\r\n.timeline-content:hover {\r\n  /* 移除 transform 和 box-shadow 效果 */\r\n  transform: none;\r\n  box-shadow: none;\r\n}\r\n\r\n.timeline-icon {\r\n  font-size: 16px;\r\n  color: #409EFF;\r\n}\r\n\r\n.timeline-text {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #303133;\r\n}\r\n\r\n/* 时间线项目颜色 - 根据事件类型设置 */\r\n.timeline-content {\r\n  border-left-color: #409EFF;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n/* 开机事件样式 */\r\n.timeline-content.timeline-powerOn {\r\n  border-left-color: #67C23A;\r\n  background-color: #f0f9ff;\r\n}\r\n\r\n/* 手术开始事件样式 */\r\n.timeline-content.timeline-surgeryStart {\r\n  border-left-color: #409EFF;\r\n  background-color: #f0f9ff;\r\n}\r\n\r\n/* 手术结束事件样式 */\r\n.timeline-content.timeline-surgeryEnd {\r\n  border-left-color: #E6A23C;\r\n  background-color: #fff7ed;\r\n}\r\n\r\n/* 关机事件样式 */\r\n.timeline-content.timeline-powerOff {\r\n  border-left-color: #F56C6C;\r\n  background-color: #fef0f0;\r\n}\r\n\r\n/* 时间线时间戳样式 */\r\n.el-timeline-item__timestamp {\r\n  font-size: 12px !important;\r\n  color: #909399 !important;\r\n  font-weight: 500 !important;\r\n}\r\n\r\n/* 状态图表样式 */\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 12px;\r\n  border-bottom: 1px solid #E4E7ED;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.chart-controls {\r\n  display: flex;\r\n  gap: 16px;\r\n  align-items: center;\r\n}\r\n\r\n.chart-legend {\r\n  display: flex;\r\n  gap: 16px;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  font-size: 12px;\r\n  color: #606266;\r\n}\r\n\r\n.legend-color {\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 2px;\r\n}\r\n\r\n.legend-color.state-normal {\r\n  background-color: #95D475; /* 浅绿色 - 正常状态 */\r\n}\r\n\r\n.legend-color.state-error {\r\n  background-color: #F56C6C; /* 红色 - 故障状态 */\r\n}\r\n\r\n.legend-color.state-shutdown {\r\n  background-color: #909399; /* 灰色 - 关机状态 */\r\n}\r\n\r\n.state-chart-container {\r\n  position: relative;\r\n  height: 380px;\r\n  background-color: #FAFAFA;\r\n  border-radius: 6px;\r\n  border: 1px solid #E4E7ED;\r\n  overflow: hidden;\r\n  flex: 1;\r\n  cursor: grab;\r\n  padding-left: 4px; /* 为图形左边界留出空间，避免截断 */\r\n  padding-right: 10px; /* 为Y轴标签留出空间 */\r\n}\r\n\r\n.state-chart-container:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n/* 滚动条样式 */\r\n.chart-scrollbar-container {\r\n  margin-top: 10px;\r\n  padding: 0 10px;\r\n}\r\n\r\n.scrollbar-track {\r\n  position: relative;\r\n  height: 8px;\r\n  background-color: #F5F7FA;\r\n  border-radius: 4px;\r\n  border: 1px solid #E4E7ED;\r\n  cursor: pointer;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.scrollbar-thumb {\r\n  position: absolute;\r\n  height: 100%;\r\n  background-color: #409EFF;\r\n  border-radius: 4px;\r\n  cursor: grab;\r\n  transition: background-color 0.2s ease;\r\n  min-width: 20px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.scrollbar-thumb:hover {\r\n  background-color: #337ECC;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.scrollbar-thumb:active {\r\n  cursor: grabbing;\r\n  background-color: #2B5BA1;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.4);\r\n}\r\n\r\n.scrollbar-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 12px;\r\n}\r\n\r\n.scrollbar-info {\r\n  font-size: 12px;\r\n  color: #606266;\r\n  min-width: 120px;\r\n  text-align: center;\r\n}\r\n\r\n\r\n\r\n.chart-bars {\r\n  position: relative;\r\n  height: 100%;\r\n  padding: 10px 40px;\r\n}\r\n\r\n.chart-bar {\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 30px;\r\n  border-radius: 2px 2px 0 0;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.chart-bar:hover {\r\n  transform: scaleY(1.1);\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.chart-bar.state-surgery {\r\n  background-color: #95D475; /* 浅绿色 - 正常阶段 */\r\n}\r\n\r\n.chart-bar.state-error {\r\n  background-color: #F56C6C; /* 红色 - 故障阶段 */\r\n}\r\n\r\n.bar-tooltip {\r\n  position: absolute;\r\n  bottom: 100%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n  opacity: 0;\r\n  pointer-events: none;\r\n  transition: opacity 0.3s ease;\r\n  z-index: 1000;\r\n}\r\n\r\n.chart-bar:hover .bar-tooltip {\r\n  opacity: 1;\r\n}\r\n\r\n.tooltip-state {\r\n  font-weight: 600;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.tooltip-original {\r\n  color: #909399;\r\n  font-size: 11px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.tooltip-time {\r\n  color: #E4E7ED;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.tooltip-duration {\r\n  color: #67C23A;\r\n  font-weight: 500;\r\n}\r\n\r\n.chart-timeline {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 30px;\r\n  border-top: 1px solid #E4E7ED;\r\n  background-color: #FFFFFF;\r\n}\r\n\r\n.time-tick {\r\n  position: absolute;\r\n  top: 0;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n.tick-line {\r\n  width: 1px;\r\n  height: 8px;\r\n  background-color: #DCDFE6;\r\n  margin: 0 auto;\r\n}\r\n\r\n.tick-label {\r\n  font-size: 10px;\r\n  color: #909399;\r\n  text-align: center;\r\n  margin-top: 4px;\r\n  white-space: nowrap;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .surgery-info-layout {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .timeline-section,\r\n  .state-chart-section {\r\n    width: 100%;\r\n  }\r\n  \r\n  .info-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .timeline-content {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 4px;\r\n  }\r\n  \r\n  .chart-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .chart-legend {\r\n    flex-wrap: wrap;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .state-chart-container {\r\n    height: 100px;\r\n  }\r\n}\r\n\r\n/* 器械使用分组样式 */\r\n.usage-group {\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n  background-color: #FFFFFF;\r\n  border-radius: 6px;\r\n  border: 1px solid #E4E7ED;\r\n}\r\n\r\n.usage-group-header {\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.usage-group-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.usage-group-name {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.usage-group-udi {\r\n  font-size: 12px;\r\n  color: #909399;\r\n}\r\n\r\n.usage-group-duration {\r\n  font-size: 12px;\r\n  color: #67C23A;\r\n  font-weight: 500;\r\n}\r\n\r\n.usage-group-color {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.usage-group-color.arm-1 { background-color: #409EFF; }\r\n.usage-group-color.arm-2 { background-color: #67C23A; }\r\n.usage-group-color.arm-3 { background-color: #E6A23C; }\r\n.usage-group-color.arm-4 { background-color: #F56C6C; }\r\n\r\n/* 工具提示样式 */\r\n.el-tooltip__popper {\r\n  z-index: 9999;\r\n}\r\n\r\n/* 自定义工具提示样式 */\r\n:deep(.usage-time-tooltip) {\r\n  background-color: rgba(0, 0, 0, 0.9) !important;\r\n  color: white !important;\r\n  border: none !important;\r\n  border-radius: 6px !important;\r\n  padding: 10px 12px !important;\r\n  font-size: 12px !important;\r\n  font-weight: 500 !important;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4) !important;\r\n  line-height: 1.4 !important;\r\n  max-width: 300px !important;\r\n  white-space: pre-line !important;\r\n}\r\n\r\n:deep(.usage-time-tooltip .el-tooltip__arrow) {\r\n  border-top-color: rgba(0, 0, 0, 0.9) !important;\r\n}\r\n\r\n/* 移除旧的样式 */\r\n.time-info-cards {\r\n  display: none;\r\n}\r\n\r\n.time-card {\r\n  display: none;\r\n}\r\n\r\n.time-card-content {\r\n  display: none;\r\n}\r\n\r\n.usage-item {\r\n  display: none;\r\n}\r\n\r\n.usage-label {\r\n  display: none;\r\n}\r\n\r\n.usage-name {\r\n  display: none;\r\n}\r\n\r\n.usage-udi {\r\n  display: none;\r\n}\r\n\r\n.usage-duration {\r\n  display: none;\r\n}\r\n\r\n.usage-timeline-container {\r\n  display: none;\r\n}\r\n\r\n.usage-timeline {\r\n  display: none;\r\n}\r\n\r\n.timeline-segment-sub {\r\n  display: none;\r\n}\r\n\r\n/* 移除旧的时间信息样式 */\r\n.time-info-section {\r\n  display: none;\r\n}\r\n\r\n.time-info-header {\r\n  display: none;\r\n}\r\n\r\n.time-info-title {\r\n  display: none;\r\n}\r\n\r\n.time-info-content {\r\n  display: none;\r\n}\r\n\r\n.time-info-item {\r\n  display: none;\r\n}\r\n\r\n.time-icon {\r\n  display: none;\r\n}\r\n\r\n.time-info {\r\n  display: none;\r\n}\r\n\r\n.time-label {\r\n  display: none;\r\n}\r\n\r\n.arm-usage-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.unified-timeline-view {\r\n  position: relative;\r\n  min-height: 120px;\r\n  margin-bottom: 30px;\r\n  /* 优化渲染性能 */\r\n  contain: layout style paint;\r\n  will-change: transform;\r\n}\r\n\r\n.surgery-progress-container {\r\n  margin-bottom: 30px;\r\n  padding: 16px;\r\n  background-color: #FAFAFA;\r\n  border-radius: 8px;\r\n  border: 1px solid #E4E7ED;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.surgery-timeline-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.surgery-label {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  min-width: 120px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.surgery-color {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 4px;\r\n  background: linear-gradient(90deg, #409EFF, #67C23A);\r\n}\r\n\r\n.surgery-name {\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.progress-labels {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 8px;\r\n  padding-left: 132px; /* 120px标签宽度 + 12px间距 */\r\n}\r\n\r\n.time-label {\r\n  font-size: 14px;\r\n  color: #303133;\r\n  font-weight: 500;\r\n}\r\n\r\n.surgery-progress {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.surgery-timeline-container {\r\n  position: relative;\r\n  height: 20px;\r\n  background-color: #F5F7FA;\r\n  border-radius: 4px;\r\n  border: 1px solid #DCDFE6;\r\n  overflow: hidden;\r\n  flex: 1;\r\n  min-width: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.surgery-timeline-bar {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.surgery-timeline-segment {\r\n  position: absolute;\r\n  height: 100%;\r\n  background: linear-gradient(90deg, #409EFF, #67C23A);\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.surgery-segment-text {\r\n  color: white;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0 8px;\r\n}\r\n\r\n.surgery-duration-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  font-size: 12px;\r\n  color: #666;\r\n  min-width: 120px;\r\n  flex-shrink: 0;\r\n  align-items: flex-start;\r\n}\r\n\r\n.surgery-duration-info .duration-text {\r\n  font-weight: 500;\r\n  color: #409EFF;\r\n}\r\n\r\n.surgery-duration-info .time-range {\r\n  color: #909399;\r\n  font-size: 11px;\r\n}\r\n\r\n.surgery-duration-info .timeline-range {\r\n  color: #606266;\r\n  font-size: 11px;\r\n  font-style: italic;\r\n}\r\n\r\n\r\n\r\n/* 时间值样式（保留用于其他地方） */\r\n.time-value {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #303133;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.arm-timeline {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px; /* 更紧凑 */\r\n  margin-top: 12px; /* 更紧凑 */\r\n  position: relative;\r\n  z-index: 2;\r\n  contain: layout style paint;\r\n}\r\n\r\n.arm-item {\r\n  border: 1px solid #E4E7ED;\r\n  border-radius: 6px; /* 更紧凑 */\r\n  padding: 10px; /* 更紧凑 */\r\n  background-color: #FAFAFA;\r\n  margin-bottom: 8px; /* 更紧凑 */\r\n}\r\n\r\n.arm-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 8px; /* 更紧凑 */\r\n}\r\n\r\n.arm-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.arm-color {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.arm-1 { background-color: #409EFF; }\r\n.arm-2 { background-color: #67C23A; }\r\n.arm-3 { background-color: #E6A23C; }\r\n.arm-4 { background-color: #F56C6C; }\r\n\r\n.arm-name {\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.arm-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.arm-timeline-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px; /* 更紧凑 */\r\n  margin-bottom: 8px; /* 更紧凑 */\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  position: relative;\r\n}\r\n\r\n/* 当arm-timeline-container没有arm-label时的样式 */\r\n.arm-timeline-container.no-label {\r\n  gap: 0;\r\n}\r\n\r\n.arm-timeline-container.no-label .arm-timeline-bar {\r\n  flex: 1;\r\n  width: 100%;\r\n}\r\n\r\n.arm-label {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px; /* 更紧凑 */\r\n  min-width: 110px; /* 稍微收窄 */\r\n  flex-shrink: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n  position: relative;\r\n}\r\n\r\n.arm-timeline-bar {\r\n  position: relative;\r\n  height: 16px; /* 更紧凑 */\r\n  background: #F5F7FA;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  flex: 1;\r\n  min-width: 0;\r\n  border: 1px solid #DCDFE6;\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\n\r\n\r\n.timeline-segment {\r\n  position: absolute;\r\n  height: 100%;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.timeline-segment.arm-1 { background-color: #409EFF; }\r\n.timeline-segment.arm-2 { background-color: #67C23A; }\r\n.timeline-segment.arm-3 { background-color: #E6A23C; }\r\n.timeline-segment.arm-4 { background-color: #F56C6C; }\r\n\r\n/* 确保segment-content占满整个进度条区域 */\r\n.segment-content {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n}\r\n\r\n.segment-text {\r\n  font-size: 10px; /* 更紧凑 */\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0 4px;\r\n  text-align: center;\r\n  color: white;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\r\n  min-height: 16px; /* 与bar高度匹配 */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.arm-details {\r\n  margin-top: 16px;\r\n  padding-top: 0;\r\n  border-top: 1px solid #E4E7ED;\r\n}\r\n\r\n\r\n\r\n.energy-time {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 12px;\r\n  color: #909399;\r\n  margin-top: 12px;\r\n}\r\n\r\n.energy-icon {\r\n  color: #E6A23C;\r\n}\r\n\r\n.alarm-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.alarm-summary {\r\n  margin-top: 16px;\r\n  text-align: center;\r\n}\r\n\r\n.alarm-toggle {\r\n  margin-top: 12px;\r\n  text-align: center;\r\n}\r\n\r\n.alarm-toggle .el-button {\r\n  color: #409EFF;\r\n  font-size: 14px;\r\n}\r\n\r\n.alarm-toggle .el-button:hover {\r\n  color: #66b1ff;\r\n}\r\n\r\n\r\n\r\n.stats-section {\r\n  margin-top: 20px;\r\n}\r\n\r\n.stats-card {\r\n  background-color: #F5F7FA;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n}\r\n\r\n.stats-card h4 {\r\n  margin: 0 0 12px 0;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.stats-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.stats-list li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 8px;\r\n  font-size: 12px;\r\n  color: #606266;\r\n}\r\n\r\n.stats-list li:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n/* 多个时间显示样式 */\r\n.time-item {\r\n  margin-bottom: 4px;\r\n  padding: 2px 0;\r\n  font-size: 13px;\r\n  color: #606266;\r\n}\r\n\r\n.time-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.time-item:not(:last-child) {\r\n  border-bottom: 1px solid #EBEEF5;\r\n  padding-bottom: 4px;\r\n}\r\n\r\n.time-value {\r\n  min-height: 20px;\r\n}\r\n\r\n/* 确保时间轴对齐的全局样式 */\r\n.arm-timeline-container {\r\n  display: flex !important;\r\n  align-items: center !important;\r\n  gap: 12px !important;\r\n  margin-bottom: 12px !important;\r\n  width: 100% !important;\r\n  box-sizing: border-box !important;\r\n  padding: 0 !important;\r\n  position: relative !important;\r\n}\r\n\r\n/* 额外的 ResizeObserver 优化 */\r\n.surgery-statistics-container {\r\n  contain: layout style paint;\r\n}\r\n\r\n.tab-card {\r\n  contain: layout style paint;\r\n}\r\n\r\n/* 减少标签页内容的重绘 */\r\n.el-tabs__content > .el-tab-pane {\r\n  contain: layout style paint;\r\n  will-change: auto;\r\n  transform: translateZ(0);\r\n}\r\n\r\n/* 优化复杂组件的渲染 */\r\n.surgery-info-layout {\r\n  contain: layout style paint;\r\n  will-change: auto;\r\n}\r\n\r\n.unified-timeline-view {\r\n  contain: layout style paint;\r\n  will-change: auto;\r\n}\r\n\r\n/* 禁用不必要的动画和过渡 */\r\n.el-collapse-transition {\r\n  transition: none !important;\r\n}\r\n\r\n.el-fade-in-linear-enter-active,\r\n.el-fade-in-linear-leave-active {\r\n  transition: none !important;\r\n}\r\n\r\n/* 优化表格渲染 */\r\n.el-table {\r\n  contain: layout style paint;\r\n}\r\n\r\n.el-table__body-wrapper {\r\n  contain: layout style paint;\r\n}\r\n\r\n.arm-label {\r\n  display: flex !important;\r\n  align-items: center !important;\r\n  gap: 8px !important;\r\n  min-width: 120px !important;\r\n  flex-shrink: 0 !important;\r\n  padding: 0 !important;\r\n  margin: 0 !important;\r\n  position: relative !important;\r\n}\r\n\r\n.arm-timeline-bar {\r\n  position: relative !important;\r\n  height: 20px !important;\r\n  background: #F5F7FA !important;\r\n  border-radius: 4px !important;\r\n  overflow: hidden !important;\r\n  flex: 1 !important;\r\n  min-width: 0 !important;\r\n  border: 1px solid #DCDFE6 !important;\r\n  box-sizing: border-box !important;\r\n  padding: 0 !important;\r\n  margin: 0 !important;\r\n  left: 0 !important;\r\n  right: 0 !important;\r\n}\r\n\r\n/* 确保所有时间轴进度条完全对齐，基于容器左边偏移相同距离 */\r\n.arm-item .arm-timeline-container .arm-timeline-bar,\r\n.usage-group .arm-timeline-container .arm-timeline-bar {\r\n  margin-left: 0 !important;\r\n  margin-right: 0 !important;\r\n  padding-left: 0 !important;\r\n  padding-right: 0 !important;\r\n  width: 100% !important;\r\n  max-width: none !important;\r\n  position: relative !important;\r\n}\r\n\r\n/* 确保时间轴容器内的所有元素都基于相同的左边偏移 */\r\n.arm-timeline-container .arm-label {\r\n  position: relative !important;\r\n  left: 0 !important;\r\n}\r\n\r\n.arm-timeline-container .arm-timeline-bar {\r\n  position: relative !important;\r\n  left: 0 !important;\r\n}\r\n\r\n/* 器械使用时间段的特殊样式 */\r\n.arm-timeline-container .timeline-segment {\r\n  opacity: 0.7; /* 降低透明度 */\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.arm-timeline-container .timeline-segment:hover {\r\n  opacity: 1; /* 悬停时高亮显示 */\r\n  transform: scale(1.02);\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n  z-index: 10;\r\n}\r\n\r\n/* 网络延时统计卡片样式 */\r\n.network-card {\r\n  margin-top: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.network-summary {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n}\r\n\r\n.network-chart-container {\r\n  width: 100%;\r\n  height: 300px;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.network-no-data {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 200px;\r\n  color: #909399;\r\n}\r\n\r\n/* 网络标签样式 */\r\n.network-tag {\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  user-select: none;\r\n}\r\n\r\n.network-tag:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 2px 8px rgba(64, 158, 255, 0.3);\r\n}\r\n\r\n/* PostgreSQL数据预览样式 */\r\n.postgresql-preview-section {\r\n  margin-bottom: 20px;\r\n  border: 1px solid #E4E7ED;\r\n  border-radius: 6px;\r\n  background-color: #FAFAFA;\r\n}\r\n\r\n.preview-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 12px 16px;\r\n  background-color: #F5F7FA;\r\n  border-bottom: 1px solid #E4E7ED;\r\n  border-radius: 6px 6px 0 0;\r\n}\r\n\r\n.preview-title {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #303133;\r\n}\r\n\r\n.preview-content {\r\n  padding: 16px;\r\n}\r\n\r\n.postgresql-textarea {\r\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\r\n  font-size: 12px;\r\n  line-height: 1.4;\r\n  background-color: #FFFFFF;\r\n  border: 1px solid #DCDFE6;\r\n  border-radius: 4px;\r\n}\r\n\r\n.postgresql-textarea :deep(.el-textarea__inner) {\r\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\r\n  font-size: 12px;\r\n  line-height: 1.4;\r\n  background-color: #FFFFFF;\r\n  border: 1px solid #DCDFE6;\r\n  border-radius: 4px;\r\n  resize: vertical;\r\n  min-height: 120px;\r\n}\r\n\r\n.preview-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n  margin-top: 12px;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.preview-actions .el-button {\r\n  font-size: 12px;\r\n  padding: 6px 12px;\r\n}\r\n\r\n.preview-actions .el-button .el-icon {\r\n  margin-right: 4px;\r\n}\r\n\r\n/* 数据预览区域的响应式设计 */\r\n@media (max-width: 768px) {\r\n  .preview-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .preview-actions {\r\n    justify-content: flex-start;\r\n    flex-wrap: wrap;\r\n  }\r\n}\r\n</style> ","import { render } from \"./SurgeryStatistics.vue?vue&type=template&id=79e45d79&scoped=true\"\nimport script from \"./SurgeryStatistics.vue?vue&type=script&lang=js\"\nexport * from \"./SurgeryStatistics.vue?vue&type=script&lang=js\"\n\nimport \"./SurgeryStatistics.vue?vue&type=style&index=0&id=79e45d79&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-79e45d79\"]])\n\nexport default __exports__"],"names":["serverOffsetMinutes","loadServerTimezone","async","resp","fetch","json","offsetMinutes","error","console","warn","formatTime","timestamp","useServerTimezone","isUtcTime","test","date","utcTimeStr","replace","Date","isNaN","getTime","localOffset","getTimezoneOffset","delta","setTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","result","formatTimeShort","formatSurgeryTime","surgery","surgery_start_time","surgery_end_time","start","end","class","surgeries","length","analyzing","logEntriesCount","type","analyzeLogs","loading","disabled","getAnalysisButtonText","activeTab","handleTabClick","lazy","handleBeforeTabLeave","stretch","closable","addable","key","id","label","surgery_id","name","toString","exportSurgeryData","alarm_count","size","scrollToAlarmCard","style","scrollToNetworkCard","togglePostgreSQLPreview","postgresqlPreviewVisible","postgresqlDataText","rows","readonly","placeholder","copyPostgreSQLData","copyingData","refreshPostgreSQLData","refreshingData","direction","current","getSortedTimelineEvents","event","index","title","description","time","header","total_duration","getSurgeryTimelineStyle","getProgressTimelineRange","getArmUsages","armUsage","plain","toggleArmDetails","getArmTimelineSegments","segment","segmentIndex","content","getSegmentInstrumentName","placement","getGroupedUsagesByUdi","groupedUsage","udiCode","instrumentName","getGroupedUsageDuration","usages","usage","usageIndex","getUsageTimelineStyle","startTime","endTime","Math","floor","getSegmentText","getEnergyTime","armDetailsVisible","data","getInstrumentRows","prop","getAlarmDetails","slice","showAllAlarms","undefined","width","default","row","code","error_code","status","toggleAlarms","getDeduplicatedAlarmStats","activeCount","network_stats","count","avg","min","max","components","DataAnalysis","Download","SwitchButton","Close","VideoPlay","VideoPause","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Calendar","Lightning","Loading","Document","Refresh","setup","route","stateMachineCharts","Map","chartViewRange","chartCurrentTime","getStateToYPositionMap","logEntries","logIdsParam","query","logIds","surgeryData","sessionStorage","getItem","JSON","parse","entries","dataAge","now","log","removeItem","compressed","decompressedEntries","map","entry","t","e","param1","p1","param2","p2","param3","p3","param4","p4","explanation","exp","log_name","ln","value","loadBatchLogEntriesByIds","split","parseInt","response","api","surgeryStatistics","analyzeByLogIds","success","taskId","pollTaskResult","forEach","message","maxAttempts","attempts","poll","getAnalysisTaskStatus","task","Promise","resolve","setTimeout","getTimeRange","timestamps","minTime","maxTime","dataSize","stringify","maxSize","analysisData","warning","toFixed","sampleSize","step","i","push","analyzeSortedEntries","includePostgreSQLStructure","surgeryId","exportSingleSurgeryData","generatePostgreSQLData","_","formatUtcForDatabase","d","Number","pad","n","y","getUTCFullYear","m","getUTCMonth","getUTCDate","h","getUTCHours","mi","getUTCMinutes","s","getUTCSeconds","find","extractedPrefix","join","deviceIdStr","Array","isArray","device_ids","postgresql_row_preview","structured","postgresql_structure","generateStructuredData","surgeriesData","source_log_ids","log_id","log_entry_start_id","log_entry_end_id","start_time","end_time","has_fault","surgery_stats","has_error","is_remote","is_remote_surgery","structured_data","powerCycles","power_on_times","shutdown_times","onTimes","offTimes","on_time","off_time","powerOnTime","powerOffTime","arms","arm_id","instrument_usage","tool_type","udi","energy_activation","surgeryStats","network_latency_ms","latency","faults","alarm_details","fault","arm_switch_count","left_hand_clutch","hand_clutch_stats","arm1","right_hand_clutch","arm2","foot_clutch","foot_pedal_stats","clutch","endoscope_pedal","camera","power_cycles","text","navigator","clipboard","writeText","armIndex","alarmCard","document","querySelector","scrollIntoView","behavior","block","boxShadow","transition","networkCard","arm1_usage","arm2_usage","arm3_usage","arm4_usage","grouped","allArms","u","has","set","segments","get","from","values","item","sort","a","b","merged","seg","last","lastEnd","curStart","curEnd","getArmTotalTime","totalMinutes","filter","reduce","total","duration","getAlarmTypeTag","details","uniqueCount","totalCount","uniqueCodes","Set","isActive","getTimelineRange","getEventTimelineRange","events","getPowerOnTime","getPowerOffTime","surgeryEndTime","getTimePosition","position","getTimelineTicks","interval","ticks","mergeOverlappingTimeRanges","timeRanges","next","getArmTimelineStyle","left","completeUsages","mergedTimeRanges","totalWidth","timelineRange","range","startPosition","endPosition","surgeryStartTime","timelineStart","timelineEnd","totalSeconds","power_on_time","power_off_time","getAllPowerOnTimes","getAllPowerOffTimes","powerOnTimes","is_consecutive_surgery","previous_surgery_end_time","displayTime","color","icon","powerOffTimes","getStateChanges","stateMachineChanges","state_machine_changes","stateChanges","currentChange","nextChange","currentState","state","stateCategory","nextState","originalState","stateName","getStateName","stateMap","getStateBarHeight","heightMap","height","getStateBarPosition","clampedPosition","totalDuration","widthPercent","parseFloat","minWidthPerChar","padding","requiredWidth","maxChars","substring","startPercent","endPercent","instrumentsInSegment","usageStart","usageEnd","tab","newTabName","oldTabName","then","resetChartView","chart","dispose","clear","Object","keys","surgeryChartStates","surgeryScrollbarStates","getStateMachineChartData","changes","xMin","xMax","points","rawData","positionMap","changesWithin","lastBefore","ch","startState","lastState","getStateMachineChartOptions","surgeryState","currentTime","viewRange","responsive","maintainAspectRatio","interaction","mode","intersect","plugins","legend","display","tooltip","callbacks","context","dataIndex","isCrossDay","getStateMachineStateName","parsed","scales","x","maxTicksLimit","callback","this","beginAtZero","stepSize","animation","updateStateMachineChart","container","getElementById","existing","delete","innerHTML","echarts","reverseMap","k","fiveMinutesMs","initialEnd","setOption","grid","right","top","bottom","containLabel","toolbox","feature","dataZoom","yAxisIndex","restore","saveAsImage","trigger","axisPointer","formatter","params","p","yMapped","xAxisIndex","filterMode","zoomOnMouseWheel","moveOnMouseWheel","moveOnMouseMove","startValue","endValue","showDataShadow","brushSelect","xAxis","axisLabel","yAxis","val","original","axisTick","show","splitNumber","series","showSymbol","lineStyle","areaStyle","offset","networkCharts","updateNetworkChart","scale","itemStyle","scrollbarUpdateTrigger","getScrollbarThumbStyle","updateTrigger","totalStartTime","totalEndTime","chartData","viewStartTime","viewEndTime","viewWindowDuration","viewCenterTime","minCenterTime","maxCenterTime","clampedTime","viewDuration","thumbPosition","thumbWidth","clampedWidth","toISOString","isAtEnd","isAtStart","handleTrackClick","track","currentTarget","rect","getBoundingClientRect","clickX","clientX","trackWidth","clickPercentage","targetTime","newCurrentTime","startScrollbarDrag","preventDefault","stopPropagation","scrollbarState","isDragging","dragStartX","dragStartTime","addEventListener","handleScrollbarDrag","stopScrollbarDrag","deltaX","scrollbarContainer","scrollbarTrack","offsetWidth","dragTimeChange","newCenterTime","removeEventListener","scrollChartLeft","scrollStep","oldTime","newTime","scrollChartRight","canScrollLeft","canScrollRight","canScroll","checkSynchronization","scrollbarStyle","scrollbarInfo","getScrollbarInfo","isShortSurgery","chartDataExists","chartLabels","labels","chartDataPoints","chartStartTime","chartEndTime","scrollbarLeft","scrollbarWidth","finalViewStartTime","finalViewEndTime","startTimeStr","endTimeStr","durationMinutes","actualStartTime","actualEndTime","actualDurationMinutes","newSurgeries","currentSurgery","canvasId","canvas","deep","newTab","autoAnalyze","__exports__","render"],"sourceRoot":""}