{"version":3,"file":"js/276.10fdb0df.js","mappings":"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,QAAQyB,MAAM,cAAeA,GAC7B,MAAMyP,EAAezP,EAAMmH,UAAU1T,MAAMiN,SAAWV,EAAMU,SAAW,aACvE,MAAUV,MAAMyP,EAClB,GAII7S,GAAyB,KAC7B,MAAMwO,EAAgB,8BAClBzO,EAAS4H,QAAU6G,EAAcrD,KAAKpL,EAAS4H,OACjDzH,EAAcyH,MAAQ,0CAEtBzH,EAAcyH,MAAQ,IAOpB9N,GAAoB,IACpBN,EAAmBoO,MAAMnO,OAAS,GAC7B,oBAELQ,GAAsB2N,MACjB3N,GAAsB2N,MAE3BsB,GAAmBtB,MACdsB,GAAmBtB,MAErB,cAIHrN,GAAuB,IACvBf,EAAmBoO,MAAMnO,OAAS,GAC7B,sBAELQ,GAAsB2N,MACjB3N,GAAsB2N,MAExB,gBAGT,MAAO,CACL5Q,UACA4G,YACAF,mBACAwJ,kBACAC,mBACAuI,kBACAtI,YACAzO,cACAC,WACA0P,OACAzP,QACAqF,YACAE,gBACAN,kBACAgN,YACA+C,oBACAC,uBACApG,gBACArJ,gBACAR,gBACAoB,eACAX,mBACAC,iBACAC,YACAC,gBACAC,gBACAa,cACAoS,eACAjW,kBACAG,gBACAE,iBACA6V,cACAF,kBACAnZ,cACA+C,oBACAC,oBACAC,mBACAiX,cACArY,YACAoF,aACA6H,eACAvH,cACAE,WACAkI,iBACAnK,iBACAoK,iBACAE,wBACAzI,mBACAC,mBACAjE,gBACA8Y,cACAjZ,WACAE,eACAK,iBACA+D,WACAI,gBACAD,eACAT,qBACAC,oBACAO,0BAGAlJ,eACA+B,cACAI,yBACAE,iBACA0B,aACAC,gBACAmB,oBACAC,iBACAC,cACA5C,qBACAyB,4BACAC,uBACAR,gBACA/D,oBACAqC,0BACAC,6BACAf,oBACA2C,kBACAvB,qBACAC,sBACA1C,oBACA2U,uBACAE,mBACAC,qBACA3Q,+BACAP,wBACA4B,0BACAC,6BACA3B,sBACAC,sBACAO,yBACAC,yBACAwV,4BACAK,8BACAtC,+BACAnG,uBACAC,sBACAC,6BAGA9O,eACAI,mBACAM,mBACAH,kBACAN,gBACAqP,sBACAK,qBACAtP,yBACAP,sB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","sources":["webpack://logtool-frontend/./src/views/Logs.vue","webpack://logtool-frontend/./src/services/websocketClient.js","webpack://logtool-frontend/./src/views/Logs.vue?e192","webpack://logtool-frontend/./src/utils/surgeryDataAdapter.js","webpack://logtool-frontend/./src/utils/visualizationHelper.js"],"sourcesContent":["<template>\r\n  <div class=\"logs-container\">\r\n    <!-- 按设备分组的日志列表 -->\r\n    <el-card class=\"list-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>日志列表</span>\r\n          <div class=\"header-actions\">\r\n            <!-- 重置按钮 -->\r\n            <div class=\"header-section reset-section\">\r\n              <el-button plain @click=\"resetAllFilters\">重置</el-button>\r\n            </div>\r\n\r\n            <!-- 刷新按钮 -->\r\n            <div class=\"header-section refresh-section\">\r\n              <el-button plain @click=\"loadDeviceGroups\">\r\n                <el-icon><Refresh /></el-icon>\r\n                刷新\r\n              </el-button>\r\n            </div>\r\n            \r\n\r\n\r\n            <!-- 日志上传按钮 -->\r\n            <div class=\"header-section upload-section\">\r\n              <el-button \r\n                type=\"primary\" \r\n                @click=\"showNormalUpload\"\r\n              >\r\n                <el-icon><UploadFilled /></el-icon>\r\n                日志上传\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-table\r\n        :data=\"deviceGroups\"\r\n        :loading=\"loading\"\r\n        style=\"width: 100%\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <el-table-column prop=\"device_id\" label=\"设备编号\" width=\"200\">\r\n          <template #header>\r\n            <div class=\"col-header\">\r\n              <span>设备编号</span>\r\n              <el-popover\r\n                placement=\"bottom-start\"\r\n                width=\"260\"\r\n                :visible=\"showDeviceFilterPanel\"\r\n                @update:visible=\"showDeviceFilterPanel = $event\"\r\n                popper-class=\"custom-filter-panel\"\r\n              >\r\n                <div class=\"filter-panel\">\r\n                  <div class=\"filter-title\">设备编号筛选</div>\r\n                  <el-input\r\n                    v-model=\"deviceFilterValue\"\r\n                    placeholder=\"输入设备编号进行筛选\"\r\n                    clearable\r\n                    @keyup.enter=\"applyDeviceFilter\"\r\n                  >\r\n                    <template #prefix>\r\n                      <el-icon><Search /></el-icon>\r\n                    </template>\r\n                  </el-input>\r\n                  <div class=\"filter-actions\">\r\n                    <el-button size=\"small\" type=\"primary\" @click=\"applyDeviceFilter\">搜索</el-button>\r\n                    <el-button size=\"small\" @click=\"resetDeviceFilter\">重置</el-button>\r\n                  </div>\r\n                </div>\r\n                <template #reference>\r\n                  <el-icon :class=\"['filter-trigger', { active: !!deviceFilterValue }]\"><Filter /></el-icon>\r\n                </template>\r\n              </el-popover>\r\n            </div>\r\n          </template>\r\n          <template #default=\"{ row }\">\r\n            <el-button \r\n              type=\"text\" \r\n              @click=\"showDeviceDetail(row)\"\r\n              style=\"padding: 0; font-weight: 500; color: #409eff;\"\r\n            >\r\n              {{ row.device_id }}\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"hospital_name\" label=\"医院名称\" width=\"200\">\r\n          <template #default=\"{ row }\">\r\n            {{ row.hospital_name || '-' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"log_count\" label=\"日志数量\" width=\"120\" align=\"center\">\r\n          <template #default=\"{ row }\">\r\n            <el-tag type=\"info\" size=\"small\">{{ row.log_count }}</el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"latest_update_time\" label=\"更新时间\" width=\"180\">\r\n          <template #default=\"{ row }\">\r\n            {{ formatDate(row.latest_update_time) }}\r\n          </template>\r\n        </el-table-column>\r\n                 <el-table-column label=\"操作\" width=\"300\" fixed=\"right\">\r\n           <template #default=\"{ row }\">\r\n             <el-button \r\n               size=\"small\" \r\n               type=\"primary\"\r\n               @click=\"showDeviceDetail(row)\"\r\n             >\r\n               详情\r\n             </el-button>\r\n             \r\n             <el-button \r\n               v-if=\"false\"\r\n               size=\"small\" \r\n               type=\"success\"\r\n               @click=\"uploadDataForDevice(row)\"\r\n             >\r\n               数据上传\r\n             </el-button>\r\n             \r\n             <el-button \r\n               size=\"small\" \r\n               type=\"info\"\r\n               @click=\"openSurgeryDrawerForDevice(row)\"\r\n             >\r\n               手术数据\r\n             </el-button>\r\n           </template>\r\n         </el-table-column>\r\n      </el-table>\r\n      \r\n      <!-- 设备列表分页 -->\r\n      <div class=\"pagination-wrapper\">\r\n        <el-pagination\r\n          :current-page=\"currentPage\"\r\n          :page-size=\"pageSize\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n          :total=\"deviceTotal\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          @size-change=\"handleDeviceSizeChange\"\r\n          @current-change=\"handleDeviceCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n\r\n    <!-- 设备详细日志列表抽屉 -->\r\n    <el-drawer\r\n      v-model=\"showDeviceDetailDrawer\"\r\n      :title=\"` ${selectedDevice?.device_id} 详细日志`\"\r\n      direction=\"rtl\"\r\n      size=\"1200px\"\r\n      :before-close=\"handleDrawerClose\"\r\n    >\r\n      <div class=\"device-detail-content\">\r\n        <!-- 设备信息头部 -->\r\n        <div class=\"device-header\">\r\n          <div class=\"device-info\">\r\n            <h3>设备编号：{{ selectedDevice?.device_id }}</h3>\r\n            <p>医院名称：{{ selectedDevice?.hospital_name || '暂无' }}</p>\r\n            <p>日志总数：{{ selectedDevice?.log_count || 0 }}</p>\r\n          </div>\r\n          <div class=\"device-actions\">\r\n            \r\n            <el-button \r\n              type=\"primary\" \r\n              @click=\"uploadLogForDevice(selectedDevice)\"\r\n            >\r\n              <el-icon><UploadFilled /></el-icon>\r\n              日志上传\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 详细日志列表 -->\r\n        <div class=\"detail-logs-section\">\r\n          <div class=\"detail-header\">\r\n            <h4>日志列表</h4>\r\n            <div class=\"detail-actions\">\r\n              <!-- 批量操作组 -->\r\n              <div class=\"batch-section\" v-if=\"selectedDetailLogs && selectedDetailLogs.length > 0\">\r\n              <div class=\"batch-actions\">\r\n                <el-button \r\n                  type=\"primary\" \r\n                  size=\"small\" \r\n                  @click=\"handleBatchAnalyze\"\r\n                  :disabled=\"!canBatchView || !isSameDevice || selectedDetailLogs.length > 20\"\r\n                  :title=\"getBatchViewTitle()\"\r\n                >\r\n                  <el-icon><Monitor /></el-icon>\r\n                    批量查看 ({{ selectedDetailLogs.length }})\r\n                </el-button>\r\n                <el-button \r\n                  type=\"success\" \r\n                  size=\"small\" \r\n                  @click=\"handleBatchDownload\"\r\n                  :disabled=\"!canBatchDownload\"\r\n                  :title=\"incompleteLogsMessage\"\r\n                >\r\n                  <el-icon><Download /></el-icon>\r\n                    批量下载 ({{ selectedDetailLogs.length }})\r\n                </el-button>\r\n                <el-button \r\n                  type=\"danger\" \r\n                  size=\"small\" \r\n                  @click=\"handleBatchDelete\"\r\n                  :disabled=\"!canBatchDelete\"\r\n                  :title=\"incompleteLogsMessage\"\r\n                >\r\n                  <el-icon><Delete /></el-icon>\r\n                    批量删除 ({{ selectedDetailLogs.length }})\r\n                </el-button>\r\n                <el-button \r\n                  type=\"warning\" \r\n                  size=\"small\" \r\n                  @click=\"handleBatchReparse\"\r\n                    :disabled=\"selectedDetailLogs.length === 0 || userRole !== 1 || !canBatchReparse || selectedDetailLogs.length > 20\"\r\n                  :title=\"getBatchReparseTitle()\"\r\n                  v-if=\"userRole === 1\"\r\n                >\r\n                  <el-icon><Refresh /></el-icon>\r\n                    批量重新解析 ({{ selectedDetailLogs.length }})\r\n                </el-button>\r\n                <el-tooltip \r\n                  content=\"普通用户只能删除自己上传的日志\" \r\n                  placement=\"top\" \r\n                  v-if=\"userRole === 3\"\r\n                >\r\n                  <el-icon class=\"info-icon\"><InfoFilled /></el-icon>\r\n                </el-tooltip>\r\n                <el-button \r\n                  type=\"info\" \r\n                  size=\"small\" \r\n                    @click=\"clearDetailSelection\"\r\n                >\r\n                  取消选择\r\n                </el-button>\r\n              </div>\r\n            </div>\r\n\r\n              <!-- 仅看自己按钮 -->\r\n              <div class=\"only-own-section\">\r\n                <el-checkbox v-model=\"detailOnlyOwn\" @change=\"applyDetailOnlyOwn\" label=\"仅看自己\" />\r\n            </div>\r\n\r\n              <!-- 重置按钮 -->\r\n              <div class=\"reset-section\">\r\n                <el-button plain size=\"small\" @click=\"resetDetailFilters\">重置</el-button>\r\n            </div>\r\n\r\n              <!-- 刷新按钮 -->\r\n              <div class=\"refresh-section\">\r\n                <el-button plain size=\"small\" @click=\"loadDetailLogs\">\r\n                <el-icon><Refresh /></el-icon>\r\n                刷新\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      \r\n      <el-table\r\n            :data=\"detailLogs\"\r\n            :loading=\"detailLoading\"\r\n        style=\"width: 100%\"\r\n            v-loading=\"detailLoading\"\r\n            @selection-change=\"handleDetailSelectionChange\"\r\n            row-key=\"id\"\r\n      >\r\n        <el-table-column type=\"selection\" width=\"55\" />\r\n            <el-table-column prop=\"original_name\" label=\"日志文件名\" width=\"240\">\r\n          <template #header>\r\n            <div class=\"col-header\">\r\n                  <span>日志文件名</span>\r\n              <el-popover\r\n                placement=\"bottom-start\"\r\n                width=\"260\"\r\n                    :visible=\"showDetailNameFilterPanel\"\r\n                    @update:visible=\"showDetailNameFilterPanel = $event\"\r\n                popper-class=\"custom-filter-panel\"\r\n              >\r\n                <div class=\"filter-panel\">\r\n                  <div class=\"filter-title\">时间前缀 (YYYY / YYYYMM / YYYYMMDD / YYYYMMDDHH)</div>\r\n                  <el-input\r\n                        v-model=\"detailNameTimePrefix\"\r\n                    placeholder=\"例如 2025081611\"\r\n                    clearable\r\n                        @keyup.enter=\"applyDetailNameFilter\"\r\n                  >\r\n                    <template #prefix>\r\n                      <el-icon><Search /></el-icon>\r\n                    </template>\r\n                  </el-input>\r\n                  <div class=\"filter-actions\">\r\n                        <el-button size=\"small\" type=\"primary\" @click=\"applyDetailNameFilter\">搜索</el-button>\r\n                        <el-button size=\"small\" @click=\"resetDetailNameFilter\">重置</el-button>\r\n                  </div>\r\n                </div>\r\n                <template #reference>\r\n                      <el-icon :class=\"['filter-trigger', { active: !!detailNameTimePrefix }]\"><Filter /></el-icon>\r\n                </template>\r\n              </el-popover>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n            <el-table-column prop=\"uploader_id\" label=\"上传用户ID\" width=\"120\" />\r\n        <el-table-column prop=\"upload_time\" label=\"上传时间\" width=\"150\">\r\n          <template #default=\"{ row }\">\r\n            {{ formatDate(row.upload_time) }}\r\n          </template>\r\n        </el-table-column>\r\n        \r\n        <el-table-column label=\"状态\" width=\"120\" align=\"center\">\r\n          <template #default=\"{ row }\">\r\n            <el-tag :type=\"getRowStatusType(row)\" size=\"small\">\r\n              {{ getRowStatusText(row) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        \r\n        <el-table-column label=\"操作\" width=\"300\" fixed=\"right\">\r\n          <template #default=\"{ row }\">\r\n            <el-button \r\n              size=\"small\" \r\n              type=\"primary\"\r\n              @click=\"goToLogAnalysis(row)\"\r\n              :disabled=\"!canView(row)\"\r\n            >\r\n              查看\r\n            </el-button>\r\n            \r\n            <el-button \r\n              size=\"small\" \r\n              type=\"success\"\r\n              @click=\"handleDownload(row)\"\r\n              :disabled=\"!canDownload(row)\"\r\n            >\r\n              下载\r\n            </el-button>\r\n            \r\n            <el-button \r\n              size=\"small\" \r\n              type=\"danger\" \r\n              @click=\"handleDelete(row)\"\r\n              v-if=\"canDeleteLog(row)\"\r\n              :disabled=\"!(row.status === 'parsed' || row.status === 'decrypt_failed' || row.status === 'parse_failed' || row.status === 'file_error' || row.status === 'failed' || row.status === 'queue_failed' || row.status === 'upload_failed' || row.status === 'delete_failed')\"\r\n            >\r\n              删除\r\n            </el-button>\r\n\r\n            <el-button \r\n              size=\"small\" \r\n              type=\"warning\"\r\n              @click=\"handleReparse(row)\"\r\n              v-if=\"canReparse\"\r\n              :disabled=\"!canReparseLog(row) || row.parsing\"\r\n            >\r\n              重新解析\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      \r\n      <!-- 分页 -->\r\n      <div class=\"pagination-wrapper\">\r\n        <el-pagination\r\n              :current-page=\"detailCurrentPage\"\r\n              :page-size=\"detailPageSize\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n              :total=\"detailTotal\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n              @size-change=\"handleDetailSizeChange\"\r\n              @current-change=\"handleDetailCurrentChange\"\r\n        />\r\n      </div>\r\n        </div>\r\n      </div>\r\n    </el-drawer>\r\n\r\n    <!-- 手术数据抽屉 -->\r\n    <el-drawer\r\n      v-model=\"showSurgeryDrawer\"\r\n      title=\"手术数据\"\r\n      direction=\"rtl\"\r\n      size=\"1200px\"\r\n    >\r\n      <div v-if=\"selectedDevice\" class=\"device-header\" style=\"margin-bottom:12px;\">\r\n        <div class=\"device-info\">\r\n          <h3>医院：{{ selectedDevice.hospital_name || '-' }}</h3>\r\n          <p>设备编号：{{ selectedDevice.device_id }}</p>\r\n        </div>\r\n      </div>\r\n      <el-table :data=\"surgeryList\" :loading=\"surgeryLoading\" style=\"width:100%\">\r\n        <el-table-column prop=\"surgery_id\" label=\"手术id\" width=\"220\" />\r\n        <el-table-column prop=\"structured_data.surgery_stats.procedure\" label=\"手术术式\" min-width=\"200\">\r\n          <template #default=\"{ row }\">\r\n            {{ row.structured_data?.surgery_stats?.procedure || '-' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"start_time\" label=\"手术开始时间\" width=\"180\">\r\n          <template #default=\"{ row }\">{{ formatDate(row.start_time) }}</template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"end_time\" label=\"手术结束时间\" width=\"180\">\r\n          <template #default=\"{ row }\">{{ formatDate(row.end_time) }}</template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"260\" fixed=\"right\">\r\n          <template #default=\"{ row }\">\r\n            <el-button size=\"small\" type=\"primary\" @click=\"viewLogsBySurgery(row)\">查看日志</el-button>\r\n            <el-button size=\"small\" type=\"success\" @click=\"visualizeSurgery(row)\">可视化</el-button>\r\n            <el-popconfirm v-if=\"$store.getters['auth/hasPermission']('surgery:delete')\" title=\"确定删除该手术记录？\" @confirm=\"deleteSurgery(row)\">\r\n              <template #reference>\r\n                <el-button size=\"small\" type=\"danger\">删除</el-button>\r\n              </template>\r\n            </el-popconfirm>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <div class=\"pagination-wrapper\">\r\n        <el-pagination\r\n          :current-page=\"surgeryPage\"\r\n          :page-size=\"surgeryPageSize\"\r\n          :page-sizes=\"[10,20,50]\"\r\n          :total=\"surgeryTotal\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          @size-change=\"(s)=>{surgeryPageSize=s; surgeryPage=1; loadSurgeries()}\"\r\n          @current-change=\"(p)=>{surgeryPage=p; loadSurgeries()}\"\r\n        />\r\n      </div>\r\n    </el-drawer>\r\n\r\n    <!-- 上传日志弹窗 -->\r\n    <el-dialog v-model=\"showUploadDialog\" title=\"上传日志\" width=\"700px\" append-to-body>\r\n\r\n      <el-upload\r\n        ref=\"uploadRef\"\r\n        :action=\"uploadUrl\"\r\n        :headers=\"uploadHeaders\"\r\n        :before-upload=\"beforeUpload\"\r\n        :on-success=\"onUploadSuccess\"\r\n        :on-error=\"onUploadError\"\r\n        :on-exceed=\"onExceed\"\r\n        :on-change=\"onFileChange\"\r\n        :on-remove=\"onFileRemove\"\r\n        :on-progress=\"onUploadProgress\"\r\n        :auto-upload=\"false\"\r\n        :show-file-list=\"false\"\r\n        :multiple=\"true\"\r\n        :limit=\"50\"\r\n        accept=\".medbot\"\r\n        name=\"file\"\r\n        :disabled=\"uploading\"\r\n      >\r\n        <el-button type=\"primary\" :disabled=\"uploading\">\r\n          <el-icon class=\"el-icon--upload\"><upload-filled /></el-icon>\r\n          选择文件\r\n        </el-button>\r\n        <template #tip>\r\n          <div class=\"el-upload__tip\">\r\n            <div v-if=\"!uploading\">\r\n              支持上传 .medbot 文件，最多50个文件，总大小不超过200MB，上传后将自动解密并解析\r\n            </div>\r\n            <div v-else class=\"parsing-tip\">\r\n              <el-icon class=\"is-loading\"><Refresh /></el-icon>\r\n              文件上传中，上传完成后才能进行下一次上传操作\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-upload>\r\n\r\n      <!-- 自定义文件列表 -->\r\n      <div v-if=\"uploadFileList && uploadFileList.length > 0\" class=\"custom-file-list\">\r\n        <div class=\"file-list-header\">\r\n          <span>已选择的文件 ({{ uploadFileList.length }})</span>\r\n          <el-button type=\"text\" size=\"small\" @click=\"clearUpload\" :disabled=\"uploading\">\r\n            清空\r\n          </el-button>\r\n        </div>\r\n        <div class=\"file-items\">\r\n          <div \r\n            v-for=\"(file, index) in uploadFileList\" \r\n            :key=\"index\" \r\n            class=\"file-item\"\r\n          >\r\n            <el-icon><Document /></el-icon>\r\n            <span class=\"file-name\">{{ file.name || file.originalname }}</span>\r\n            <span class=\"file-size\">{{ file.sizeText }}</span>\r\n            <el-button \r\n              type=\"text\" \r\n              size=\"small\" \r\n              @click=\"removeFile(index)\"\r\n              :disabled=\"uploading\"\r\n            >\r\n              <el-icon><Delete /></el-icon>\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 密钥输入区域 -->\r\n      <div class=\"key-input-section\">\r\n        <div class=\"key-input-row\">\r\n          <el-input\r\n            v-model=\"decryptKey\"\r\n            placeholder=\"请输入解密密钥（MAC地址格式，如：00-01-05-77-6a-09）\"\r\n            style=\"width: 300px;\"\r\n            clearable\r\n            @blur=\"validateKeyFormat\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><Key /></el-icon>\r\n            </template>\r\n          </el-input>\r\n          \r\n          <el-button \r\n            type=\"primary\" \r\n            plain \r\n            @click=\"autoFillDeviceId\"\r\n            :disabled=\"!decryptKey.trim()\"\r\n          >\r\n            自动填充设备编号\r\n          </el-button>\r\n          \r\n          <span class=\"key-separator\">或</span>\r\n          \r\n          <el-upload\r\n            ref=\"keyUploadRef\"\r\n            :auto-upload=\"false\"\r\n            :show-file-list=\"false\"\r\n            accept=\".txt\"\r\n            :before-upload=\"beforeKeyUpload\"\r\n            :on-change=\"onKeyFileChange\"\r\n          >\r\n            <el-button type=\"primary\" plain>\r\n              <el-icon><Upload /></el-icon>\r\n              上传密钥文件\r\n            </el-button>\r\n          </el-upload>\r\n        </div>\r\n        \r\n        <div v-if=\"keyFileName\" class=\"key-file-info\">\r\n          <el-tag type=\"success\" size=\"small\">\r\n            <el-icon><Document /></el-icon>\r\n            {{ keyFileName }}\r\n          </el-tag>\r\n        </div>\r\n        \r\n        <div v-if=\"keyError\" class=\"key-error\">\r\n          <el-tag type=\"danger\" size=\"small\">\r\n            {{ keyError }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 设备编号输入区域 -->\r\n      <div class=\"device-input-section\">\r\n        <div class=\"device-input-row\">\r\n          <el-input\r\n            v-model=\"deviceId\"\r\n            placeholder=\"设备编号（格式：数字或字母组合，例：4371-01、ABC-12，默认为0000-00）\"\r\n            style=\"width: 300px;\"\r\n            clearable\r\n            @blur=\"validateDeviceIdFormat\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><Monitor /></el-icon>\r\n            </template>\r\n          </el-input>\r\n          \r\n          <el-button \r\n            type=\"primary\" \r\n            plain \r\n            @click=\"autoFillKey\"\r\n            :disabled=\"!deviceId.trim()\"\r\n          >\r\n            自动填充密钥\r\n          </el-button>\r\n        </div>\r\n        \r\n        <div v-if=\"deviceIdError\" class=\"device-error\">\r\n          <el-tag type=\"danger\" size=\"small\">\r\n            {{ deviceIdError }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <div class=\"upload-actions\">\r\n          <el-button @click=\"showUploadDialog = false\" :disabled=\"uploading\">取消</el-button>\r\n          <el-button \r\n            type=\"primary\" \r\n            @click=\"submitUpload\" \r\n            :loading=\"uploading\"\r\n            :disabled=\"uploading || !canSubmitUpload || uploadFileList.length === 0\"\r\n          >\r\n            {{ uploading ? '上传中...' : '上传并解析' }}\r\n          </el-button>\r\n        </div>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 日志查看弹窗 -->\r\n    <el-dialog v-model=\"showEntriesDialog\" title=\"日志查看\" width=\"900px\">\r\n      <el-table :data=\"logEntries\" style=\"width: 100%\">\r\n        <el-table-column prop=\"timestamp\" label=\"时间戳\" width=\"180\" />\r\n        <el-table-column prop=\"error_code\" label=\"故障码\" width=\"100\" />\r\n        <el-table-column prop=\"param1\" label=\"参数1\" width=\"100\" />\r\n        <el-table-column prop=\"param2\" label=\"参数2\" width=\"100\" />\r\n        <el-table-column prop=\"param3\" label=\"参数3\" width=\"100\" />\r\n        <el-table-column prop=\"param4\" label=\"参数4\" width=\"100\" />\r\n        <el-table-column prop=\"explanation\" label=\"日志解释\" />\r\n      </el-table>\r\n    </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onUnmounted, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport { Search, Monitor, Refresh, Upload, Key, Document, UploadFilled, Delete, Warning, InfoFilled, Filter } from '@element-plus/icons-vue'\r\nimport websocketClient from '@/services/websocketClient'\r\nimport api from '@/api'\r\nimport { visualizeSurgery as visualizeSurgeryData } from '@/utils/visualizationHelper'\r\n\r\nexport default {\r\n  name: 'Logs',\r\n  components: {\r\n  },\r\n  setup() {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    \r\n    // 响应式数据\r\n    const loading = ref(false)\r\n    const uploading = ref(false) // 仅表示\"文件上传阶段\"\r\n    const showUploadDialog = ref(false)\r\n    const overallProgress = ref(0) // 总体进度\r\n    const processingStatus = ref('') // 处理状态\r\n    const uploadRef = ref(null)\r\n    const keyUploadRef = ref(null)\r\n    const currentPage = ref(1)\r\n    const pageSize = ref(20)\r\n    const showNameFilterPanel = ref(false)\r\n    const showDeviceFilterPanel = ref(false)\r\n    const nameTimePrefix = ref('')\r\n    const deviceFilterValue = ref('')\r\n    \r\n    // 设备分组相关数据\r\n    const deviceGroups = ref([])\r\n    const deviceTotal = ref(0)\r\n    const showDeviceDetailDrawer = ref(false)\r\n    const selectedDevice = ref(null)\r\n    const detailLogs = ref([])\r\n    const detailLoading = ref(false)\r\n    const lastDetailLogsLoadAt = ref(0)\r\n    let detailReloadTimer = null\r\n    const detailCurrentPage = ref(1)\r\n    const detailPageSize = ref(20)\r\n    const detailTotal = ref(0)\r\n    const selectedDetailLogs = ref([])\r\n    const showDetailNameFilterPanel = ref(false)\r\n    const detailNameTimePrefix = ref('')\r\n    const detailOnlyOwn = ref(false)\r\n    const dateShortcuts = ref([\r\n      {\r\n        text: '本年',\r\n        value: () => {\r\n          const start = new Date(new Date().getFullYear(), 0, 1, 0, 0, 0)\r\n          const end = new Date(new Date().getFullYear(), 11, 31, 23, 59, 59)\r\n          return [start, end]\r\n        }\r\n      },\r\n      {\r\n        text: '本月',\r\n        value: () => {\r\n          const now = new Date()\r\n          const start = new Date(now.getFullYear(), now.getMonth(), 1, 0, 0, 0)\r\n          const end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59)\r\n          return [start, end]\r\n        }\r\n      },\r\n      {\r\n        text: '今天',\r\n        value: () => {\r\n          const now = new Date()\r\n          const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0)\r\n          const end = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59)\r\n          return [start, end]\r\n        }\r\n      }\r\n    ])\r\n    const decryptKey = ref('') // 密钥输入\r\n    const keyFileName = ref('') // 密钥文件名\r\n    const deviceId = ref('') // 设备编号\r\n    const filterDeviceId = ref('') // 筛选设备编号\r\n    const uploadFileList = ref([]) // 手动跟踪上传文件列表\r\n    const keyError = ref('') // 密钥格式错误提示\r\n    const deviceIdError = ref('') // 设备编号格式错误提示\r\n    const uploadDeviceId = ref('') // 上传时的设备编号\r\n    const isDeviceUpload = ref(false) // 标记是否为设备操作上传模式\r\n    const currentUploadDeviceId = ref('') // 当前上传的设备编号，用于自动展开\r\n    \r\n\r\n    \r\n\r\n    \r\n    // 计算属性\r\n    const logs = computed(() => Array.isArray(store.getters['logs/logsList']) ? store.getters['logs/logsList'] : [])\r\n    const total = computed(() => store.getters['logs/totalCount'])\r\n    \r\n    // WebSocket 状态相关计算属性\r\n    const websocketStatusTitle = computed(() => {\r\n      const status = websocketClient.getConnectionStatus()\r\n      if (status === 'connected') {\r\n        return '实时状态监控已启用'\r\n      } else if (status === 'connecting') {\r\n        return '正在连接实时监控...'\r\n      } else {\r\n        return '实时状态监控未连接'\r\n      }\r\n    })\r\n    \r\n    const websocketStatusType = computed(() => {\r\n      const status = websocketClient.getConnectionStatus()\r\n      if (status === 'connected') {\r\n        return 'success'\r\n      } else if (status === 'connecting') {\r\n        return 'warning'\r\n      } else {\r\n        return 'error'\r\n      }\r\n    })\r\n    \r\n    const websocketStatusDescription = computed(() => {\r\n      const status = websocketClient.getConnectionStatus()\r\n      if (status === 'connected') {\r\n        const deviceId = selectedDevice.value?.device_id\r\n        if (deviceId && websocketClient.getSubscribedDevices().includes(deviceId)) {\r\n          return `已订阅设备 ${deviceId} 的状态更新，日志状态变化时将自动刷新`\r\n        } else {\r\n          return 'WebSocket 连接正常，等待订阅设备'\r\n        }\r\n      } else if (status === 'connecting') {\r\n        return '正在尝试连接 WebSocket 服务器，请稍候...'\r\n      } else {\r\n        return '无法连接到 WebSocket 服务器，将无法接收实时状态更新'\r\n      }\r\n    })\r\n    const uploadUrl = computed(() => '/api/logs/upload')\r\n    const uploadHeaders = computed(() => ({\r\n      Authorization: `Bearer ${store.state.auth.token}`,\r\n      'X-Decrypt-Key': decryptKey.value, // 添加密钥到请求头\r\n      'X-Device-ID': uploadDeviceId.value || deviceId.value // 添加设备编号到请求头\r\n    }))\r\n    \r\n    // 判断是否可以提交上传\r\n    const canSubmitUpload = computed(() => {\r\n      // 如果是设备操作上传模式，则只需要有设备编号\r\n      if (isDeviceUpload.value && uploadDeviceId.value) {\r\n        return true\r\n      }\r\n      // 如果是普通上传模式，需要同时有密钥和设备编号\r\n      if (!isDeviceUpload.value) {\r\n        return decryptKey.value.trim() && deviceId.value.trim()\r\n      }\r\n      return false\r\n    })\r\n    \r\n    // 详细日志列表相关计算属性\r\n    const canBatchView = computed(() => {\r\n      return selectedDetailLogs.value.length > 0 && \r\n             selectedDetailLogs.value.every(log => canView(log)) &&\r\n             selectedDetailLogs.value.every(log => log.status === 'parsed')\r\n    })\r\n    \r\n    const canBatchDownload = computed(() => {\r\n      return selectedDetailLogs.value.length > 0 && \r\n             selectedDetailLogs.value.every(log => canDownload(log)) &&\r\n             selectedDetailLogs.value.every(log => log.status === 'parsed')\r\n    })\r\n    \r\n    const canBatchReparse = computed(() => {\r\n      return selectedDetailLogs.value.length > 0 && \r\n             selectedDetailLogs.value.every(log => canReparseLog(log)) &&\r\n             selectedDetailLogs.value.every(log => log.status === 'parsed' || log.status === 'parse_failed')\r\n    })\r\n    \r\n    const canBatchDelete = computed(() => {\r\n      return selectedDetailLogs.value.length > 0 && \r\n             selectedDetailLogs.value.every(log => canDeleteLog(log)) &&\r\n             selectedDetailLogs.value.every(log => \r\n               log.status === 'parsed' || \r\n               log.status === 'decrypt_failed' || \r\n               log.status === 'parse_failed' ||\r\n               log.status === 'file_error' ||\r\n               log.status === 'failed' ||\r\n               log.status === 'queue_failed' ||\r\n               log.status === 'upload_failed' ||\r\n               log.status === 'delete_failed'\r\n             )\r\n    })\r\n    \r\n    const isSameDevice = computed(() => {\r\n      if (selectedDetailLogs.value.length === 0) return true\r\n      const firstDeviceId = selectedDetailLogs.value[0].device_id\r\n      return selectedDetailLogs.value.every(log => log.device_id === firstDeviceId)\r\n    })\r\n    \r\n    const deviceCheckMessage = computed(() => {\r\n      if (selectedDetailLogs.value.length === 0) return ''\r\n      if (!isSameDevice.value) {\r\n        const deviceIds = [...new Set(selectedDetailLogs.value.map(log => log.device_id))]\r\n        return `选中日志包含不同的设备: ${deviceIds.join(', ')}`\r\n      }\r\n      return ''\r\n    })\r\n    \r\n    const hasIncompleteLogs = computed(() => {\r\n      return selectedDetailLogs.value.some(log => \r\n        log.status !== 'parsed' && \r\n        log.status !== 'failed' && \r\n        log.status !== 'decrypt_failed' && \r\n        log.status !== 'parse_failed' && \r\n        log.status !== 'file_error' &&\r\n        log.status !== 'queue_failed' &&\r\n        log.status !== 'upload_failed' &&\r\n        log.status !== 'delete_failed'\r\n      )\r\n    })\r\n    \r\n    const incompleteLogsMessage = computed(() => {\r\n      if (selectedDetailLogs.value.length === 0) return ''\r\n      if (hasIncompleteLogs.value) {\r\n        const incompleteCount = selectedDetailLogs.value.filter(log => \r\n          log.status !== 'parsed' && \r\n          log.status !== 'failed' && \r\n          log.status !== 'decrypt_failed' && \r\n          log.status !== 'parse_failed' && \r\n          log.status !== 'file_error' &&\r\n          log.status !== 'queue_failed' &&\r\n          log.status !== 'upload_failed' &&\r\n          log.status !== 'delete_failed'\r\n        ).length\r\n        return `选中的日志中有 ${incompleteCount} 个未完成解析，请等待解析完成后再操作`\r\n      }\r\n      return ''\r\n    })\r\n    \r\n    // 权限相关计算属性\r\n    const userRole = computed(() => store.state.auth.user?.role_id)\r\n    const userId = computed(() => store.state.auth.user?.id)\r\n    \r\n\r\n    \r\n    // 检查是否可以删除日志\r\n    const canDeleteLog = (log) => {\r\n      \r\n      // 管理员可以删除任何日志\r\n      if (userRole.value === 1) return true\r\n      // 专家可以删除任何日志\r\n      if (userRole.value === 2) return true\r\n      // 普通用户只能删除自己上传的日志\r\n      if (userRole.value === 3) {\r\n        return log.uploader_id === userId.value\r\n      }\r\n      return false\r\n    }\r\n    \r\n    // 方法\r\n    const deviceGroupsLoading = ref(false)\r\n    const lastDeviceGroupsLoadAt = ref(0)\r\n    const loadDeviceGroups = async (options = {}) => {\r\n      const silent = options && options.silent === true\r\n      const force = options && options.force === true\r\n      const now = Date.now()\r\n      if (!force && now - lastDeviceGroupsLoadAt.value < 2000) {\r\n        console.log('跳过设备分组加载（节流）')\r\n        return\r\n      }\r\n      if (!force && deviceGroupsLoading.value) {\r\n        console.log('跳过设备分组加载（去重）')\r\n        return\r\n      }\r\n      try {\r\n        deviceGroupsLoading.value = true\r\n        lastDeviceGroupsLoadAt.value = now\r\n        const timeParams = buildTimeParams()\r\n        const response = await store.dispatch('logs/fetchLogsByDevice', {\r\n          ...timeParams,\r\n          page: currentPage.value,\r\n          limit: pageSize.value,\r\n          device_filter: deviceFilterValue.value.trim()\r\n        })\r\n        \r\n        deviceGroups.value = response.data.device_groups || []\r\n        deviceTotal.value = response.data.pagination?.total || 0\r\n      } catch (error) {\r\n        if (!silent && !uploading.value) {\r\n        ElMessage.error('加载设备分组失败')\r\n        } else {\r\n          console.warn('加载设备分组失败(已静默):', error?.message || error)\r\n        }\r\n      } finally {\r\n        deviceGroupsLoading.value = false\r\n      }\r\n    }\r\n    \r\n    const loadLogs = async () => {\r\n      try {\r\n        loading.value = true\r\n        const timeParams = buildTimeParams()\r\n        await store.dispatch('logs/fetchLogs', {\r\n          page: currentPage.value,\r\n          limit: pageSize.value,\r\n          device_id: filterDeviceId.value || undefined,\r\n          ...timeParams\r\n        })\r\n      } catch (error) {\r\n        ElMessage.error('加载日志失败')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // 设备详情相关方法\r\n    const showDeviceDetail = (device) => {\r\n      selectedDevice.value = device\r\n      showDeviceDetailDrawer.value = true\r\n      \r\n      // 订阅设备状态更新\r\n      if (device && device.device_id) {\r\n        console.log('准备订阅设备状态更新:', device.device_id)\r\n        const subscribed = websocketClient.subscribeToDevice(device.device_id)\r\n        if (subscribed) {\r\n          console.log('✅ 设备订阅成功:', device.device_id)\r\n        } else {\r\n          console.warn('⚠️ 设备订阅失败:', device.device_id)\r\n        }\r\n      }\r\n      \r\n      loadDetailLogs({ force: true })\r\n    }\r\n    \r\n    const loadDetailLogs = async (options = {}) => {\r\n      if (!selectedDevice.value) return\r\n      const silent = options && options.silent === true\r\n      const force = options && options.force === true\r\n      const now = Date.now()\r\n      if (!force && now - lastDetailLogsLoadAt.value < 800) {\r\n        if (!detailReloadTimer) {\r\n          detailReloadTimer = setTimeout(() => {\r\n            detailReloadTimer = null\r\n            loadDetailLogs({ force: true, silent: true })\r\n          }, 300)\r\n        }\r\n        return\r\n      }\r\n      if (!force && detailLoading.value) {\r\n        if (!detailReloadTimer) {\r\n          detailReloadTimer = setTimeout(() => {\r\n            detailReloadTimer = null\r\n            loadDetailLogs({ force: true, silent: true })\r\n          }, 300)\r\n        }\r\n        return\r\n      }\r\n      try {\r\n        detailLoading.value = true\r\n        lastDetailLogsLoadAt.value = now\r\n        const timeParams = buildDetailTimeParams()\r\n        await store.dispatch('logs/fetchLogs', {\r\n          page: detailCurrentPage.value,\r\n          limit: detailPageSize.value,\r\n          device_id: selectedDevice.value.device_id,\r\n          ...timeParams\r\n        })\r\n        detailLogs.value = logs.value\r\n        detailTotal.value = total.value\r\n      } catch (error) {\r\n        if (!silent) ElMessage.error('加载设备详细日志失败')\r\n      } finally {\r\n        detailLoading.value = false\r\n      }\r\n    }\r\n    \r\n    const buildDetailTimeParams = () => {\r\n      const tp = (detailNameTimePrefix.value || '').trim()\r\n      if (tp && /^[0-9]{4}(?:[0-9]{2}){0,3}$/.test(tp)) {\r\n        return { time_prefix: tp, only_own: detailOnlyOwn.value || undefined }\r\n      }\r\n      return { only_own: detailOnlyOwn.value || undefined }\r\n    }\r\n    \r\n    const handleDrawerClose = () => {\r\n      showDeviceDetailDrawer.value = false\r\n      \r\n      // 取消订阅设备状态更新\r\n      if (selectedDevice.value && selectedDevice.value.device_id) {\r\n        websocketClient.unsubscribeFromDevice(selectedDevice.value.device_id)\r\n      }\r\n      \r\n      selectedDevice.value = null\r\n      selectedDetailLogs.value = []\r\n      \r\n      // 清理智能状态监控\r\n      if (window.smartStatusMonitorCleanup) {\r\n        window.smartStatusMonitorCleanup()\r\n        window.smartStatusMonitorCleanup = null\r\n      }\r\n    }\r\n    \r\n    const uploadLogForDevice = async (device) => {\r\n      // 设置为设备上传模式\r\n      isDeviceUpload.value = true\r\n      uploadDeviceId.value = device.device_id\r\n      console.log('设置设备编号:', uploadDeviceId.value)\r\n      \r\n      // 自动填充设备编号到输入框（用于显示）\r\n      deviceId.value = device.device_id\r\n      \r\n      // 尝试自动获取该设备的密钥\r\n      try {\r\n        const response = await store.dispatch('logs/autoFillKey', device.device_id)\r\n        if (response.data.key) {\r\n          decryptKey.value = response.data.key\r\n          console.log('自动填充密钥:', decryptKey.value)\r\n        } else {\r\n          console.log('未找到设备对应的密钥，需要用户手动输入')\r\n        }\r\n      } catch (error) {\r\n        console.warn('自动获取设备密钥失败:', error.message)\r\n      }\r\n      \r\n      showUploadDialog.value = true\r\n    }\r\n    \r\n    // 普通上传模式（日志解析上侧的日志上传）\r\n    const showNormalUpload = () => {\r\n      // 设置为普通上传模式\r\n      isDeviceUpload.value = false\r\n      // 清空所有输入，确保是空白状态\r\n      uploadDeviceId.value = ''\r\n      deviceId.value = ''\r\n      decryptKey.value = ''\r\n      keyFileName.value = ''\r\n      keyError.value = ''\r\n      deviceIdError.value = ''\r\n      uploadFileList.value = []\r\n      \r\n      showUploadDialog.value = true\r\n    }\r\n    \r\n    const uploadDataForDevice = (device) => {\r\n      ElMessage.info('数据上传功能暂未实现')\r\n    }\r\n    \r\n    const viewSurgeryData = (device) => {\r\n      ElMessage.info('查看手术数据功能暂未实现')\r\n    }\r\n    \r\n    const toggleDeviceFocus = (device) => {\r\n      device.focused = !device.focused\r\n      ElMessage.success(device.focused ? '已关注设备' : '已取消关注')\r\n    }\r\n\r\n    // 手术数据抽屉与数据\r\n    const showSurgeryDrawer = ref(false)\r\n    const surgeryLoading = ref(false)\r\n    const surgeryList = ref([])\r\n    const surgeryPage = ref(1)\r\n    const surgeryPageSize = ref(20)\r\n    const surgeryTotal = ref(0)\r\n\r\n    const openSurgeryDrawer = () => {\r\n      showSurgeryDrawer.value = true\r\n      loadSurgeries()\r\n    }\r\n\r\n    const openSurgeryDrawerForDevice = (device) => {\r\n      selectedDevice.value = device\r\n      showSurgeryDrawer.value = true\r\n      surgeryPage.value = 1\r\n      loadSurgeries()\r\n    }\r\n\r\n    const loadSurgeries = async () => {\r\n      try {\r\n        surgeryLoading.value = true\r\n        const params = {\r\n          device_id: selectedDevice.value?.device_id,\r\n          page: surgeryPage.value,\r\n          limit: surgeryPageSize.value\r\n        }\r\n        const resp = await api.surgeries.list(params)\r\n        surgeryList.value = resp.data?.data || []\r\n        surgeryTotal.value = resp.data?.total || 0\r\n      } catch (e) {\r\n        ElMessage.error('加载手术数据失败')\r\n      } finally {\r\n        surgeryLoading.value = false\r\n      }\r\n    }\r\n\r\n    const viewLogsBySurgery = async (row) => {\r\n      try {\r\n        const resp = await api.surgeries.getLogEntriesByRange(row.id)\r\n        const entries = resp.data?.entries || []\r\n        if (!entries.length) {\r\n          ElMessage.warning('未找到相关日志条目')\r\n          return\r\n        }\r\n        // 将涉及的日志ID聚合，使用批量查看页展示\r\n        const ids = Array.from(new Set(entries.map(e => e.log_id))).filter(Boolean)\r\n        if (!ids.length) {\r\n          ElMessage.warning('未找到相关日志文件')\r\n          return\r\n        }\r\n        const routeData = router.resolve(`/batch-analysis/${ids.join(',')}`)\r\n        window.open(routeData.href, '_blank')\r\n      } catch (e) {\r\n        ElMessage.error('获取手术相关日志失败')\r\n      }\r\n    }\r\n\r\n    const visualizeSurgery = (row) => {\r\n      // 使用统一的可视化函数\r\n      visualizeSurgeryData(row, { queryId: row.id })\r\n    }\r\n\r\n    const deleteSurgery = async (row) => {\r\n      try {\r\n        await api.surgeries.remove(row.id)\r\n        ElMessage.success('删除成功')\r\n        loadSurgeries()\r\n      } catch (e) {\r\n        ElMessage.error('删除失败')\r\n      }\r\n    }\r\n    \r\n    // 详细日志列表相关方法\r\n    const handleDetailSelectionChange = (selection) => {\r\n      // 检查选择数量限制\r\n      if (selection.length > 20) {\r\n        // 限制选择数量为20个\r\n        const limitedSelection = selection.slice(0, 20)\r\n        selectedDetailLogs.value = limitedSelection\r\n        \r\n        // 显示提示信息\r\n        ElMessage.warning('批量操作一次最多只能选择20个文件，已自动限制选择数量')\r\n        \r\n        // 更新表格选择状态（需要手动设置）\r\n        nextTick(() => {\r\n          // 清除所有选择\r\n          const table = document.querySelector('.detail-logs-section .el-table')\r\n          if (table) {\r\n            const checkboxes = table.querySelectorAll('.el-table__row .el-checkbox__input')\r\n            checkboxes.forEach((checkbox, index) => {\r\n              const row = detailLogs.value[index]\r\n              if (row && limitedSelection.some(selected => selected.id === row.id)) {\r\n                checkbox.classList.add('is-checked')\r\n                checkbox.setAttribute('aria-checked', 'true')\r\n              } else {\r\n                checkbox.classList.remove('is-checked')\r\n                checkbox.setAttribute('aria-checked', 'false')\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        selectedDetailLogs.value = selection\r\n      }\r\n    }\r\n    \r\n    const clearDetailSelection = () => {\r\n      selectedDetailLogs.value = []\r\n    }\r\n    \r\n    const handleDetailSizeChange = (size) => {\r\n      detailPageSize.value = size\r\n      detailCurrentPage.value = 1\r\n      loadDetailLogs()\r\n    }\r\n    \r\n    const handleDetailCurrentChange = (page) => {\r\n      detailCurrentPage.value = page\r\n      loadDetailLogs()\r\n    }\r\n    \r\n    const applyDetailOnlyOwn = () => {\r\n      detailCurrentPage.value = 1\r\n      loadDetailLogs()\r\n    }\r\n    \r\n    const resetDetailFilters = () => {\r\n      detailNameTimePrefix.value = ''\r\n      detailOnlyOwn.value = false\r\n      detailCurrentPage.value = 1\r\n      loadDetailLogs()\r\n    }\r\n    \r\n    const applyDetailNameFilter = () => {\r\n      detailCurrentPage.value = 1\r\n      showDetailNameFilterPanel.value = false\r\n      loadDetailLogs()\r\n    }\r\n    \r\n    const resetDetailNameFilter = () => {\r\n      detailNameTimePrefix.value = ''\r\n      applyDetailNameFilter()\r\n    }\r\n    \r\n\r\n    \r\n    const handleSizeChange = (size) => {\r\n      pageSize.value = size\r\n      currentPage.value = 1\r\n      loadLogs()\r\n    }\r\n    \r\n    const handleCurrentChange = (page) => {\r\n      currentPage.value = page\r\n      loadLogs()\r\n    }\r\n\r\n    const buildTimeParams = () => {\r\n      const tp = (nameTimePrefix.value || '').trim()\r\n      if (tp && /^[0-9]{4}(?:[0-9]{2}){0,3}$/.test(tp)) {\r\n        return { time_prefix: tp }\r\n      }\r\n      return {}\r\n    }\r\n\r\n    const applyNameFilter = () => {\r\n      currentPage.value = 1\r\n      showNameFilterPanel.value = false\r\n      loadLogs()\r\n    }\r\n    const resetNameFilter = () => {\r\n      nameTimePrefix.value = ''\r\n      applyNameFilter()\r\n    }\r\n\r\n    const applyDeviceFilter = () => {\r\n      currentPage.value = 1\r\n      showDeviceFilterPanel.value = false\r\n      loadDeviceGroups({ force: true }) // 强制加载，跳过节流\r\n    }\r\n    const resetDeviceFilter = () => {\r\n      deviceFilterValue.value = ''\r\n      currentPage.value = 1\r\n      loadDeviceGroups({ force: true }) // 强制加载，跳过节流\r\n    }\r\n    \r\n    // 设备列表分页处理\r\n    const handleDeviceSizeChange = (newSize) => {\r\n      pageSize.value = newSize\r\n      currentPage.value = 1\r\n      loadDeviceGroups({ force: true }) // 强制加载，跳过节流\r\n    }\r\n    \r\n    const handleDeviceCurrentChange = (newPage) => {\r\n      currentPage.value = newPage\r\n      loadDeviceGroups({ force: true }) // 强制加载，跳过节流\r\n    }\r\n\r\n    const resetAllFilters = () => {\r\n      nameTimePrefix.value = ''\r\n      deviceFilterValue.value = ''\r\n      showDeviceFilterPanel.value = false\r\n      currentPage.value = 1\r\n      loadDeviceGroups({ force: true }) // 强制加载，跳过节流\r\n    }\r\n\r\n    \r\n    const submitUpload = () => {\r\n      if (!uploadRef.value) {\r\n        ElMessage.error('上传组件未初始化')\r\n        return\r\n      }\r\n      \r\n      // 使用手动跟踪的文件列表\r\n      if (uploadFileList.value.length === 0) {\r\n        ElMessage.error('请选择要上传的文件')\r\n        return\r\n      }\r\n      \r\n      if (uploadFileList.value.length > 50) {\r\n        ElMessage.error('最多只能上传50个文件')\r\n        return\r\n      }\r\n      \r\n      const totalSize = uploadFileList.value.reduce((sum, f) => sum + (f.size || f.raw?.size || 0), 0)\r\n      if (totalSize / 1024 / 1024 > 200) {\r\n        ElMessage.error('总文件大小不能超过200MB')\r\n        return\r\n      }\r\n      \r\n      // 验证输入（根据模式进行不同验证）\r\n      if (isDeviceUpload.value) {\r\n        // 设备上传模式：只需要验证设备编号存在\r\n        if (!uploadDeviceId.value) {\r\n          ElMessage.error('设备编号不能为空')\r\n          return\r\n        }\r\n      } else {\r\n        // 普通上传模式：需要验证密钥和设备编号\r\n      if (!decryptKey.value.trim()) {\r\n        ElMessage.error('请输入解密密钥或上传密钥文件')\r\n        return\r\n      }\r\n      \r\n      // 验证密钥格式\r\n      const macRegex = /^([0-9A-Fa-f]{2}-){5}[0-9A-Fa-f]{2}$/\r\n      if (!macRegex.test(decryptKey.value)) {\r\n        ElMessage.error('密钥格式不正确，应为MAC地址格式（如：00-01-05-77-6a-09）')\r\n        return\r\n      }\r\n      \r\n      if (!deviceId.value.trim()) {\r\n        ElMessage.warning('请输入设备编号，或使用默认值0000-00')\r\n        return\r\n      }\r\n      \r\n        // 验证设备编号格式\r\n      if (deviceId.value && deviceId.value !== '0000-00') {\r\n        const deviceIdRegex = /^[0-9A-Za-z]+-[0-9A-Za-z]+$/\r\n        if (!deviceIdRegex.test(deviceId.value)) {\r\n          ElMessage.error('设备编号格式不正确，应为数字或字母组合格式（如：4371-01、ABC-12、123-XY）')\r\n          return\r\n        }\r\n        }\r\n      }\r\n      \r\n      // 记录当前上传的设备编号（用于自动展开）\r\n      if (!isDeviceUpload.value) {\r\n        currentUploadDeviceId.value = deviceId.value\r\n      }\r\n      \r\n      uploadRef.value.submit()\r\n      // 点击上传并解析后立即关闭弹窗\r\n      showUploadDialog.value = false\r\n      // 刷新一次设备分组列表，展示最新的\"上传中/处理中\"状态\r\n      loadDeviceGroups()\r\n      \r\n              // 启动智能状态监控（如果详细日志抽屉是打开的）\r\n        startMonitoringIfDrawerOpen()\r\n    }\r\n    \r\n    const beforeUpload = (file) => {\r\n      const isMedbotFile = file.name.endsWith('.medbot')\r\n      const isLt200M = file.size / 1024 / 1024 < 200\r\n      \r\n      if (!isMedbotFile) {\r\n        ElMessage.error('只能上传 .medbot 文件!')\r\n        return false\r\n      }\r\n      if (!isLt200M) {\r\n        ElMessage.error('单个文件大小不能超过200MB!')\r\n        return false\r\n      }\r\n      \r\n      return true\r\n    }\r\n    \r\n    const beforeKeyUpload = (file) => {\r\n      const isTxtFile = file.name.endsWith('.txt')\r\n      const isSystemInfoFile = file.name === 'systemInfo.txt'\r\n      const isLt1M = file.size / 1024 / 1024 < 1\r\n      \r\n      if (!isTxtFile) {\r\n        ElMessage.error('密钥文件必须是 .txt 格式!')\r\n        return false\r\n      }\r\n      if (!isSystemInfoFile) {\r\n        ElMessage.error('密钥文件名必须是 systemInfo.txt!')\r\n        return false\r\n      }\r\n      if (!isLt1M) {\r\n        ElMessage.error('密钥文件大小不能超过1MB!')\r\n        return false\r\n      }\r\n      return false // 阻止自动上传\r\n    }\r\n    \r\n    const onKeyFileChange = (file) => {\r\n      const reader = new FileReader()\r\n      reader.onload = (e) => {\r\n        // 在空闲时验证，避免主线程长时间占用\r\n        scheduleUpdate(() => {\r\n          const content = (e.target.result || '').trim()\r\n          // 验证文件内容是否为MAC地址格式\r\n          const macRegex = /^([0-9A-Fa-f]{2}-){5}[0-9A-Fa-f]{2}$/\r\n          if (!macRegex.test(content)) {\r\n            ElMessage.error('密钥文件内容格式不正确，应为MAC地址格式（如：00-01-05-77-6a-09）')\r\n            return\r\n          }\r\n          decryptKey.value = content\r\n          keyFileName.value = file.name\r\n          keyError.value = '' // 清除错误提示\r\n          ElMessage.success('密钥文件读取成功')\r\n        })\r\n      }\r\n      reader.readAsText(file.raw)\r\n    }\r\n    \r\n    const clearUpload = () => {\r\n      if (uploadRef.value) {\r\n        uploadRef.value.clearFiles()\r\n      }\r\n      if (keyUploadRef.value) {\r\n        keyUploadRef.value.clearFiles()\r\n      }\r\n      uploadFileList.value = []\r\n      \r\n            // 根据模式决定是否清空输入\r\n      if (!isDeviceUpload.value) {\r\n        // 普通上传模式：清空所有输入\r\n        decryptKey.value = ''\r\n        keyFileName.value = ''\r\n        deviceId.value = ''\r\n        uploadDeviceId.value = ''\r\n        keyError.value = ''\r\n        deviceIdError.value = ''\r\n        currentUploadDeviceId.value = '' // 清空当前上传的设备编号\r\n      } else {\r\n        // 设备上传模式：只清空文件，保留设备信息\r\n        keyError.value = ''\r\n        deviceIdError.value = ''\r\n      }\r\n      \r\n      // 重置上传状态和进度\r\n      uploading.value = false\r\n      overallProgress.value = 0\r\n    }\r\n\r\n    // 进度格式化方法\r\n    const progressFormat = (percentage) => {\r\n      if (percentage < 30) {\r\n        return `文件上传中 ${percentage}%`\r\n      } else if (percentage < 60) {\r\n        return `解密处理中 ${percentage}%`\r\n      } else if (percentage < 90) {\r\n        return `解析处理中 ${percentage}%`\r\n      } else if (percentage < 100) {\r\n        return `删除处理中 ${percentage}%`\r\n      } else {\r\n        return `处理完成 ${percentage}%`\r\n      }\r\n    }\r\n\r\n    // 防止页面刷新导致解析中断\r\n    const preventRefresh = () => {\r\n      if (uploading.value) {\r\n        return '解析正在进行中，刷新页面可能导致解析失败。确定要离开吗？'\r\n      }\r\n    }\r\n\r\n    // 监听页面刷新事件和初始化\r\n    onMounted(() => {\r\n      // 确保 Logs 页面加载时建立 WebSocket 连接\r\n      try { websocketClient.connect() } catch (_) {}\r\n      window.addEventListener('beforeunload', preventRefresh)\r\n      \r\n      // 初始化加载设备分组数据\r\n      loadDeviceGroups()\r\n      \r\n      // 监听 WebSocket 状态变化事件\r\n      websocketClient.on('logStatusChange', (data) => {\r\n        console.log('收到日志状态变化:', data)\r\n        \r\n        // 如果状态变为 'deleted'，清除删除中状态\r\n        if (data.newStatus === 'deleted') {\r\n          deletingIds.value.delete(data.logId)\r\n          console.log('清除删除中状态，日志ID:', data.logId)\r\n        }\r\n        \r\n        // 就地更新当前列表中该条目的状态，避免等待二次拉取\r\n        const i = detailLogs.value.findIndex(l => Number(l.id) === Number(data.logId))\r\n        if (i !== -1) {\r\n          detailLogs.value[i] = { ...detailLogs.value[i], status: data.newStatus }\r\n        }\r\n        \r\n        // 如果当前有选中的设备且详细日志抽屉是打开的，自动刷新\r\n        if (selectedDevice.value && \r\n            showDeviceDetailDrawer.value && \r\n            selectedDevice.value.device_id === data.deviceId) {\r\n          \r\n          console.log('WebSocket 状态变化，准备自动刷新详细日志列表')\r\n          // 静默刷新，并通过节流避免过多请求\r\n          loadDetailLogs({ silent: true })\r\n        }\r\n      })\r\n      \r\n      websocketClient.on('batchStatusChange', (data) => {\r\n        console.log('收到批量状态变化:', data)\r\n        \r\n        // 处理批量状态变化中的删除完成状态\r\n        if (data.changes && Array.isArray(data.changes)) {\r\n          data.changes.forEach(change => {\r\n            if (change.newStatus === 'deleted') {\r\n              deletingIds.value.delete(change.logId)\r\n              console.log('批量状态变化：清除删除中状态，日志ID:', change.logId)\r\n            }\r\n            // 就地更新状态\r\n            const i = detailLogs.value.findIndex(l => Number(l.id) === Number(change.logId))\r\n            if (i !== -1) {\r\n              detailLogs.value[i] = { ...detailLogs.value[i], status: change.newStatus }\r\n            }\r\n          })\r\n        }\r\n        \r\n        // 如果当前有选中的设备且详细日志抽屉是打开的，自动刷新\r\n        if (selectedDevice.value && \r\n            showDeviceDetailDrawer.value && \r\n            selectedDevice.value.device_id === data.deviceId) {\r\n          \r\n          console.log('WebSocket 批量状态变化，准备自动刷新详细日志列表')\r\n          // 静默刷新，并通过节流避免过多请求\r\n          loadDetailLogs({ silent: true })\r\n        }\r\n      })\r\n      \r\n      // 添加 WebSocket 连接状态监听，用于更新状态横幅\r\n      const updateWebSocketStatus = () => {\r\n        // 强制触发计算属性重新计算\r\n        nextTick(() => {\r\n          // Vue 会自动重新计算计算属性\r\n        })\r\n      }\r\n      \r\n      // 监听连接状态变化\r\n      websocketClient.on('connection', updateWebSocketStatus)\r\n      websocketClient.on('disconnection', updateWebSocketStatus)\r\n      \r\n      // 添加状态更新定时器，确保状态横幅实时更新\r\n      const statusUpdateTimer = setInterval(() => {\r\n        // 强制触发计算属性重新计算\r\n        nextTick(() => {\r\n          // Vue 会自动重新计算计算属性\r\n        })\r\n      }, 1000) // 每秒更新一次\r\n      \r\n      // 清理定时器\r\n      onUnmounted(() => {\r\n        if (statusUpdateTimer) {\r\n          clearInterval(statusUpdateTimer)\r\n        }\r\n      })\r\n    })\r\n    \r\n    const onUploadProgress = (event, file, fileList) => {\r\n      // 进入文件上传阶段\r\n      uploading.value = true\r\n      // 上传进度处理，显示文件上传阶段（占总进度的30%）\r\n      const uploadProgress = Math.floor(event.percent * 0.3) // 上传占30%\r\n      overallProgress.value = uploadProgress\r\n      \r\n    }\r\n\r\n    const onUploadSuccess = (response, file, fileList) => {\r\n      console.log('上传成功:', response)\r\n      \r\n      // 更新手动跟踪的文件列表\r\n      updateUploadFileList(fileList)\r\n      \r\n      // 检查是否所有文件都上传完成\r\n      const allUploaded = fileList.length > 0 && fileList.every(f => f.status === 'success')\r\n      if (allUploaded) {\r\n        // 所有文件上传完成，开始解密和解析阶段\r\n        uploading.value = false\r\n        overallProgress.value = 30 // 上传完成，进度到30%\r\n        processingStatus.value = '文件已上传，等待处理...'\r\n        \r\n        // 如果是普通上传模式（非设备操作上传），自动展开对应设备的详细日志列表\r\n        if (!isDeviceUpload.value && currentUploadDeviceId.value && currentUploadDeviceId.value !== '0000-00') {\r\n          // 延迟一下，确保设备列表已更新\r\n          setTimeout(async () => {\r\n            try {\r\n              // 重新加载设备列表（静默）\r\n              await loadDeviceGroups({ silent: true })\r\n              \r\n              // 查找对应的设备\r\n              const targetDevice = deviceGroups.value.find(device => device.device_id === currentUploadDeviceId.value)\r\n              if (targetDevice) {\r\n                console.log('自动展开设备详细日志列表:', targetDevice.device_id)\r\n                showDeviceDetail(targetDevice)\r\n              }\r\n            } catch (error) {\r\n              console.warn('自动展开设备详细日志列表失败:', error)\r\n            }\r\n          }, 1000) // 延迟1秒，确保后端处理完成\r\n        }\r\n        \r\n        // 启动智能状态监控（如果详细日志抽屉是打开的）\r\n        startMonitoringIfDrawerOpen()\r\n        \r\n        // 开始状态监控\r\n        startStatusMonitoring()\r\n\r\n        // 清空已选择的上传文件（不影响输入框内容）\r\n        try {\r\n          if (uploadRef.value && uploadRef.value.clearFiles) {\r\n            uploadRef.value.clearFiles()\r\n          }\r\n        } catch (_) {}\r\n        uploadFileList.value = []\r\n      }\r\n    }\r\n    \r\n    // 智能状态变化检测和更新\r\n    const checkAndUpdateDetailLogs = async () => {\r\n      if (!selectedDevice.value || !showDeviceDetailDrawer.value) return\r\n      \r\n      try {\r\n        // 获取当前详细日志列表的状态快照\r\n        const currentStatusSnapshot = detailLogs.value.map(log => ({\r\n          id: log.id,\r\n          status: log.status,\r\n          updated_at: log.updated_at\r\n        }))\r\n        \r\n        // 重新加载详细日志列表\r\n        await loadDetailLogs()\r\n        \r\n        // 检查是否有状态变化\r\n        const hasStatusChange = detailLogs.value.some((log, index) => {\r\n          const oldLog = currentStatusSnapshot[index]\r\n          return oldLog && (\r\n            oldLog.status !== log.status ||\r\n            oldLog.updated_at !== log.updated_at\r\n          )\r\n        })\r\n        \r\n        if (hasStatusChange) {\r\n          console.log('检测到日志状态变化，已自动刷新详细日志列表')\r\n        }\r\n        \r\n        return hasStatusChange\r\n      } catch (error) {\r\n        console.error('检查日志状态变化失败:', error)\r\n        return false\r\n      }\r\n    }\r\n    \r\n    // 智能状态监控函数\r\n    const startSmartStatusMonitoring = () => {\r\n      // 取消详细列表的轮询，完全依赖 WebSocket 事件触发刷新\r\n      return () => {}\r\n    }\r\n    \r\n    // 通用函数：启动智能状态监控（如果详细日志抽屉是打开的）\r\n    const startMonitoringIfDrawerOpen = () => {\r\n      if (selectedDevice.value && showDeviceDetailDrawer.value) {\r\n        // 清理之前的监控\r\n        if (window.smartStatusMonitorCleanup) {\r\n          window.smartStatusMonitorCleanup()\r\n        }\r\n        // 启动新的监控\r\n        window.smartStatusMonitorCleanup = startSmartStatusMonitoring()\r\n        console.log('已启动智能状态监控')\r\n        \r\n        // 订阅设备状态更新\r\n        if (selectedDevice.value.device_id) {\r\n          console.log('准备订阅设备状态更新:', selectedDevice.value.device_id)\r\n          const subscribed = websocketClient.subscribeToDevice(selectedDevice.value.device_id)\r\n          console.log('设备订阅结果:', subscribed ? '成功' : '失败')\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 状态监控函数\r\n    const startStatusMonitoring = () => {\r\n      // 移除轮询监控，完全依赖 WebSocket 事件更新进度和列表\r\n      return\r\n    }\r\n    \r\n    const onUploadError = (error) => {\r\n      uploading.value = false\r\n      overallProgress.value = 0\r\n      ElMessage.error('上传失败: ' + (error.message || '未知错误'))\r\n    }\r\n    \r\n    const onExceed = (files, fileList) => {\r\n      ElMessage.error('最多只能上传50个文件!')\r\n    }\r\n    \r\n    const onFileChange = (file, fileList) => {\r\n      updateUploadFileList(fileList)\r\n    }\r\n    \r\n    const onFileRemove = (file, fileList) => {\r\n      updateUploadFileList(fileList)\r\n    }\r\n\r\n    // 删除单个文件\r\n    const removeFile = (index) => {\r\n      uploadFileList.value.splice(index, 1)\r\n    }\r\n\r\n    // 空闲时批量更新文件列表并预计算显示字段，减少同步阻塞\r\n    const scheduleUpdate = (fn) => {\r\n      const idle = window.requestIdleCallback || ((cb) => setTimeout(() => cb({ timeRemaining: () => 0 }), 1))\r\n      idle(() => fn())\r\n    }\r\n    const updateUploadFileList = (rawList) => {\r\n      const normalized = (rawList || []).map(f => {\r\n        const size = f.size || f.raw?.size || 0\r\n        const sizeText = formatFileSize(size)\r\n        return { ...f, sizeText }\r\n      })\r\n      scheduleUpdate(() => {\r\n        uploadFileList.value = normalized\r\n      })\r\n    }\r\n    \r\n    const handleParse = async (row) => {\r\n      try {\r\n        row.parsing = true\r\n        await store.dispatch('logs/parseLog', row.id)\r\n        ElMessage.success('解析成功')\r\n        loadLogs()\r\n        \r\n        // 启动智能状态监控，跟踪解析进度\r\n        startMonitoringIfDrawerOpen()\r\n      } catch (error) {\r\n        ElMessage.error('解析失败')\r\n      } finally {\r\n        row.parsing = false\r\n      }\r\n    }\r\n\r\n    const canReparse = computed(() => store.getters['auth/hasPermission']?.('log:reparse'))\r\n\r\n    const handleReparse = async (row) => {\r\n      try {\r\n        if (!canReparse.value) {\r\n          ElMessage.error('仅管理员可重新解析')\r\n          return\r\n        }\r\n        row.parsing = true\r\n        row.status = 'parsing'\r\n        await store.dispatch('logs/reparseLog', row.id)\r\n        ElMessage.success('重新解析完成')\r\n        await loadLogs()\r\n        \r\n        // 启动智能状态监控，跟踪重新解析进度\r\n        startMonitoringIfDrawerOpen()\r\n      } catch (error) {\r\n        const msg = error.response?.data?.message || error.message || '重新解析失败'\r\n        ElMessage.error(msg)\r\n      } finally {\r\n        row.parsing = false\r\n      }\r\n    }\r\n    \r\n    const handleDownload = async (row) => {\r\n      try {\r\n        const response = await store.dispatch('logs/downloadLog', row.id)\r\n        \r\n        // 创建下载链接\r\n        const blob = new Blob([response.data])\r\n        const url = window.URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.download = row.filename\r\n        link.click()\r\n        window.URL.revokeObjectURL(url)\r\n        \r\n        ElMessage.success('下载成功')\r\n      } catch (error) {\r\n        ElMessage.error('下载失败')\r\n      }\r\n    }\r\n    \r\n    // 跟踪删除中ID集合\r\n    const deletingIds = ref(new Set())\r\n\r\n    const isDeleting = (id) => deletingIds.value.has(id)\r\n\r\n    const handleDelete = async (row) => {\r\n      try {\r\n        await ElMessageBox.confirm('确定要删除这个日志文件吗？', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n        \r\n        // 将日志ID添加到删除中状态\r\n        deletingIds.value.add(row.id)\r\n        await nextTick()\r\n        \r\n        try {\r\n          // 调用删除API\r\n          await store.dispatch('logs/deleteLog', row.id)\r\n          \r\n          // 显示队列状态\r\n          ElMessage.success('删除任务已加入队列，正在处理中...')\r\n          \r\n          // 重新加载日志列表以显示\"删除中\"状态\r\n          await loadDetailLogs()\r\n          \r\n          // 启动智能状态监控，跟踪删除进度\r\n          startMonitoringIfDrawerOpen()\r\n          \r\n        } catch (apiError) {\r\n          console.error('删除API调用失败:', apiError)\r\n          const errorMessage = apiError.response?.data?.message || apiError.message || '删除失败'\r\n          ElMessage.error(errorMessage)\r\n          // API调用失败时，清除删除中状态\r\n          deletingIds.value.delete(row.id)\r\n        }\r\n        \r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          console.error('删除确认错误:', error)\r\n          ElMessage.error('删除操作被取消')\r\n        }\r\n      }\r\n    }\r\n\r\n    // 跳转到日志查看页面\r\n    const goToLogAnalysis = (row) => {\r\n      // 在新页面中打开日志查看，使用batch-analysis路由\r\n      const routeData = router.resolve(`/batch-analysis/${row.id}`)\r\n      window.open(routeData.href, '_blank')\r\n    }\r\n    \r\n    const formatFileSize = (bytes) => {\r\n      if (bytes === 0) return '0 B'\r\n      const k = 1024\r\n      const sizes = ['B', 'KB', 'MB', 'GB']\r\n      const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\r\n    }\r\n    \r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '-'\r\n      return new Date(dateString).toLocaleString('zh-CN')\r\n    }\r\n    \r\n    // 行状态：根据需求映射显示文字\r\n    const getRowStatusType = (row) => {\r\n      if (deletingIds.value.has(row.id)) return 'warning'\r\n      const map = {\r\n        uploading: 'warning',\r\n        queued: 'info',\r\n        decrypting: 'warning',\r\n        parsing: 'warning',\r\n        parsed: 'success',\r\n        failed: 'danger',\r\n        decrypt_failed: 'danger',\r\n        parse_failed: 'danger',\r\n        file_error: 'danger',\r\n        deleting: 'warning'  // 新增删除中状态\r\n      }\r\n      return map[row.status] || 'info'\r\n    }\r\n    const getRowStatusText = (row) => {\r\n      if (deletingIds.value.has(row.id)) return '删除中'\r\n      \r\n      // 根据状态返回对应的文本\r\n      const map = {\r\n        uploading: '日志上传中',\r\n        queued: '等待处理中',\r\n        decrypting: '解密中',\r\n        parsing: '解析中',\r\n        parsed: '完成',\r\n        decrypt_failed: '解密失败',\r\n        parse_failed: '解析失败',\r\n        file_error: '文件错误',\r\n        failed: '处理失败',\r\n        deleting: '删除中'  // 新增删除中状态\r\n      }\r\n      \r\n      return map[row.status] || (row.status || '-')\r\n    }\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    // 批量查看\r\n    const handleBatchAnalyze = () => {\r\n      const logIds = selectedDetailLogs.value.map(log => log.id).join(',')\r\n      // 在新页面中打开批量查看\r\n      const routeData = router.resolve(`/batch-analysis/${logIds}`)\r\n      window.open(routeData.href, '_blank')\r\n    }\r\n    \r\n    // 批量下载\r\n    const handleBatchDownload = async () => {\r\n      try {\r\n        ElMessage.info('正在打包文件，请稍候...')\r\n        \r\n        const logIds = selectedDetailLogs.value.map(log => log.id)\r\n        const response = await store.dispatch('logs/batchDownloadLogs', logIds)\r\n        \r\n        // 创建下载链接\r\n        const blob = new Blob([response.data])\r\n        const url = window.URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        \r\n        // 生成ZIP文件名\r\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-')\r\n        link.download = `logs_batch_${timestamp}.zip`\r\n        \r\n        link.click()\r\n        window.URL.revokeObjectURL(url)\r\n        \r\n        ElMessage.success('批量下载完成')\r\n      } catch (error) {\r\n        console.error('批量下载失败:', error)\r\n        const errorMessage = error.response?.data?.message || error.message || '批量下载失败'\r\n        ElMessage.error(errorMessage)\r\n      }\r\n    }\r\n    \r\n    // 批量删除\r\n    const handleBatchDelete = async () => {\r\n      try {\r\n        // 检查是否有未完成的日志\r\n        if (hasIncompleteLogs.value) {\r\n          ElMessage.warning('请等待所有选中的日志解析完成后再进行删除操作')\r\n          return\r\n        }\r\n        \r\n        await ElMessageBox.confirm(\r\n          `确定要删除选中的 ${selectedDetailLogs.value.length} 个日志文件吗？此操作不可恢复！`, \r\n          '批量删除确认', \r\n          {\r\n            confirmButtonText: '确定删除',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }\r\n        )\r\n        \r\n        // 保存选中的日志数据，避免在验证过程中被清空\r\n        const selectedLogsData = [...selectedDetailLogs.value]\r\n        const logIds = selectedLogsData.map(log => parseInt(log.id)).filter(id => !isNaN(id))\r\n        \r\n        if (logIds.length === 0) {\r\n          ElMessage.error('选中的日志ID格式不正确')\r\n          return\r\n        }\r\n        \r\n        // 将选中的日志ID添加到删除中状态\r\n        logIds.forEach(id => deletingIds.value.add(id))\r\n        await nextTick()\r\n        \r\n        // 执行批量删除\r\n        try {\r\n          await store.dispatch('logs/batchDeleteLogs', logIds)\r\n          \r\n          // 显示队列状态\r\n          ElMessage.success('批量删除任务已加入队列，正在处理中...')\r\n          \r\n          // 清除删除中状态，因为任务已加入队列\r\n          logIds.forEach(id => deletingIds.value.delete(id))\r\n          \r\n          // 重新加载详细日志列表以显示\"删除中\"状态\r\n          await loadDetailLogs()\r\n          \r\n          // 启动智能状态监控，跟踪删除进度\r\n          startMonitoringIfDrawerOpen()\r\n          \r\n          clearDetailSelection() // 清空选择\r\n        } catch (apiError) {\r\n          console.error('批量删除失败:', apiError)\r\n          const errorMessage = apiError.response?.data?.message || apiError.message || '批量删除失败'\r\n          ElMessage.error(errorMessage)\r\n          // 删除失败时，清除删除中状态\r\n          logIds.forEach(id => deletingIds.value.delete(id))\r\n        }\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          console.error('批量删除错误:', error)\r\n          console.error('错误详情:', {\r\n            name: error.name,\r\n            message: error.message,\r\n            code: error.code,\r\n            response: error.response?.data,\r\n            status: error.response?.status,\r\n            statusText: error.response?.statusText,\r\n            config: {\r\n              url: error.config?.url,\r\n              method: error.config?.method,\r\n              data: error.config?.data\r\n            }\r\n          })\r\n          \r\n          let errorMessage = '批量删除失败'\r\n          if (error.response?.data?.message) {\r\n            errorMessage = error.response.data.message\r\n          } else if (error.message) {\r\n            errorMessage = error.message\r\n          }\r\n          \r\n          ElMessage.error(errorMessage)\r\n        }\r\n      }\r\n    }\r\n\r\n    // 批量重新解析（仅管理员）\r\n    const handleBatchReparse = async () => {\r\n      try {\r\n        if (!canReparse.value) {\r\n          ElMessage.error('仅管理员可批量重新解析')\r\n          return\r\n        }\r\n        if (!selectedDetailLogs.value.length) {\r\n          ElMessage.warning('请先选择要重新解析的日志')\r\n          return\r\n        }\r\n        // 检查是否有未完成的日志\r\n        if (hasIncompleteLogs.value) {\r\n          ElMessage.warning('请等待所有选中的日志解析完成后再进行重新解析操作')\r\n          return\r\n        }\r\n        await ElMessageBox.confirm(\r\n          `确定对选中的 ${selectedDetailLogs.value.length} 个日志重新解析释义吗？`,\r\n          '批量重新解析确认',\r\n          { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }\r\n        )\r\n        const ids = selectedDetailLogs.value.map(l => l.id)\r\n        // 订阅所有涉及设备，确保能收到各设备的状态更新\r\n        const deviceIdsToSubscribe = Array.from(new Set(selectedDetailLogs.value.map(l => l.device_id).filter(Boolean)))\r\n        deviceIdsToSubscribe.forEach(d => {\r\n          try { websocketClient.subscribeToDevice(d) } catch (_) {}\r\n        })\r\n        // 乐观更新状态\r\n        selectedDetailLogs.value.forEach(l => { l.status = 'parsing' })\r\n        await store.dispatch('logs/batchReparseLogs', ids)\r\n        await loadDetailLogs()\r\n        \r\n        // 启动智能状态监控，跟踪重新解析进度\r\n        startMonitoringIfDrawerOpen()\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          const msg = error.response?.data?.message || error.message || '批量重新解析失败'\r\n          ElMessage.error(msg)\r\n        }\r\n      }\r\n    }\r\n    \r\n\r\n    \r\n\r\n    \r\n    // 格式化时间戳\r\n    const formatTimestamp = (timestamp) => {\r\n      if (!timestamp) return '-'\r\n      const date = new Date(timestamp)\r\n      const year = date.getFullYear()\r\n      const month = String(date.getMonth() + 1).padStart(2, '0')\r\n      const day = String(date.getDate()).padStart(2, '0')\r\n      const hours = String(date.getHours()).padStart(2, '0')\r\n      const minutes = String(date.getMinutes()).padStart(2, '0')\r\n      const seconds = String(date.getSeconds()).padStart(2, '0')\r\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n    }\r\n\r\n    // 检查是否可以操作日志（完成状态或失败状态都可以操作）\r\n    const canOperate = (log) => {\r\n      return log.status === 'parsed' || \r\n             log.status === 'failed' || \r\n             log.status === 'decrypt_failed' || \r\n             log.status === 'parse_failed' || \r\n             log.status === 'file_error' ||\r\n             log.status === 'queue_failed' ||\r\n             log.status === 'upload_failed' ||\r\n             log.status === 'delete_failed'\r\n    }\r\n    \r\n    // 检查是否可以查看日志（只有完成状态的文件可以查看）\r\n    const canView = (log) => {\r\n      return log.status === 'parsed'\r\n    }\r\n    \r\n    // 检查是否可以下载日志（只有完成状态的文件可以下载）\r\n    const canDownload = (log) => {\r\n      return log.status === 'parsed'\r\n    }\r\n    \r\n    // 检查是否可以重新解析（完成状态和解析失败的文件可以重新解析）\r\n    const canReparseLog = (log) => {\r\n      return log.status === 'parsed' || log.status === 'parse_failed'\r\n    }\r\n    \r\n\r\n    \r\n\r\n    \r\n    // 自动填充密钥\r\n    const autoFillKey = async () => {\r\n      try {\r\n        const response = await store.dispatch('logs/autoFillKey', deviceId.value)\r\n        if (response.data.key) {\r\n          decryptKey.value = response.data.key\r\n          ElMessage.success('已自动填充密钥')\r\n        } else {\r\n          ElMessage.warning('未找到该设备编号对应的密钥')\r\n        }\r\n      } catch (error) {\r\n        console.error('自动填充密钥错误:', error)\r\n        const errorMessage = error.response?.data?.message || error.message || '自动填充密钥失败'\r\n        ElMessage.error(errorMessage)\r\n      }\r\n    }\r\n\r\n    // 验证密钥格式\r\n    const validateKeyFormat = () => {\r\n      const macRegex = /^([0-9A-Fa-f]{2}-){5}[0-9A-Fa-f]{2}$/\r\n      if (decryptKey.value && !macRegex.test(decryptKey.value)) {\r\n        keyError.value = '请输入有效的MAC地址格式密钥 (如: 00-01-05-77-6a-09)'\r\n      } else {\r\n        keyError.value = ''\r\n      }\r\n    }\r\n\r\n    // 自动填充设备编号\r\n    const autoFillDeviceId = async () => {\r\n      try {\r\n        const response = await store.dispatch('logs/autoFillDeviceId', decryptKey.value)\r\n        if (response.data.device_id) {\r\n          deviceId.value = response.data.device_id\r\n          ElMessage.success('已自动填充设备编号')\r\n        } else {\r\n          ElMessage.warning('未找到该密钥对应的设备编号')\r\n        }\r\n      } catch (error) {\r\n        console.error('自动填充设备编号错误:', error)\r\n        const errorMessage = error.response?.data?.message || error.message || '自动填充设备编号失败'\r\n        ElMessage.error(errorMessage)\r\n      }\r\n    }\r\n\r\n    // 验证设备编号格式\r\n    const validateDeviceIdFormat = () => {\r\n      const deviceIdRegex = /^[0-9A-Za-z]+-[0-9A-Za-z]+$/\r\n      if (deviceId.value && !deviceIdRegex.test(deviceId.value)) {\r\n        deviceIdError.value = '请输入有效的设备编号格式 (如: 4371-01、ABC-12、123-XY)'\r\n      } else {\r\n        deviceIdError.value = ''\r\n      }\r\n    }\r\n    \r\n    // 注意：loadDeviceGroups() 已经在第一个 onMounted 中调用\r\n    \r\n    // 获取批量查看按钮的提示信息\r\n    const getBatchViewTitle = () => {\r\n      if (selectedDetailLogs.value.length > 20) {\r\n        return '批量查看一次最多只能选择20个文件'\r\n      }\r\n      if (incompleteLogsMessage.value) {\r\n        return incompleteLogsMessage.value\r\n      }\r\n      if (deviceCheckMessage.value) {\r\n        return deviceCheckMessage.value\r\n      }\r\n      return '批量查看选中的日志文件'\r\n    }\r\n\r\n    // 获取批量重新解析按钮的提示信息\r\n    const getBatchReparseTitle = () => {\r\n      if (selectedDetailLogs.value.length > 20) {\r\n        return '批量重新解析一次最多只能选择20个文件'\r\n      }\r\n      if (incompleteLogsMessage.value) {\r\n        return incompleteLogsMessage.value\r\n      }\r\n      return '批量重新解析选中的日志文件'\r\n    }\r\n    \r\n    return {\r\n      loading,\r\n      uploading,\r\n      showUploadDialog,\r\n      overallProgress,\r\n      processingStatus,\r\n      progressFormat,\r\n      uploadRef,\r\n      currentPage,\r\n      pageSize,\r\n      logs,\r\n      total,\r\n      uploadUrl,\r\n      uploadHeaders,\r\n      canSubmitUpload,\r\n      loadLogs,\r\n      handleSizeChange,\r\n      handleCurrentChange,\r\n      dateShortcuts,\r\n      beforeUpload,\r\n      submitUpload,\r\n      clearUpload,\r\n      onUploadSuccess,\r\n      onUploadError,\r\n      onExceed,\r\n      onFileChange,\r\n      onFileRemove,\r\n      removeFile,\r\n      handleParse,\r\n      handleDownload,\r\n      handleDelete,\r\n      handleReparse,\r\n      canReparse,\r\n      formatFileSize,\r\n      formatDate,\r\n      getRowStatusType,\r\n      getRowStatusText,\r\n      goToLogAnalysis,\r\n      isDeleting,\r\n      userRole,\r\n      decryptKey,\r\n      keyUploadRef,\r\n      keyFileName,\r\n      deviceId,\r\n      filterDeviceId,\r\n      uploadFileList,\r\n      uploadDeviceId,\r\n      currentUploadDeviceId,\r\n      beforeKeyUpload,\r\n      onKeyFileChange,\r\n      canDeleteLog,\r\n      canOperate,\r\n      canView,\r\n      canDownload,\r\n      canReparseLog,\r\n      keyError,\r\n      deviceIdError,\r\n      autoFillKey,\r\n      validateKeyFormat,\r\n      autoFillDeviceId,\r\n      validateDeviceIdFormat,\r\n      \r\n      // 设备分组相关\r\n      deviceGroups,\r\n      deviceTotal,\r\n      showDeviceDetailDrawer,\r\n      selectedDevice,\r\n      detailLogs,\r\n      detailLoading,\r\n      detailCurrentPage,\r\n      detailPageSize,\r\n      detailTotal,\r\n      selectedDetailLogs,\r\n      showDetailNameFilterPanel,\r\n      detailNameTimePrefix,\r\n      detailOnlyOwn,\r\n      loadDeviceGroups,\r\n      handleDeviceSizeChange,\r\n      handleDeviceCurrentChange,\r\n      showDeviceDetail,\r\n      loadDetailLogs,\r\n      handleDrawerClose,\r\n      uploadLogForDevice,\r\n      showNormalUpload,\r\n      uploadDataForDevice,\r\n      viewSurgeryData,\r\n      toggleDeviceFocus,\r\n      handleDetailSelectionChange,\r\n      clearDetailSelection,\r\n      handleDetailSizeChange,\r\n      handleDetailCurrentChange,\r\n      applyDetailOnlyOwn,\r\n      resetDetailFilters,\r\n      applyDetailNameFilter,\r\n      resetDetailNameFilter,\r\n      checkAndUpdateDetailLogs,\r\n      startSmartStatusMonitoring,\r\n      startMonitoringIfDrawerOpen,\r\n      websocketStatusTitle,\r\n      websocketStatusType,\r\n      websocketStatusDescription,\r\n      \r\n      // 批量操作相关\r\n      canBatchView,\r\n      canBatchDownload,\r\n      canBatchReparse,\r\n      canBatchDelete,\r\n      isSameDevice,\r\n      deviceCheckMessage,\r\n      hasIncompleteLogs,\r\n      incompleteLogsMessage,\r\n      handleBatchAnalyze,\r\n      handleBatchDownload,\r\n      handleBatchDelete,\r\n      handleBatchReparse,\r\n      // 列筛选\r\n      showNameFilterPanel,\r\n      showDeviceFilterPanel,\r\n      nameTimePrefix,\r\n      deviceFilterValue,\r\n      applyNameFilter,\r\n      resetNameFilter,\r\n      applyDeviceFilter,\r\n      resetDeviceFilter,\r\n      resetAllFilters,\r\n      startStatusMonitoring,\r\n      // 新增函数\r\n      getBatchViewTitle,\r\n      getBatchReparseTitle,\r\n      // 手术数据\r\n      showSurgeryDrawer,\r\n      surgeryLoading,\r\n      surgeryList,\r\n      surgeryPage,\r\n      surgeryPageSize,\r\n      surgeryTotal,\r\n      openSurgeryDrawer,\r\n      loadSurgeries,\r\n      viewLogsBySurgery,\r\n      visualizeSurgery,\r\n      deleteSurgery,\r\n      openSurgeryDrawerForDevice: openSurgeryDrawerForDevice\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.websocket-status-section {\r\n  margin-right: 16px;\r\n}\r\n\r\n.websocket-status-banner {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.status-alert {\r\n  margin-bottom: 0;\r\n}\r\n.logs-container {\r\n  height: 100%;\r\n}\r\n\r\n\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 12px;\r\n  min-width: 0;\r\n}\r\n\r\n.header-section {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.batch-section {\r\n  flex: 1 1 auto;\r\n  min-width: 240px;\r\n}\r\n\r\n.only-own-section,\r\n.reset-section,\r\n.refresh-section,\r\n.upload-section {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n/* 统一按钮样式与对齐 */\r\n.only-own-section .el-button,\r\n.reset-section .el-button,\r\n.refresh-section .el-button,\r\n.upload-section .el-button {\r\n  height: 32px;\r\n  line-height: 30px;\r\n  padding: 0 16px;\r\n}\r\n\r\n.only-own-section .el-checkbox {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  height: 28px;\r\n}\r\n\r\n/* 列头筛选样式 */\r\n.col-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.filter-trigger {\r\n  cursor: pointer;\r\n  color: #909399;\r\n  transition: color 0.3s;\r\n}\r\n\r\n.filter-trigger:hover {\r\n  color: #409eff;\r\n}\r\n\r\n.filter-trigger.active {\r\n  color: #409eff;\r\n}\r\n\r\n.filter-panel {\r\n  padding: 12px;\r\n}\r\n\r\n.filter-title {\r\n  margin-bottom: 12px;\r\n  font-weight: 500;\r\n  color: #303133;\r\n}\r\n\r\n.filter-actions {\r\n  margin-top: 12px;\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n\r\n\r\n.key-input-section {\r\n  margin-top: 15px;\r\n}\r\n\r\n.key-input-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.key-separator {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.key-file-info {\r\n  margin-top: 10px;\r\n}\r\n\r\n.key-error {\r\n  margin-top: 10px;\r\n}\r\n\r\n.device-input-section {\r\n  margin-top: 15px;\r\n}\r\n\r\n.device-input-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.device-error {\r\n  margin-top: 10px;\r\n}\r\n\r\n.device-info-section {\r\n  margin-top: 15px;\r\n}\r\n\r\n.device-info-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.key-input-section {\r\n  margin-top: 15px;\r\n}\r\n\r\n.key-input-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.key-separator {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.key-file-info {\r\n  margin-top: 10px;\r\n}\r\n\r\n.key-error {\r\n  margin-top: 10px;\r\n}\r\n\r\n.device-input-section {\r\n  margin-top: 15px;\r\n}\r\n\r\n.device-input-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.device-error {\r\n  margin-top: 10px;\r\n}\r\n\r\n.list-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.pagination-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.parsing-tip {\r\n  color: #e6a23c;\r\n  font-weight: 500;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.parsing-tip .el-icon {\r\n  animation: rotating 2s linear infinite;\r\n}\r\n\r\n@keyframes rotating {\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.overall-progress {\r\n  margin-bottom: 20px;\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  border: 1px solid #e9ecef;\r\n}\r\n\r\n.progress-stages {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 15px;\r\n  padding: 0 10px;\r\n}\r\n\r\n.stage {\r\n  font-size: 12px;\r\n  color: #909399;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.stage.active {\r\n  color: #409eff;\r\n  background-color: #ecf5ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.stage.completed {\r\n  color: #67c23a;\r\n  background-color: #f0f9ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.processing-status {\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.processing-status .el-tag {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.custom-file-list {\r\n  margin-top: 15px;\r\n  border: 1px solid #e4e7ed;\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n}\r\n\r\n.file-list-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 15px;\r\n  background-color: #f5f7fa;\r\n  border-bottom: 1px solid #e4e7ed;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.file-items {\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.file-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px 15px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.file-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.file-item:hover {\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.file-item .el-icon {\r\n  margin-right: 8px;\r\n  color: #909399;\r\n}\r\n\r\n.file-name {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n  font-size: 14px;\r\n  color: #303133;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.file-size {\r\n  margin-right: 10px;\r\n  font-size: 12px;\r\n  color: #909399;\r\n}\r\n\r\n.status-tip {\r\n  margin-top: 4px;\r\n  font-size: 11px;\r\n  color: #e6a23c;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 4px;\r\n}\r\n\r\n.status-tip .el-icon {\r\n  font-size: 12px;\r\n}\r\n\r\n.status-progress {\r\n  margin-top: 4px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 2px;\r\n}\r\n\r\n.status-progress .el-progress {\r\n  width: 60px;\r\n}\r\n\r\n/* 批量操作样式 */\r\n.batch-operations {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  min-width: 0;\r\n  flex: 1;\r\n}\r\n\r\n/* 搜索区域样式 */\r\n.search-section {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: auto;\r\n  flex-shrink: 0;\r\n  gap: 10px;\r\n}\r\n\r\n.search-input {\r\n  width: 200px;\r\n}\r\n\r\n.batch-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 8px 12px;\r\n  background-color: #f0f9ff;\r\n  border: 1px solid #b3d8ff;\r\n  border-radius: 6px;\r\n  flex-wrap: wrap;\r\n  min-width: 0;\r\n}\r\n\r\n\r\n\r\n.info-icon {\r\n  color: #909399;\r\n  margin-left: 4px;\r\n  cursor: help;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 设备详情相关样式 */\r\n.device-detail-content {\r\n  padding: 20px;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.device-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #e4e7ed;\r\n}\r\n\r\n.device-info h3 {\r\n  margin: 0 0 10px 0;\r\n  color: #303133;\r\n  font-size: 18px;\r\n}\r\n\r\n.device-info p {\r\n  margin: 5px 0;\r\n  color: #606266;\r\n  font-size: 14px;\r\n}\r\n\r\n.device-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.detail-logs-section {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.detail-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.detail-header h4 {\r\n  margin: 0;\r\n  color: #303133;\r\n  font-size: 16px;\r\n}\r\n\r\n.detail-actions {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 12px;\r\n  min-width: 0;\r\n}\r\n\r\n.detail-actions .batch-section {\r\n  flex: 1 1 auto;\r\n  min-width: 240px;\r\n}\r\n\r\n.detail-actions .only-own-section,\r\n.detail-actions .reset-section,\r\n.detail-actions .refresh-section {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n.detail-actions .batch-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 8px 12px;\r\n  background-color: #f0f9ff;\r\n  border: 1px solid #b3d8ff;\r\n  border-radius: 6px;\r\n  flex-wrap: wrap;\r\n  min-width: 0;\r\n}\r\n\r\n/* 响应式布局 */\r\n@media (max-width: 1024px) {\r\n  .header-actions {\r\n    gap: 15px;\r\n  }\r\n  \r\n  .batch-actions {\r\n    gap: 8px;\r\n  }\r\n  \r\n  .batch-actions .el-button {\r\n    font-size: 12px;\r\n    padding: 6px 10px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .card-header {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .header-actions {\r\n    flex-direction: column;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .search-section {\r\n    margin-left: 0;\r\n    justify-content: flex-start;\r\n  }\r\n  \r\n  .batch-actions {\r\n    justify-content: flex-start;\r\n  }\r\n  \r\n  .batch-actions .el-button {\r\n    flex: 1;\r\n    min-width: 120px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .batch-actions {\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .batch-actions .el-button {\r\n    width: 100%;\r\n  }\r\n  \r\n  .search-section {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .search-section .search-input {\r\n    width: 100% !important;\r\n  }\r\n}\r\n\r\n</style> ","class WebSocketClient {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectDelay = 1000; // 初始重连延迟1秒\r\n    this.maxReconnectDelay = 30000; // 最大重连延迟30秒\r\n    this.isConnecting = false;\r\n    this.subscriptions = new Map(); // 存储设备订阅\r\n    this.messageHandlers = new Map(); // 存储消息处理器\r\n    this.connectionStatus = 'disconnected'; // disconnected, connecting, connected\r\n    \r\n    // 绑定方法到实例\r\n    this.handleMessage = this.handleMessage.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleError = this.handleError.bind(this);\r\n    this.handleOpen = this.handleOpen.bind(this);\r\n  }\r\n\r\n  // 连接到 WebSocket 服务器\r\n  connect() {\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      console.log('WebSocket 已连接');\r\n      return;\r\n    }\r\n\r\n    if (this.isConnecting) {\r\n      console.log('WebSocket 正在连接中...');\r\n      return;\r\n    }\r\n\r\n    this.isConnecting = true;\r\n    this.connectionStatus = 'connecting';\r\n\r\n    try {\r\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n      \r\n      // 前端运行在 8080 端口，后端在 3000 端口\r\n      // 智能选择后端地址：本地开发用 localhost，网络环境用实际 IP\r\n      let backendHost;\r\n      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\r\n        backendHost = 'localhost'; // 本地开发环境\r\n      } else {\r\n        backendHost = window.location.hostname; // 网络环境，使用当前主机名\r\n      }\r\n      // 使用 Vue-CLI 风格环境变量（webpack 构建）\r\n      // 默认直连后端端口 3000，路径固定为 /ws 与后端一致\r\n      const backendPort = process.env.VUE_APP_BACKEND_PORT || '3000';\r\n      const wsPath = (process.env.VUE_APP_WS_PATH ?? '/ws');\r\n      const wsOverride = process.env.VUE_APP_WS_URL;\r\n      const wsUrl = wsOverride\r\n        ? wsOverride\r\n        : `${protocol}//${backendHost}:${backendPort}${wsPath}`;\r\n\r\n      console.log(`🔌 正在连接 WebSocket: ${wsUrl}`);\r\n      console.log(`📍 当前页面地址: ${window.location.href}`);\r\n      console.log(`🌐 协议: ${protocol}`);\r\n      console.log(`🏠 前端主机: ${window.location.host}`);\r\n      console.log(`🔌 后端地址: ${backendHost}:${backendPort}`);\r\n      console.log(`🔍 网络环境: ${window.location.hostname === 'localhost' ? '本地开发' : '网络环境'}`);\r\n      console.log(`🔍 建议连接: ws://${backendHost}:${backendPort}`);\r\n      \r\n      this.ws = new WebSocket(wsUrl);\r\n      \r\n      // 添加更多事件监听器用于调试\r\n      this.ws.addEventListener('open', (event) => {\r\n        console.log('🔌 WebSocket 连接事件触发: open', event);\r\n        clearTimeout(connectionTimeout);\r\n      });\r\n      \r\n      this.ws.addEventListener('error', (event) => {\r\n        console.log('🔌 WebSocket 错误事件触发: error', event);\r\n      });\r\n      \r\n      this.ws.addEventListener('close', (event) => {\r\n        console.log('🔌 WebSocket 关闭事件触发: close', event);\r\n      });\r\n      \r\n      this.ws.onopen = this.handleOpen;\r\n      this.ws.onmessage = this.handleMessage;\r\n      this.ws.onclose = this.handleClose;\r\n      this.ws.onerror = this.handleError;\r\n      \r\n      // 设置连接超时\r\n      const connectionTimeout = setTimeout(() => {\r\n        console.log('⏰ WebSocket 连接超时检查，当前状态:', this.ws.readyState);\r\n        if (this.ws.readyState === WebSocket.CONNECTING) {\r\n          console.error('WebSocket 连接超时，当前状态:', this.ws.readyState);\r\n          this.ws.close();\r\n          this.handleConnectionTimeout();\r\n        }\r\n      }, 10000); // 10秒超时\r\n    } catch (error) {\r\n      console.error('WebSocket 连接失败:', error);\r\n      this.isConnecting = false;\r\n      this.connectionStatus = 'disconnected';\r\n      this.scheduleReconnect();\r\n    }\r\n  }\r\n\r\n  // 处理连接打开\r\n  handleOpen(event) {\r\n    console.log('🔌 WebSocket 连接成功');\r\n    this.isConnecting = false;\r\n    this.connectionStatus = 'connected';\r\n    this.reconnectAttempts = 0;\r\n    this.reconnectDelay = 1000;\r\n\r\n    // 重新订阅之前的设备\r\n    this.resubscribeAll();\r\n    \r\n    // 发送心跳\r\n    this.startHeartbeat();\r\n    \r\n    // 触发连接成功事件\r\n    this.triggerEvent('connection', {\r\n      status: 'connected',\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  // 处理消息\r\n  handleMessage(event) {\r\n    try {\r\n      const message = JSON.parse(event.data);\r\n      console.log('📨 收到 WebSocket 消息:', message);\r\n\r\n      switch (message.type) {\r\n        case 'connection':\r\n          console.log('✅ WebSocket 连接确认:', message.message);\r\n          break;\r\n          \r\n        case 'subscription_confirmed':\r\n          console.log('✅ 设备订阅确认:', message.deviceId, message.message);\r\n          break;\r\n          \r\n        case 'log_status_change':\r\n          this.handleLogStatusChange(message);\r\n          break;\r\n          \r\n        case 'batch_status_change':\r\n          this.handleBatchStatusChange(message);\r\n          break;\r\n          \r\n        case 'pong':\r\n          // 心跳响应，无需处理\r\n          break;\r\n          \r\n        default:\r\n          console.log('未知消息类型:', message.type);\r\n      }\r\n    } catch (error) {\r\n      console.error('解析 WebSocket 消息失败:', error);\r\n    }\r\n  }\r\n\r\n  // 处理日志状态变化\r\n  handleLogStatusChange(message) {\r\n    const { deviceId, logId, oldStatus, newStatus, timestamp } = message;\r\n    console.log(`🔄 日志状态变化: 设备 ${deviceId}, 日志 ${logId}, ${oldStatus} → ${newStatus} @ ${timestamp}`);\r\n    \r\n    // 触发状态变化事件\r\n    this.triggerEvent('logStatusChange', {\r\n      deviceId,\r\n      logId,\r\n      oldStatus,\r\n      newStatus,\r\n      timestamp\r\n    });\r\n  }\r\n\r\n  // 处理批量状态变化\r\n  handleBatchStatusChange(message) {\r\n    const { deviceId, changes, timestamp } = message;\r\n    console.log(`🔄 批量状态变化: 设备 ${deviceId}, ${changes?.length || 0} 个变化 @ ${timestamp}`);\r\n    this.triggerEvent('batchStatusChange', { deviceId, changes: changes || [], timestamp });\r\n  }\r\n\r\n  // 处理连接关闭\r\n  handleClose(event) {\r\n    console.log('🔌 WebSocket 连接关闭:', event.code, event.reason);\r\n    this.connectionStatus = 'disconnected';\r\n    this.isConnecting = false;\r\n    this.stopHeartbeat();\r\n    this.triggerEvent('disconnection', { status: 'disconnected', code: event.code, reason: event.reason, timestamp: Date.now() });\r\n    if (event.code !== 1000) {\r\n      this.scheduleReconnect();\r\n    }\r\n  }\r\n\r\n  // 处理连接错误\r\n  handleError(error) {\r\n    console.error('❌ WebSocket 连接错误:', error);\r\n    this.connectionStatus = 'disconnected';\r\n    this.isConnecting = false;\r\n  }\r\n\r\n  // 处理连接超时\r\n  handleConnectionTimeout() {\r\n    console.error('⏰ WebSocket 连接超时');\r\n    this.connectionStatus = 'disconnected';\r\n    this.isConnecting = false;\r\n    this.scheduleReconnect();\r\n  }\r\n\r\n  // 订阅设备状态更新\r\n  subscribeToDevice(deviceId) {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      console.warn('WebSocket 未连接，无法订阅设备');\r\n      return false;\r\n    }\r\n    if (this.subscriptions.has(deviceId)) {\r\n      console.log(`设备 ${deviceId} 已订阅`);\r\n      return true;\r\n    }\r\n    try {\r\n      const message = { type: 'subscribe_device', deviceId };\r\n      this.ws.send(JSON.stringify(message));\r\n      this.subscriptions.set(deviceId, true);\r\n      console.log(`📡 订阅设备 ${deviceId} 状态更新`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`订阅设备 ${deviceId} 失败:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 取消订阅设备状态更新\r\n  unsubscribeFromDevice(deviceId) {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      return false;\r\n    }\r\n    if (!this.subscriptions.has(deviceId)) {\r\n      return true;\r\n    }\r\n    try {\r\n      const message = { type: 'unsubscribe_device', deviceId };\r\n      this.ws.send(JSON.stringify(message));\r\n      this.subscriptions.delete(deviceId);\r\n      console.log(`📡 取消订阅设备 ${deviceId} 状态更新`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`取消订阅设备 ${deviceId} 失败:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 重新订阅所有设备\r\n  resubscribeAll() {\r\n    for (const deviceId of this.subscriptions.keys()) {\r\n      this.subscribeToDevice(deviceId);\r\n    }\r\n  }\r\n\r\n  // 启动心跳\r\n  startHeartbeat() {\r\n    this.heartbeatInterval = setInterval(() => {\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n        try {\r\n          this.ws.send(JSON.stringify({ type: 'ping' }));\r\n        } catch (error) {\r\n          console.error('发送心跳失败:', error);\r\n        }\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  // 停止心跳\r\n  stopHeartbeat() {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  // 安排重连\r\n  scheduleReconnect() {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.error('WebSocket 重连次数已达上限，停止重连');\r\n      return;\r\n    }\r\n    this.reconnectAttempts++;\r\n    const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), this.maxReconnectDelay);\r\n    console.log(`🔄 ${delay}ms 后尝试重连 WebSocket (第 ${this.reconnectAttempts} 次)`);\r\n    setTimeout(() => { this.connect(); }, delay);\r\n  }\r\n\r\n  // 断开连接\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close(1000, '用户主动断开');\r\n    }\r\n    this.stopHeartbeat();\r\n    this.connectionStatus = 'disconnected';\r\n    this.isConnecting = false;\r\n  }\r\n\r\n  // 添加事件监听器\r\n  on(event, handler) {\r\n    if (!this.messageHandlers.has(event)) {\r\n      this.messageHandlers.set(event, []);\r\n    }\r\n    this.messageHandlers.get(event).push(handler);\r\n  }\r\n\r\n  // 移除事件监听器\r\n  off(event, handler) {\r\n    if (this.messageHandlers.has(event)) {\r\n      const handlers = this.messageHandlers.get(event);\r\n      const index = handlers.indexOf(handler);\r\n      if (index > -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 触发事件\r\n  triggerEvent(event, data) {\r\n    if (this.messageHandlers.has(event)) {\r\n      this.messageHandlers.get(event).forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch (error) {\r\n          console.error(`事件处理器 ${event} 执行失败:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // 获取连接状态\r\n  getConnectionStatus() {\r\n    return this.connectionStatus;\r\n  }\r\n\r\n  // 检查是否已连接\r\n  isConnected() {\r\n    return this.connectionStatus === 'connected';\r\n  }\r\n\r\n  // 获取订阅的设备列表\r\n  getSubscribedDevices() {\r\n    return Array.from(this.subscriptions.keys());\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst websocketClient = new WebSocketClient();\r\n\r\n// 仅在显式启用时自动连接\r\nconst WS_AUTO_CONNECT = String(process.env.VUE_APP_WS_AUTO_CONNECT || '').toLowerCase() === 'true';\r\nexport const connectIfEnabled = () => {\r\n  if (WS_AUTO_CONNECT) {\r\n    websocketClient.connect();\r\n  }\r\n};\r\n\r\nexport default websocketClient;","import { render } from \"./Logs.vue?vue&type=template&id=5bbff232&scoped=true\"\nimport script from \"./Logs.vue?vue&type=script&lang=js\"\nexport * from \"./Logs.vue?vue&type=script&lang=js\"\n\nimport \"./Logs.vue?vue&type=style&index=0&id=5bbff232&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5bbff232\"]])\n\nexport default __exports__","/**\n * 手术数据适配器\n * 统一处理不同来源的手术数据，确保可视化组件能正确解析\n */\n\n/**\n * 将时间格式标准化为ISO UTC格式\n * 处理数据库中的UTC时间格式转换\n * @param {string} timeStr - 时间字符串\n * @returns {string} ISO格式的UTC时间字符串\n */\nfunction normalizeTimeToISO (timeStr) {\n  if (!timeStr) return null\n\n  try {\n    // 如果是数据库格式的UTC时间字符串 (YYYY-MM-DD HH:mm:ss)\n    if (typeof timeStr === 'string' && /^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(timeStr)) {\n      // 添加UTC标识符\n      const utcTime = timeStr.replace(' ', 'T') + 'Z'\n      const date = new Date(utcTime)\n\n      if (isNaN(date.getTime())) {\n        console.warn('⚠️ 无效的时间格式:', timeStr)\n        return timeStr\n      }\n\n      // 返回ISO格式的UTC时间\n      return date.toISOString()\n    }\n\n    // 如果已经是ISO格式或时间戳，直接返回\n    return timeStr\n  } catch (error) {\n    console.warn('⚠️ 时间转换失败:', timeStr, error)\n    return timeStr\n  }\n}\n\n/**\n * 统一的手术数据适配器\n * @param {Object} rawData - 原始手术数据（可能来自统计页面或数据库）\n * @returns {Object} 标准化的手术数据\n */\nexport function adaptSurgeryData (rawData) {\n  if (!rawData) {\n    console.warn('⚠️ 手术数据为空')\n    return null\n  }\n\n  console.log('🔧 开始适配手术数据:', rawData)\n\n  // 提取结构化数据\n  let structuredData = null\n  let metadata = {}\n\n  // 情况1：手术统计页面的数据格式\n  if (rawData.postgresql_row_preview?.structured_data) {\n    structuredData = rawData.postgresql_row_preview.structured_data\n    metadata = {\n      surgery_id: rawData.surgery_id || rawData.postgresql_row_preview.surgery_id,\n      // 统一标准化为ISO UTC\n      start_time: normalizeTimeToISO(rawData.surgery_start_time || rawData.postgresql_row_preview.start_time),\n      end_time: normalizeTimeToISO(rawData.surgery_end_time || rawData.postgresql_row_preview.end_time),\n      is_remote: rawData.is_remote_surgery || rawData.postgresql_row_preview.is_remote,\n      has_fault: rawData.has_error || rawData.postgresql_row_preview.has_fault,\n      device_ids: rawData.postgresql_row_preview.device_ids || [],\n      source_log_ids: rawData.postgresql_row_preview.source_log_ids || []\n    }\n  } else if (rawData.structured_data) {\n    // 情况2：数据库手术记录的数据格式\n    structuredData = rawData.structured_data\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.start_time),\n      end_time: normalizeTimeToISO(rawData.end_time),\n      is_remote: rawData.is_remote,\n      has_fault: rawData.has_fault,\n      device_ids: rawData.device_ids || [],\n      source_log_ids: rawData.source_log_ids || []\n    }\n  } else if (rawData.arms || rawData.surgery_stats || rawData.power_cycles) {\n    // 情况3：直接传入的结构化数据\n    structuredData = rawData\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.start_time || rawData.surgery_start_time),\n      end_time: normalizeTimeToISO(rawData.end_time || rawData.surgery_end_time),\n      is_remote: rawData.is_remote,\n      has_fault: rawData.has_fault,\n      device_ids: rawData.device_ids || [],\n      source_log_ids: rawData.source_log_ids || []\n    }\n  } else if (rawData.arm1_usage || rawData.state_machine_changes || rawData.alarm_details) {\n    // 情况4：手术统计页面的原始分析数据\n    structuredData = convertAnalysisDataToStructured(rawData)\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.surgery_start_time),\n      end_time: normalizeTimeToISO(rawData.surgery_end_time),\n      is_remote: rawData.is_remote_surgery,\n      has_fault: rawData.has_error,\n      device_ids: [],\n      source_log_ids: rawData.log_id ? [rawData.log_id] : []\n    }\n  }\n\n  if (!structuredData) {\n    console.warn('⚠️ 无法识别的数据格式:', rawData)\n    return null\n  }\n\n  // 标准化结构化数据\n  const standardizedData = standardizeStructuredData(structuredData)\n\n  // 合并元数据\n  const result = {\n    ...standardizedData,\n    ...metadata\n  }\n\n  console.log('✅ 手术数据适配完成:', result)\n  return result\n}\n\n/**\n * 将分析器原始数据转换为结构化数据格式\n * @param {Object} analysisData - 分析器原始数据\n * @returns {Object} 结构化数据\n */\nfunction convertAnalysisDataToStructured (analysisData) {\n  const structured = {\n    power_cycles: [],\n    arms: [],\n    surgery_stats: {\n      success: !analysisData.has_error,\n      network_latency_ms: [],\n      faults: [],\n      state_machine: [],\n      arm_switch_count: 0,\n      left_hand_clutch: 0,\n      right_hand_clutch: 0,\n      foot_clutch: 0,\n      endoscope_pedal: 0\n    }\n  }\n\n  // 转换器械使用数据\n  for (let i = 1; i <= 4; i++) {\n    const armUsage = analysisData[`arm${i}_usage`] || []\n    const instrumentUsage = armUsage.map(usage => ({\n      tool_type: usage.instrumentName || usage.tool_type || '未知器械',\n      udi: usage.udi || '无UDI',\n      start_time: normalizeTimeToISO(usage.startTime || usage.start_time),\n      end_time: normalizeTimeToISO(usage.endTime || usage.end_time),\n      energy_activation: []\n    }))\n\n    structured.arms.push({\n      arm_id: i,\n      instrument_usage: instrumentUsage\n    })\n  }\n\n  // 转换状态机数据\n  if (analysisData.state_machine_changes && Array.isArray(analysisData.state_machine_changes)) {\n    structured.surgery_stats.state_machine = analysisData.state_machine_changes.map(change => ({\n      time: normalizeTimeToISO(change.time),\n      state: change.stateName || String(change.state)\n    }))\n  }\n\n  // 转换网络延迟数据\n  if (analysisData.network_latency_data && Array.isArray(analysisData.network_latency_data)) {\n    structured.surgery_stats.network_latency_ms = analysisData.network_latency_data.map(data => ({\n      time: normalizeTimeToISO(data.timestamp),\n      latency: data.latency\n    }))\n  }\n\n  // 转换故障数据\n  if (analysisData.alarm_details && Array.isArray(analysisData.alarm_details)) {\n    structured.surgery_stats.faults = analysisData.alarm_details.map(fault => ({\n      timestamp: normalizeTimeToISO(fault.time),\n      error_code: fault.code,\n      param1: '',\n      param2: '',\n      param3: '',\n      param4: '',\n      explanation: fault.message,\n      log_id: analysisData.log_id\n    }))\n  }\n\n  // 转换电源循环数据\n  if (analysisData.power_on_times && analysisData.shutdown_times) {\n    const onTimes = analysisData.power_on_times\n    const offTimes = analysisData.shutdown_times\n\n    // 智能配对开机和关机时间\n    let onIndex = 0\n    let offIndex = 0\n\n    while (onIndex < onTimes.length || offIndex < offTimes.length) {\n      const onTime = onIndex < onTimes.length ? onTimes[onIndex] : null\n      const offTime = offIndex < offTimes.length ? offTimes[offIndex] : null\n\n      structured.power_cycles.push({\n        on_time: normalizeTimeToISO(onTime),\n        off_time: normalizeTimeToISO(offTime)\n      })\n\n      if (onTime && offTime) {\n        onIndex++\n        offIndex++\n      } else if (onTime) {\n        onIndex++\n      } else {\n        offIndex++\n      }\n    }\n  }\n\n  return structured\n}\n\n/**\n * 标准化结构化数据\n * @param {Object} structuredData - 结构化数据\n * @returns {Object} 标准化后的数据\n */\nfunction standardizeStructuredData (structuredData) {\n  const standardized = {\n    arms: structuredData.arms || [],\n    power_cycles: structuredData.power_cycles || [],\n    surgery_stats: {\n      success: structuredData.surgery_stats?.success ?? true,\n      network_latency_ms: structuredData.surgery_stats?.network_latency_ms || [],\n      faults: structuredData.surgery_stats?.faults || [],\n      state_machine: structuredData.surgery_stats?.state_machine || [],\n      arm_switch_count: structuredData.surgery_stats?.arm_switch_count || 0,\n      left_hand_clutch: structuredData.surgery_stats?.left_hand_clutch || 0,\n      right_hand_clutch: structuredData.surgery_stats?.right_hand_clutch || 0,\n      foot_clutch: structuredData.surgery_stats?.foot_clutch || 0,\n      endoscope_pedal: structuredData.surgery_stats?.endoscope_pedal || 0\n    }\n  }\n\n  // 确保 arms 数组格式正确\n  if (!Array.isArray(standardized.arms)) {\n    standardized.arms = []\n  }\n\n  // 确保每个 arm 都有正确的结构，并转换时间\n  for (let i = 0; i < standardized.arms.length; i++) {\n    if (!standardized.arms[i].arm_id) {\n      standardized.arms[i].arm_id = i + 1\n    }\n    if (!standardized.arms[i].instrument_usage) {\n      standardized.arms[i].instrument_usage = []\n    } else {\n      // 转换器械使用时间\n      standardized.arms[i].instrument_usage = standardized.arms[i].instrument_usage.map(usage => ({\n        ...usage,\n        start_time: normalizeTimeToISO(usage.start_time),\n        end_time: normalizeTimeToISO(usage.end_time)\n      }))\n    }\n  }\n\n  // 转换状态机数据时间\n  if (standardized.surgery_stats.state_machine) {\n    standardized.surgery_stats.state_machine = standardized.surgery_stats.state_machine.map(item => ({\n      ...item,\n      time: normalizeTimeToISO(item.time)\n    }))\n  }\n\n  // 转换网络延迟数据时间\n  if (standardized.surgery_stats.network_latency_ms) {\n    standardized.surgery_stats.network_latency_ms = standardized.surgery_stats.network_latency_ms.map(item => ({\n      ...item,\n      time: normalizeTimeToISO(item.time)\n    }))\n  }\n\n  // 转换故障数据时间\n  if (standardized.surgery_stats.faults) {\n    standardized.surgery_stats.faults = standardized.surgery_stats.faults.map(fault => ({\n      ...fault,\n      timestamp: normalizeTimeToISO(fault.timestamp)\n    }))\n  }\n\n  // 转换电源循环数据时间\n  if (standardized.power_cycles) {\n    standardized.power_cycles = standardized.power_cycles.map(cycle => ({\n      on_time: normalizeTimeToISO(cycle.on_time),\n      off_time: normalizeTimeToISO(cycle.off_time)\n    }))\n  }\n\n  return standardized\n}\n\n/**\n * 验证适配后的数据是否完整\n * @param {Object} adaptedData - 适配后的数据\n * @returns {boolean} 是否有效\n */\nexport function validateAdaptedData (adaptedData) {\n  if (!adaptedData) return false\n\n  const hasRequiredFields = !!(\n    adaptedData.surgery_id &&\n    adaptedData.start_time &&\n    adaptedData.arms &&\n    adaptedData.surgery_stats\n  )\n\n  const hasValidArms = Array.isArray(adaptedData.arms) && adaptedData.arms.length > 0\n\n  console.log('🔍 数据验证结果:', {\n    hasRequiredFields,\n    hasValidArms,\n    armsCount: adaptedData.arms?.length || 0,\n    stateMachineCount: adaptedData.surgery_stats?.state_machine?.length || 0,\n    networkLatencyCount: adaptedData.surgery_stats?.network_latency_ms?.length || 0\n  })\n\n  return hasRequiredFields && hasValidArms\n}\n\n/**\n * 获取数据来源类型\n * @param {Object} rawData - 原始数据\n * @returns {string} 数据来源类型\n */\nexport function getDataSourceType (rawData) {\n  if (!rawData) return 'unknown'\n\n  if (rawData.postgresql_row_preview?.structured_data) {\n    return 'surgery_statistics'\n  } else if (rawData.structured_data) {\n    return 'database_record'\n  } else if (rawData.arms || rawData.surgery_stats || rawData.power_cycles) {\n    return 'structured_data'\n  } else if (rawData.arm1_usage || rawData.state_machine_changes || rawData.alarm_details) {\n    return 'analysis_data'\n  }\n\n  return 'unknown'\n}\n","// 统一的手术数据可视化辅助函数\nimport router from '../router'\nimport { adaptSurgeryData, validateAdaptedData, getDataSourceType } from './surgeryDataAdapter'\n\n/**\n * 统一的手术数据可视化函数\n * 使用数据适配器统一处理不同来源的手术数据\n *\n * @param {Object} surgeryData - 手术数据对象\n * @param {Object} options - 可选参数\n * @param {boolean} options.openInNewTab - 是否在新标签页打开，默认true\n * @param {string} options.queryId - 查询ID，用于日志解析页面的可视化\n */\nexport function visualizeSurgery (surgeryData, options = {}) {\n  const { openInNewTab = true, queryId = null } = options\n\n  try {\n    // 确保有数据\n    if (!surgeryData) {\n      throw new Error('手术数据不能为空')\n    }\n\n    // 添加调试信息\n    console.log('🔧 开始处理手术数据可视化:', surgeryData)\n    const dataSourceType = getDataSourceType(surgeryData)\n    console.log('📊 数据来源类型:', dataSourceType)\n\n    // 使用数据适配器统一处理数据\n    const adaptedData = adaptSurgeryData(surgeryData)\n    \n    if (!adaptedData) {\n      throw new Error('数据适配失败，无法识别的数据格式')\n    }\n\n    // 验证适配后的数据\n    if (!validateAdaptedData(adaptedData)) {\n      throw new Error('数据验证失败，缺少必要字段')\n    }\n\n    // 添加数据来源信息\n    adaptedData._dataSource = dataSourceType\n    adaptedData._originalData = surgeryData\n\n    console.log('✅ 数据适配成功:', adaptedData)\n\n    // 将数据存储到sessionStorage\n    sessionStorage.setItem('surgeryVizData', JSON.stringify(adaptedData))\n\n    // 构建路由参数\n    const routeOptions = { path: '/surgery-visualization' }\n    if (queryId) {\n      routeOptions.query = { id: queryId }\n    }\n\n    const routeData = router.resolve(routeOptions)\n\n    // 打开可视化页面\n    if (openInNewTab) {\n      window.open(routeData.href, '_blank')\n    } else {\n      // 如果在当前页面打开，使用push方式\n      router.push(routeOptions)\n    }\n  } catch (error) {\n    console.error('❌ 可视化手术数据失败:', error)\n    // 这里可以添加用户友好的错误提示\n    if (window.ElMessage) {\n      window.ElMessage.error('可视化手术数据失败: ' + error.message)\n    }\n  }\n}\n\n/**\n * 验证手术数据是否包含可视化所需的基本信息\n * @param {Object} surgeryData - 手术数据\n * @returns {boolean} 是否有效\n */\nexport function validateSurgeryData (surgeryData) {\n  if (!surgeryData) return false\n\n  // 检查是否有structured_data\n  const hasStructuredData = surgeryData.structured_data ||\n                           surgeryData.postgresql_row_preview?.structured_data\n\n  // 检查structured_data中是否有必要字段\n  if (hasStructuredData) {\n    const structuredData = surgeryData.structured_data || surgeryData.postgresql_row_preview.structured_data\n    return !!(structuredData.arms || structuredData.timeline || structuredData.power_cycles)\n  }\n\n  return false\n}\n\n/**\n * 从手术数据中提取可视化所需的数据\n * @param {Object} surgeryData - 手术数据\n * @returns {Object} 提取的数据\n */\nexport function extractVisualizationData (surgeryData) {\n  if (!surgeryData) return null\n\n  // 如果是PostgreSQL格式的数据，需要保留基本信息并合并structured_data\n  if (surgeryData.structured_data) {\n    // 保留外层的基本信息，并将structured_data合并进去\n    return {\n      ...surgeryData.structured_data,\n      // 保留关键的基本信息（优先使用外层值，即使为false也要保留）\n      surgery_id: surgeryData.surgery_id !== undefined ? surgeryData.surgery_id : surgeryData.structured_data.surgery_id,\n      start_time: surgeryData.start_time !== undefined ? surgeryData.start_time : surgeryData.structured_data.start_time,\n      end_time: surgeryData.end_time !== undefined ? surgeryData.end_time : surgeryData.structured_data.end_time,\n      is_remote: surgeryData.is_remote !== undefined ? surgeryData.is_remote : surgeryData.structured_data.is_remote,\n      has_fault: surgeryData.has_fault !== undefined ? surgeryData.has_fault : surgeryData.structured_data.has_fault,\n      device_ids: surgeryData.device_ids !== undefined ? surgeryData.device_ids : surgeryData.structured_data.device_ids,\n      source_log_ids: surgeryData.source_log_ids !== undefined ? surgeryData.source_log_ids : surgeryData.structured_data.source_log_ids\n    }\n  }\n\n  // 其次使用postgresql_row_preview中的structured_data\n  if (surgeryData.postgresql_row_preview?.structured_data) {\n    const preview = surgeryData.postgresql_row_preview\n    return {\n      ...preview.structured_data,\n      // 保留关键的基本信息（优先使用外层值，即使为false也要保留）\n      surgery_id: preview.surgery_id !== undefined ? preview.surgery_id : preview.structured_data?.surgery_id,\n      start_time: preview.start_time !== undefined ? preview.start_time : preview.structured_data?.start_time,\n      end_time: preview.end_time !== undefined ? preview.end_time : preview.structured_data?.end_time,\n      is_remote: preview.is_remote !== undefined ? preview.is_remote : preview.structured_data?.is_remote,\n      has_fault: preview.has_fault !== undefined ? preview.has_fault : preview.structured_data?.has_fault,\n      device_ids: preview.device_ids !== undefined ? preview.device_ids : preview.structured_data?.device_ids,\n      source_log_ids: preview.source_log_ids !== undefined ? preview.source_log_ids : preview.structured_data?.source_log_ids\n    }\n  }\n\n  // 最后返回原始数据\n  return surgeryData\n}\n"],"names":["class","style","header","plain","resetAllFilters","loadDeviceGroups","type","showNormalUpload","data","deviceGroups","loading","prop","label","width","placement","visible","showDeviceFilterPanel","$event","reference","deviceFilterValue","placeholder","clearable","applyDeviceFilter","prefix","size","resetDeviceFilter","default","row","showDeviceDetail","device_id","hospital_name","align","log_count","formatDate","latest_update_time","fixed","openSurgeryDrawerForDevice","currentPage","pageSize","total","deviceTotal","layout","handleDeviceSizeChange","handleDeviceCurrentChange","showDeviceDetailDrawer","title","selectedDevice","direction","handleDrawerClose","uploadLogForDevice","selectedDetailLogs","length","handleBatchAnalyze","disabled","canBatchView","isSameDevice","getBatchViewTitle","handleBatchDownload","canBatchDownload","incompleteLogsMessage","handleBatchDelete","canBatchDelete","userRole","handleBatchReparse","canBatchReparse","getBatchReparseTitle","content","clearDetailSelection","detailOnlyOwn","applyDetailOnlyOwn","resetDetailFilters","loadDetailLogs","detailLogs","detailLoading","handleDetailSelectionChange","showDetailNameFilterPanel","detailNameTimePrefix","applyDetailNameFilter","resetDetailNameFilter","upload_time","getRowStatusType","getRowStatusText","goToLogAnalysis","canView","handleDownload","canDownload","canDeleteLog","handleDelete","status","handleReparse","canReparseLog","parsing","detailCurrentPage","detailPageSize","detailTotal","handleDetailSizeChange","handleDetailCurrentChange","showSurgeryDrawer","surgeryList","surgeryLoading","structured_data","surgery_stats","procedure","start_time","end_time","viewLogsBySurgery","visualizeSurgery","$store","getters","deleteSurgery","surgeryPage","surgeryPageSize","surgeryTotal","s","loadSurgeries","p","showUploadDialog","footer","uploading","submitUpload","canSubmitUpload","uploadFileList","ref","action","uploadUrl","headers","uploadHeaders","beforeUpload","onUploadSuccess","onUploadError","onExceed","onFileChange","onFileRemove","onUploadProgress","multiple","limit","accept","name","tip","clearUpload","file","index","key","originalname","sizeText","removeFile","decryptKey","validateKeyFormat","autoFillDeviceId","trim","beforeKeyUpload","onKeyFileChange","keyFileName","keyError","deviceId","validateDeviceIdFormat","autoFillKey","deviceIdError","showEntriesDialog","logEntries","WebSocketClient","constructor","this","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","maxReconnectDelay","isConnecting","subscriptions","Map","messageHandlers","connectionStatus","handleMessage","bind","handleClose","handleError","handleOpen","connect","readyState","WebSocket","OPEN","console","log","protocol","window","location","backendHost","hostname","backendPort","VUE_APP_BACKEND_PORT","wsPath","VUE_APP_WS_PATH","wsOverride","wsUrl","href","host","addEventListener","event","clearTimeout","connectionTimeout","onopen","onmessage","onclose","onerror","setTimeout","CONNECTING","error","close","handleConnectionTimeout","scheduleReconnect","resubscribeAll","startHeartbeat","triggerEvent","timestamp","Date","now","message","JSON","parse","handleLogStatusChange","handleBatchStatusChange","logId","oldStatus","newStatus","changes","code","reason","stopHeartbeat","subscribeToDevice","warn","has","send","stringify","set","unsubscribeFromDevice","delete","keys","heartbeatInterval","setInterval","clearInterval","delay","Math","min","pow","disconnect","on","handler","get","push","off","handlers","indexOf","splice","forEach","getConnectionStatus","isConnected","getSubscribedDevices","Array","from","websocketClient","String","VUE_APP_WS_AUTO_CONNECT","toLowerCase","components","setup","store","router","overallProgress","processingStatus","uploadRef","keyUploadRef","showNameFilterPanel","nameTimePrefix","lastDetailLogsLoadAt","detailReloadTimer","dateShortcuts","text","value","start","getFullYear","end","getMonth","getDate","filterDeviceId","uploadDeviceId","isDeviceUpload","currentUploadDeviceId","logs","isArray","websocketStatusTitle","websocketStatusType","websocketStatusDescription","includes","Authorization","state","auth","token","every","firstDeviceId","deviceCheckMessage","deviceIds","Set","map","join","hasIncompleteLogs","some","incompleteCount","filter","user","role_id","userId","id","uploader_id","deviceGroupsLoading","lastDeviceGroupsLoadAt","async","options","silent","force","timeParams","buildTimeParams","response","dispatch","page","device_filter","device_groups","pagination","loadLogs","undefined","device","subscribed","buildDetailTimeParams","tp","test","time_prefix","only_own","smartStatusMonitorCleanup","uploadDataForDevice","info","viewSurgeryData","toggleDeviceFocus","focused","success","openSurgeryDrawer","params","resp","api","surgeries","list","e","getLogEntriesByRange","entries","warning","ids","log_id","Boolean","routeData","resolve","open","queryId","remove","selection","limitedSelection","slice","table","document","querySelector","checkboxes","querySelectorAll","checkbox","selected","classList","add","setAttribute","handleSizeChange","handleCurrentChange","applyNameFilter","resetNameFilter","newSize","newPage","totalSize","reduce","sum","f","raw","macRegex","deviceIdRegex","submit","startMonitoringIfDrawerOpen","isMedbotFile","endsWith","isLt200M","isTxtFile","isSystemInfoFile","isLt1M","reader","FileReader","onload","scheduleUpdate","target","result","readAsText","clearFiles","progressFormat","percentage","preventRefresh","_","deletingIds","i","findIndex","l","Number","change","updateWebSocketStatus","statusUpdateTimer","fileList","updateUploadFileList","allUploaded","targetDevice","find","startStatusMonitoring","checkAndUpdateDetailLogs","currentStatusSnapshot","updated_at","hasStatusChange","oldLog","startSmartStatusMonitoring","files","fn","idle","requestIdleCallback","cb","timeRemaining","rawList","normalized","formatFileSize","handleParse","canReparse","msg","blob","Blob","url","URL","createObjectURL","link","createElement","download","filename","click","revokeObjectURL","isDeleting","confirm","confirmButtonText","cancelButtonText","apiError","errorMessage","bytes","k","sizes","floor","parseFloat","toFixed","dateString","toLocaleString","queued","decrypting","parsed","failed","decrypt_failed","parse_failed","file_error","deleting","logIds","toISOString","replace","selectedLogsData","parseInt","isNaN","statusText","config","method","deviceIdsToSubscribe","d","canOperate","__exports__","render","normalizeTimeToISO","timeStr","utcTime","date","getTime","adaptSurgeryData","rawData","structuredData","metadata","postgresql_row_preview","surgery_id","surgery_start_time","surgery_end_time","is_remote","is_remote_surgery","has_fault","has_error","device_ids","source_log_ids","arms","power_cycles","arm1_usage","state_machine_changes","alarm_details","convertAnalysisDataToStructured","standardizedData","standardizeStructuredData","analysisData","structured","network_latency_ms","faults","state_machine","arm_switch_count","left_hand_clutch","right_hand_clutch","foot_clutch","endoscope_pedal","armUsage","instrumentUsage","usage","tool_type","instrumentName","udi","startTime","endTime","energy_activation","arm_id","instrument_usage","time","stateName","network_latency_data","latency","fault","error_code","param1","param2","param3","param4","explanation","power_on_times","shutdown_times","onTimes","offTimes","onIndex","offIndex","onTime","offTime","on_time","off_time","standardized","item","cycle","validateAdaptedData","adaptedData","hasRequiredFields","hasValidArms","armsCount","stateMachineCount","networkLatencyCount","getDataSourceType","surgeryData","openInNewTab","Error","dataSourceType","_dataSource","_originalData","sessionStorage","setItem","routeOptions","path","query","ElMessage"],"sourceRoot":""}