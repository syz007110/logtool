{"version":3,"file":"js/886.4ef57536.js","mappings":"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","sources":["webpack://logtool-frontend/./src/utils/visualizationConfig.js","webpack://logtool-frontend/./src/views/ExplanationTester.vue","webpack://logtool-frontend/./src/views/ExplanationTester.vue?a2ad","webpack://logtool-frontend/./src/utils/surgeryDataAdapter.js","webpack://logtool-frontend/./src/utils/visualizationHelper.js"],"sourcesContent":["// 共享的可视化配置文件\r\n// 用于 SurgeryVisualization.vue 和 ExplanationTester.vue\r\n\r\n// 甘特图可配置样式参数\r\nexport const GANTT_STYLE = {\r\n  // 每个臂行上下的预留留白（像素）\r\n  ROW_GAP_PX: 2,\r\n  // 条的最大厚度（像素上限）\r\n  BAR_MAX_PX: 40,\r\n  // 条厚度占可用行高（去除留白后）的比例 0~1\r\n  BAR_RATIO: 0.8\r\n}\r\n\r\n// 颜色配置：可按器械类型固定颜色，也可按臂分配基础色\r\nexport const GANTT_COLORS = {\r\n  // 器械类型 → 颜色\r\n  TOOL_TYPE_COLORS: {\r\n    '无器械': '#EBBA66',       // 浅橙 - 空白状态\r\n    '持针钳': '#D9EB66',       // 浅黄绿\r\n    '电钩': '#96EB66',         // 青绿\r\n    '双极鸭嘴电凝钳': '#66EB77', // 深绿\r\n    '直剪': '#FFB366',         // 橙色\r\n    '单极弧剪': '#FF9966',     // 橙红\r\n    '双极弧形电凝钳': '#FF6666', // 红色\r\n    '波茨剪': '#FF6666',       // 红色\r\n    '无损伤镊': '#66CCFF',     // 浅蓝\r\n    '-30度内窥镜': '#3399FF',   // 蓝色\r\n    '0度内窥镜': '#0066FF',    // 深蓝\r\n    '30度内窥镜': '#6699FF',   // 中蓝\r\n    '大持针钳': '#99CC66',     // 黄绿色\r\n    '鸭嘴抓钳': '#33CC99',     // 青色\r\n    '鼠齿抓钳': '#00CC99'      // 青色\r\n  },\r\n  // 不同臂的基础颜色（作为 fallback）\r\n  ARM_BASE_COLORS: ['#E28A6A', '#E2C66A', '#C2E26A', '#86E26A']\r\n}\r\n\r\n// 最小化数据转换：保留原始结构，只添加必要的计算字段\r\nexport function normalizeSurgeryData(raw) {\r\n  if (!raw || typeof raw !== 'object') {\r\n    return { \r\n      timeline: {}, \r\n      arms: [], \r\n      state_machine: [], \r\n      is_remote: false, \r\n      surgery_id: null, \r\n      start_time: null, \r\n      end_time: null, \r\n      network_latency_data: [],\r\n      structured_data: null\r\n    }\r\n  }\r\n\r\n  // 如果已经是期望结构，直接返回（保留所有原始字段）\r\n  if (raw.timeline && Array.isArray(raw.arms)) {\r\n    return {\r\n      ...raw,  // 保留所有原始字段\r\n      is_remote: !!raw.is_remote,\r\n      surgery_id: raw.surgery_id || null,\r\n      start_time: raw.start_time || null,\r\n      end_time: raw.end_time || null,\r\n      network_latency_data: Array.isArray(raw.network_latency_data) ? raw.network_latency_data : []\r\n    }\r\n  }\r\n\r\n  // 最小化转换：保留所有原始数据，只添加必要的计算字段\r\n  const hasStructured = !!raw.structured_data\r\n  const source = hasStructured ? raw.structured_data : raw\r\n\r\n  // 只计算时间轴映射（这是可视化必需的）\r\n  const powerOn = source.power_cycles?.[0]?.on_time || raw.start_time || source.start_time\r\n  const powerOffCandidate = source.power_cycles?.[source.power_cycles?.length - 1]?.off_time\r\n  const surgeryStart = raw.start_time || source.start_time\r\n  const surgeryEnd = raw.end_time || source.end_time\r\n  const powerOff = powerOffCandidate ?? null\r\n  const previousSurgeryEnd = raw.previous_end_time || raw.previous_surgery_end_time ||\r\n    source.previous_end_time || source.prev_surgery_end_time || source.last_surgery_end_time\r\n\r\n  // 只计算arms数据（这是可视化必需的）\r\n  const arms = Array.isArray(source.arms)\r\n    ? source.arms.map((a, idx) => {\r\n        const name = a.name || `${a.arm_id ?? idx + 1}号臂`.trim()\r\n        const segments = Array.isArray(a.instrument_usage)\r\n          ? a.instrument_usage\r\n              .filter(u => u && u.start_time && u.end_time)\r\n              .map((u) => ({\r\n                start: u.start_time,\r\n                end: u.end_time,\r\n                udi: u.udi,\r\n                tool_type: u.tool_type\r\n              }))\r\n          : []\r\n        return { name, segments }\r\n      })\r\n    : []\r\n\r\n  const stateMachine = Array.isArray(source.state_machine_changes)\r\n    ? source.state_machine_changes.map(ch => ({ time: ch.time, state: ch.stateName || String(ch.state) }))\r\n    : Array.isArray(source.state_machine) ? source.state_machine : []\r\n  const networkLatency = Array.isArray(source.network_latency_data) ? source.network_latency_data : []\r\n\r\n  // 返回：保留所有原始数据 + 添加必要的计算字段\r\n  return {\r\n    ...raw,  // 保留所有原始字段\r\n    timeline: { powerOn, surgeryStart, surgeryEnd, powerOff, previousSurgeryEnd },\r\n    arms,\r\n    state_machine: stateMachine,\r\n    network_latency_data: networkLatency,\r\n    // 确保关键字段存在\r\n    is_remote: !!(raw.is_remote || source.is_remote_surgery || raw.is_remote_surgery),\r\n    surgery_id: raw.surgery_id || source.surgery_id || null,\r\n    start_time: raw.start_time || source.start_time || null,\r\n    end_time: raw.end_time || source.end_time || null\r\n  }\r\n}\r\n\r\n// 时间转换工具函数\r\nexport function toMs(v) {\r\n  if (v === null || v === undefined || v === '') return NaN\r\n  if (typeof v === 'number' && Number.isFinite(v)) return v\r\n  const t = new Date(v).getTime()\r\n  return Number.isFinite(t) ? t : NaN\r\n}\r\n","<template>\r\n  <div>\r\n    <a-page-header title=\"测试\" sub-title=\"仅管理员可用\" />\r\n    <a-tabs style=\"margin-top: 16px\">\r\n      <a-tab-pane key=\"explanation\" tab=\"释义测试\">\r\n        <a-card>\r\n      <a-form layout=\"vertical\">\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"故障码 (code)\">\r\n              <a-input v-model:value=\"form.code\" placeholder=\"可填日志中的完整故障码如 1010A，或 0X010A\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"子系统 (可选)\">\r\n              <a-input v-model:value=\"form.subsystem\" placeholder=\"如 1-9 或 A\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"自定义模板 (可选，优先使用)\">\r\n              <a-input v-model:value=\"form.template\" placeholder=\"如: 轴{0:d} 错误码 {1:x}\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"6\">\r\n            <a-form-item label=\"参数1\">\r\n              <a-input v-model:value=\"form.param1\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"6\">\r\n            <a-form-item label=\"参数2\">\r\n              <a-input v-model:value=\"form.param2\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"6\">\r\n            <a-form-item label=\"参数3\">\r\n              <a-input v-model:value=\"form.param3\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"6\">\r\n            <a-form-item label=\"参数4\">\r\n              <a-input v-model:value=\"form.param4\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n        <a-space>\r\n          <a-button type=\"primary\" :loading=\"loading\" @click=\"handleParse\">解析</a-button>\r\n          <a-button @click=\"handleReset\">重置</a-button>\r\n        </a-space>\r\n      </a-form>\r\n    </a-card>\r\n    <a-card style=\"margin-top: 16px\" v-if=\"result\">\r\n      <a-descriptions bordered title=\"解析结果\" :column=\"1\">\r\n        <a-descriptions-item label=\"子系统\">{{ result.subsystem }}</a-descriptions-item>\r\n        <a-descriptions-item label=\"臂号\">{{ result.arm }}</a-descriptions-item>\r\n        <a-descriptions-item label=\"关节号\">{{ result.joint }}</a-descriptions-item>\r\n        <a-descriptions-item label=\"模板\">{{ result.template }}</a-descriptions-item>\r\n        <a-descriptions-item label=\"参数\">{{ JSON.stringify(result.params) }}</a-descriptions-item>\r\n        <a-descriptions-item label=\"释义\">{{ result.explanation }}</a-descriptions-item>\r\n      </a-descriptions>\r\n    </a-card>\r\n      </a-tab-pane>\r\n\r\n      <a-tab-pane key=\"viz\" tab=\"可视化测试\">\r\n        <a-card title=\"输入手术结构化数据 (JSON)\">\r\n          <a-textarea\r\n            v-model:value=\"vizJsonText\"\r\n            :auto-size=\"{ minRows: 14 }\"\r\n            placeholder=\"粘贴手术结构化数据，或点击填充示例\"\r\n          />\r\n          <a-space style=\"margin-top: 12px\">\r\n            <a-button type=\"primary\" @click=\"handleRenderViz\">跳转可视化页面</a-button>\r\n            <a-button @click=\"fillVizExample\">填充示例</a-button>\r\n          </a-space>\r\n        </a-card>\r\n        <a-card style=\"margin-top: 16px\" title=\"说明\">\r\n          <div style=\"color: #666; line-height: 1.6;\">\r\n            <p>• 输入手术结构化数据JSON格式</p>\r\n            <p>• 点击\"跳转可视化页面\"将在新标签页打开手术可视化</p>\r\n            <p>• 点击\"填充示例\"可加载测试数据</p>\r\n            <p>• 可视化页面将显示甘特图、状态机变化、网络延时等图表</p>\r\n          </div>\r\n        </a-card>\r\n      </a-tab-pane>\r\n    </a-tabs>\r\n  </div>\r\n  \r\n</template>\r\n\r\n<script>\r\nimport { reactive, ref, onMounted, onBeforeUnmount } from 'vue'\r\nimport api from '../api'\r\nimport { message } from 'ant-design-vue'\r\nimport * as echarts from 'echarts'\r\nimport { GANTT_STYLE, GANTT_COLORS, normalizeSurgeryData, toMs } from '../utils/visualizationConfig'\r\nimport { visualizeSurgery as visualizeSurgeryData } from '../utils/visualizationHelper'\r\n\r\nexport default {\r\n  name: 'ExplanationTester',\r\n  setup() {\r\n    const form = reactive({\r\n      code: '',\r\n      subsystem: '',\r\n      template: '',\r\n      param1: '',\r\n      param2: '',\r\n      param3: '',\r\n      param4: ''\r\n    })\r\n    const loading = ref(false)\r\n    const result = ref(null)\r\n    const vizJsonText = ref('')\r\n    const vizChartRef = ref(null)\r\n    let vizChart = null\r\n\r\n    const handleParse = async () => {\r\n      if (!form.code) {\r\n        message.warning('请填写故障码 code')\r\n        return\r\n      }\r\n      loading.value = true\r\n      try {\r\n        const payload = {\r\n          code: form.code,\r\n          param1: form.param1,\r\n          param2: form.param2,\r\n          param3: form.param3,\r\n          param4: form.param4\r\n        }\r\n        if (form.subsystem) payload.subsystem = form.subsystem\r\n        if (form.template) payload.template = form.template\r\n        const resp = await api.explanations.preview(payload)\r\n        result.value = resp.data\r\n      } catch (e) {\r\n        result.value = null\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    const handleReset = () => {\r\n      form.code = ''\r\n      form.subsystem = ''\r\n      form.template = ''\r\n      form.param1 = ''\r\n      form.param2 = ''\r\n      form.param3 = ''\r\n      form.param4 = ''\r\n      result.value = null\r\n    }\r\n\r\n    const disposeChart = () => {\r\n      if (vizChart) {\r\n        vizChart.dispose()\r\n        vizChart = null\r\n      }\r\n    }\r\n\r\n    const renderViz = (data) => {\r\n      if (!vizChartRef.value) return\r\n      if (!vizChart) {\r\n        vizChart = echarts.init(vizChartRef.value)\r\n      }\r\n      const t0 = toMs(data?.timeline?.powerOn)\r\n      const tPrev = toMs(data?.timeline?.previousSurgeryEnd)\r\n      const t1 = toMs(data?.timeline?.surgeryStart)\r\n      const t2 = toMs(data?.timeline?.surgeryEnd)\r\n      const t3 = toMs(data?.timeline?.powerOff)\r\n\r\n      const arms = Array.isArray(data?.arms) ? data.arms : []\r\n      const categories = arms.map(a => a.name || '未命名')\r\n      const seriesData = []\r\n      // 为不同工具臂分配基础颜色，同一臂内不同器械使用不同色调\r\n      const armBaseColors = GANTT_COLORS.ARM_BASE_COLORS\r\n      const toolColorByArm = {}\r\n      \r\n      arms.forEach((arm, idx) => {\r\n        const segs = Array.isArray(arm.segments) ? arm.segments : []\r\n        const baseColor = armBaseColors[idx % armBaseColors.length]\r\n        \r\n        segs.forEach(seg => {\r\n          const s = toMs(seg.start)\r\n          const e = toMs(seg.end)\r\n          if (Number.isFinite(s) && Number.isFinite(e) && e > s) {\r\n            const key = seg.tool_type || seg.udi || 'unknown'\r\n            if (!toolColorByArm[idx]) toolColorByArm[idx] = {}\r\n            if (!toolColorByArm[idx][key]) {\r\n              // 优先器械类型固定色\r\n              const typeColor = GANTT_COLORS.TOOL_TYPE_COLORS[seg.tool_type || '']\r\n              if (typeColor) {\r\n                toolColorByArm[idx][key] = typeColor\r\n              } else {\r\n                // 否则基于臂基础色生成色调\r\n                const assignedCount = Object.keys(toolColorByArm[idx]).length\r\n                const hueShift = assignedCount * 30\r\n                const saturation = Math.max(0.6, 1 - assignedCount * 0.1)\r\n                const lightness = Math.max(0.4, 0.8 - assignedCount * 0.1)\r\n                toolColorByArm[idx][key] = `hsl(${(idx * 60 + hueShift) % 360}, ${saturation * 100}%, ${lightness * 100}%)`\r\n              }\r\n            }\r\n            const color = toolColorByArm[idx][key]\r\n            seriesData.push({\r\n              name: seg.udi || '',\r\n              value: [idx, s, e, (e - s), seg.udi || '', seg.tool_type || '', seg.start, seg.end],\r\n              itemStyle: { color, opacity: 0.9 },\r\n              tool_type: seg.tool_type || ''\r\n            })\r\n          }\r\n        })\r\n      })\r\n\r\n      // 关键时间点标签（横向 x 轴顶部，非时间线）\r\n      const timelineEvents = []\r\n      if (Number.isFinite(t0)) timelineEvents.push({ time: t0, name: '开机', color: '#52c41a' })\r\n      if (Number.isFinite(tPrev)) timelineEvents.push({ time: tPrev, name: '上一场手术结束', color: '#8c8c8c' })\r\n      if (Number.isFinite(t1)) timelineEvents.push({ time: t1, name: '手术开始', color: '#1890ff' })\r\n      if (Number.isFinite(t2)) timelineEvents.push({ time: t2, name: '手术结束', color: '#fa8c16' })\r\n      if (Number.isFinite(t3)) timelineEvents.push({ time: t3, name: '关机', color: '#f5222d' })\r\n      timelineEvents.sort((a, b) => a.time - b.time)\r\n\r\n      // 计算统一时间范围，防止事件点堆叠与条形裁切\r\n      const allTimes = []\r\n      seriesData.forEach(d => { if (Array.isArray(d.value)) { allTimes.push(d.value[1], d.value[2]) } })\r\n      timelineEvents.forEach(e => { if (Number.isFinite(e.time)) allTimes.push(e.time) })\r\n      const minX = allTimes.length ? Math.min.apply(null, allTimes) : undefined\r\n      const maxX = allTimes.length ? Math.max.apply(null, allTimes) : undefined\r\n\r\n      const option = {\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: (p) => {\r\n            if (Array.isArray(p)) p = p[0]\r\n            if (!p || !p.data) return ''\r\n            // 甘特条目：data.value 为数组\r\n            if (Array.isArray(p.data.value)) {\r\n              const v = p.data.value\r\n              const catIdx = v[0]\r\n              const s = v[1]\r\n              const e = v[2]\r\n              const udiVal = v[4]\r\n              const toolVal = v[5]\r\n              const startTime = v[6]\r\n              const endTime = v[7]\r\n              const dur = Math.round((e - s) / 1000)\r\n              const armName = categories[catIdx]\r\n              const udi = udiVal || p.data.name || ''\r\n              const tool = (toolVal || p.data.tool_type) ? toolVal || p.data.tool_type : ''\r\n              const installTime = startTime ? new Date(startTime).toLocaleString() : ''\r\n              const removeTime = endTime ? new Date(endTime).toLocaleString() : ''\r\n              return `\r\n                <div style=\"padding: 8px;\">\r\n                  <div style=\"font-weight: bold; margin-bottom: 4px;\">${armName}</div>\r\n                  <div>器械类型: ${tool}</div>\r\n                  <div>UDI码: ${udi}</div>\r\n                  <div>使用时长: ${dur}秒</div>\r\n                  <div>安装时刻: ${installTime}</div>\r\n                  <div>拔下时刻: ${removeTime}</div>\r\n                </div>\r\n              `\r\n            }\r\n            // 时间线事件：data 为事件对象 { time, name, color }\r\n            if (p.data && p.data.time && p.data.name) {\r\n              return `${p.data.name}<br/>时间: ${new Date(p.data.time).toLocaleString()}`\r\n            }\r\n            return ''\r\n          }\r\n        },\r\n        grid: { left: 120, right: 40, top: 100, bottom: 110 },\r\n        axisPointer: { link: [{ xAxisIndex: 'all' }], snap: true },\r\n        xAxis: {\r\n          type: 'time',\r\n          position: 'top',\r\n          axisLine: { show: true },\r\n          axisTick: { show: true },\r\n          axisLabel: { color: '#000', formatter: (val) => new Date(val).toLocaleTimeString() },\r\n          min: Number.isFinite(minX) ? minX : undefined,\r\n          max: Number.isFinite(maxX) ? maxX : undefined\r\n        },\r\n        yAxis: {\r\n          type: 'category',\r\n          data: categories,\r\n          axisLine: { show: true },\r\n          axisTick: { show: true },\r\n          axisLabel: { show: true, color: '#000' }\r\n        },\r\n        dataZoom: [\r\n          { type: 'slider', xAxisIndex: 0, filterMode: 'none', height: 20, bottom: 18 },\r\n          { type: 'inside', xAxisIndex: 0, filterMode: 'none' }\r\n        ],\r\n        series: [\r\n          // 手术区间背景色（手术开始~结束）\r\n          (Number.isFinite(t1) && Number.isFinite(t2) && t2 > t1) ? {\r\n            type: 'custom',\r\n            silent: true,\r\n            z: 0,\r\n            renderItem: (params, api) => {\r\n              const yTop = params.coordSys.y\r\n              const totalHeight = params.coordSys.height\r\n              const x1 = api.coord([t1, 0])[0]\r\n              const x2 = api.coord([t2, 0])[0]\r\n              const rect = echarts.graphic.clipRectByRect(\r\n                { x: Math.min(x1, x2), y: yTop, width: Math.abs(x2 - x1), height: totalHeight },\r\n                { x: params.coordSys.x, y: yTop, width: params.coordSys.width, height: totalHeight }\r\n              )\r\n              if (!rect || rect.width <= 0 || rect.height <= 0) return\r\n              return {\r\n                type: 'rect',\r\n                shape: rect,\r\n                style: { fill: '#E6E6FA' }\r\n              }\r\n            },\r\n            data: [0]\r\n          } : {},\r\n          // 顶部标签（仅显示标签，不画时间线）\r\n          {\r\n            type: 'custom',\r\n            z: 15,\r\n            renderItem: (params, api) => {\r\n              const idx = params.dataIndex\r\n              const event = timelineEvents[idx]\r\n              const x = api.coord([event.time, 0])[0]\r\n              // 放在图表下方（dataZoom 上方）\r\n              const axisBottom = params.coordSys.y + params.coordSys.height + 24\r\n              const label = {\r\n                type: 'text',\r\n                style: {\r\n                  text: event.name,\r\n                  x,\r\n                  y: axisBottom,\r\n                  textAlign: 'center',\r\n                  textVerticalAlign: 'bottom',\r\n                  fontSize: 12,\r\n                  fill: '#000'\r\n                }\r\n              }\r\n              return label\r\n            },\r\n            data: timelineEvents\r\n          },\r\n          {\r\n            type: 'custom',\r\n            animation: false,\r\n            renderItem: (params, api) => {\r\n              const categoryIndex = api.value(0)\r\n              const start = api.coord([api.value(1), categoryIndex])\r\n              const end = api.coord([api.value(2), categoryIndex])\r\n              // 使用可配置样式参数计算条厚度与行间距\r\n              const bandSize = api.size([0, 1])[1]\r\n              const usable = Math.max(1, bandSize - GANTT_STYLE.ROW_GAP_PX)\r\n              const barHeight = Math.min(GANTT_STYLE.BAR_MAX_PX, usable * GANTT_STYLE.BAR_RATIO)\r\n              const x = start[0]\r\n              const width = end[0] - start[0]\r\n              const y = start[1] - barHeight / 2\r\n\r\n              const rect = echarts.graphic.clipRectByRect(\r\n                { x, y, width, height: barHeight },\r\n                { x: params.coordSys.x, y: params.coordSys.y, width: params.coordSys.width, height: params.coordSys.height }\r\n              )\r\n              if (!rect || rect.width <= 0 || rect.height <= 0) return\r\n\r\n              // 条内文字：显示器械名称（tool_type），不显示 UDI\r\n              const label = String(api.value(5) || '')\r\n\r\n              return {\r\n                type: 'group',\r\n                children: [\r\n                  {\r\n                    type: 'rect',\r\n                    shape: rect,\r\n                    // 使用 data.itemStyle.color，由 api.style 读取\r\n                    style: api.style({ opacity: 0.9 })\r\n                  },\r\n                  {\r\n                    type: 'text',\r\n                    silent: true,\r\n                    style: {\r\n                      text: label,\r\n                      x: rect.x + 6,\r\n                      y: rect.y + rect.height / 2,\r\n                      fill: '#fff',\r\n                      textAlign: 'left',\r\n                      textVerticalAlign: 'middle',\r\n                      fontSize: 12,\r\n                      fontWeight: 500,\r\n                      overflow: 'truncate',\r\n                      width: Math.max(0, rect.width - 12)\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            encode: { x: [1, 2], y: 0 },\r\n            data: seriesData,\r\n            emphasis: { itemStyle: { opacity: 1 } }\r\n          }\r\n        ]\r\n      }\r\n\r\n      vizChart.setOption(option, true)\r\n      vizChart.resize()\r\n    }\r\n\r\n    const handleRenderViz = () => {\r\n      if (!vizJsonText.value) {\r\n        message.warning('请粘贴手术结构化数据 JSON')\r\n        return\r\n      }\r\n      try {\r\n        const raw = JSON.parse(vizJsonText.value)\r\n        // 使用统一的可视化函数，跳转到可视化页面\r\n        visualizeSurgeryData(raw)\r\n      } catch (e) {\r\n        message.error('JSON 解析失败，请检查格式')\r\n      }\r\n    }\r\n\r\n    const fillVizExample = () => {\r\n      const now = Date.now()\r\n      const example = {\r\n        surgery_id: 'TEST-001',\r\n        start_time: new Date(now + 5 * 60 * 1000).toISOString(),\r\n        end_time: new Date(now + 50 * 60 * 1000).toISOString(),\r\n        is_remote: false,\r\n        structured_data: {\r\n          power_cycles: [\r\n            { on_time: new Date(now).toISOString(), off_time: new Date(now + 55 * 60 * 1000).toISOString() }\r\n          ],\r\n          arms: [\r\n            { \r\n              name: '1号臂', \r\n              arm_id: 1,\r\n              instrument_usage: [\r\n                { \r\n                  start_time: new Date(now + 6 * 60 * 1000).toISOString(), \r\n                  end_time: new Date(now + 10 * 60 * 1000).toISOString(), \r\n                  udi: 'UDI-AAA-001', \r\n                  tool_type: '持针钳' \r\n                },\r\n                { \r\n                  start_time: new Date(now + 15 * 60 * 1000).toISOString(), \r\n                  end_time: new Date(now + 22 * 60 * 1000).toISOString(), \r\n                  udi: 'UDI-AAB-002', \r\n                  tool_type: '电钩' \r\n                }\r\n              ]\r\n            },\r\n            { \r\n              name: '2号臂', \r\n              arm_id: 2,\r\n              instrument_usage: [\r\n                { \r\n                  start_time: new Date(now + 8 * 60 * 1000).toISOString(), \r\n                  end_time: new Date(now + 12 * 60 * 1000).toISOString(), \r\n                  udi: 'UDI-BAA-003', \r\n                  tool_type: '直剪' \r\n                },\r\n                { \r\n                  start_time: new Date(now + 30 * 60 * 1000).toISOString(), \r\n                  end_time: new Date(now + 40 * 60 * 1000).toISOString(), \r\n                  udi: 'UDI-BAB-004', \r\n                  tool_type: '双极鸭嘴电凝钳' \r\n                }\r\n              ]\r\n            },\r\n            { \r\n              name: '3号臂', \r\n              arm_id: 3,\r\n              instrument_usage: [\r\n                { \r\n                  start_time: new Date(now + 20 * 60 * 1000).toISOString(), \r\n                  end_time: new Date(now + 35 * 60 * 1000).toISOString(), \r\n                  udi: 'UDI-CCC-005', \r\n                  tool_type: '0度内窥镜' \r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          state_machine_changes: [\r\n            { time: new Date(now + 5 * 60 * 1000).toISOString(), stateName: '手术开始' },\r\n            { time: new Date(now + 25 * 60 * 1000).toISOString(), stateName: '器械切换' },\r\n            { time: new Date(now + 50 * 60 * 1000).toISOString(), stateName: '手术结束' }\r\n          ],\r\n          previous_end_time: new Date(now - 30 * 60 * 1000).toISOString()\r\n        }\r\n      }\r\n      vizJsonText.value = JSON.stringify(example, null, 2)\r\n    }\r\n\r\n    onMounted(() => {\r\n      const onResize = () => { if (vizChart) vizChart.resize() }\r\n      window.addEventListener('resize', onResize)\r\n    })\r\n    onBeforeUnmount(() => {\r\n      // 注意：匿名处理器不移除，这里主要释放图表\r\n      disposeChart()\r\n    })\r\n\r\n    return {\r\n      form, loading, result, handleParse, handleReset,\r\n      vizJsonText, vizChartRef, handleRenderViz, fillVizExample\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n\r\n","import { render } from \"./ExplanationTester.vue?vue&type=template&id=54798988\"\nimport script from \"./ExplanationTester.vue?vue&type=script&lang=js\"\nexport * from \"./ExplanationTester.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * 手术数据适配器\n * 统一处理不同来源的手术数据，确保可视化组件能正确解析\n */\n\n/**\n * 将时间格式标准化为ISO UTC格式\n * 处理数据库中的UTC时间格式转换\n * @param {string} timeStr - 时间字符串\n * @returns {string} ISO格式的UTC时间字符串\n */\nfunction normalizeTimeToISO (timeStr) {\n  if (!timeStr) return null\n\n  try {\n    // 如果是数据库格式的UTC时间字符串 (YYYY-MM-DD HH:mm:ss)\n    if (typeof timeStr === 'string' && /^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(timeStr)) {\n      // 添加UTC标识符\n      const utcTime = timeStr.replace(' ', 'T') + 'Z'\n      const date = new Date(utcTime)\n\n      if (isNaN(date.getTime())) {\n        console.warn('⚠️ 无效的时间格式:', timeStr)\n        return timeStr\n      }\n\n      // 返回ISO格式的UTC时间\n      return date.toISOString()\n    }\n\n    // 如果已经是ISO格式或时间戳，直接返回\n    return timeStr\n  } catch (error) {\n    console.warn('⚠️ 时间转换失败:', timeStr, error)\n    return timeStr\n  }\n}\n\n/**\n * 统一的手术数据适配器\n * @param {Object} rawData - 原始手术数据（可能来自统计页面或数据库）\n * @returns {Object} 标准化的手术数据\n */\nexport function adaptSurgeryData (rawData) {\n  if (!rawData) {\n    console.warn('⚠️ 手术数据为空')\n    return null\n  }\n\n  console.log('🔧 开始适配手术数据:', rawData)\n\n  // 提取结构化数据\n  let structuredData = null\n  let metadata = {}\n\n  // 情况1：手术统计页面的数据格式\n  if (rawData.postgresql_row_preview?.structured_data) {\n    structuredData = rawData.postgresql_row_preview.structured_data\n    metadata = {\n      surgery_id: rawData.surgery_id || rawData.postgresql_row_preview.surgery_id,\n      // 统一标准化为ISO UTC\n      start_time: normalizeTimeToISO(rawData.surgery_start_time || rawData.postgresql_row_preview.start_time),\n      end_time: normalizeTimeToISO(rawData.surgery_end_time || rawData.postgresql_row_preview.end_time),\n      is_remote: rawData.is_remote_surgery || rawData.postgresql_row_preview.is_remote,\n      has_fault: rawData.has_error || rawData.postgresql_row_preview.has_fault,\n      device_ids: rawData.postgresql_row_preview.device_ids || [],\n      source_log_ids: rawData.postgresql_row_preview.source_log_ids || []\n    }\n  } else if (rawData.structured_data) {\n    // 情况2：数据库手术记录的数据格式\n    structuredData = rawData.structured_data\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.start_time),\n      end_time: normalizeTimeToISO(rawData.end_time),\n      is_remote: rawData.is_remote,\n      has_fault: rawData.has_fault,\n      device_ids: rawData.device_ids || [],\n      source_log_ids: rawData.source_log_ids || []\n    }\n  } else if (rawData.arms || rawData.surgery_stats || rawData.power_cycles) {\n    // 情况3：直接传入的结构化数据\n    structuredData = rawData\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.start_time || rawData.surgery_start_time),\n      end_time: normalizeTimeToISO(rawData.end_time || rawData.surgery_end_time),\n      is_remote: rawData.is_remote,\n      has_fault: rawData.has_fault,\n      device_ids: rawData.device_ids || [],\n      source_log_ids: rawData.source_log_ids || []\n    }\n  } else if (rawData.arm1_usage || rawData.state_machine_changes || rawData.alarm_details) {\n    // 情况4：手术统计页面的原始分析数据\n    structuredData = convertAnalysisDataToStructured(rawData)\n    metadata = {\n      surgery_id: rawData.surgery_id,\n      start_time: normalizeTimeToISO(rawData.surgery_start_time),\n      end_time: normalizeTimeToISO(rawData.surgery_end_time),\n      is_remote: rawData.is_remote_surgery,\n      has_fault: rawData.has_error,\n      device_ids: [],\n      source_log_ids: rawData.log_id ? [rawData.log_id] : []\n    }\n  }\n\n  if (!structuredData) {\n    console.warn('⚠️ 无法识别的数据格式:', rawData)\n    return null\n  }\n\n  // 标准化结构化数据\n  const standardizedData = standardizeStructuredData(structuredData)\n\n  // 合并元数据\n  const result = {\n    ...standardizedData,\n    ...metadata\n  }\n\n  console.log('✅ 手术数据适配完成:', result)\n  return result\n}\n\n/**\n * 将分析器原始数据转换为结构化数据格式\n * @param {Object} analysisData - 分析器原始数据\n * @returns {Object} 结构化数据\n */\nfunction convertAnalysisDataToStructured (analysisData) {\n  const structured = {\n    power_cycles: [],\n    arms: [],\n    surgery_stats: {\n      success: !analysisData.has_error,\n      network_latency_ms: [],\n      faults: [],\n      state_machine: [],\n      arm_switch_count: 0,\n      left_hand_clutch: 0,\n      right_hand_clutch: 0,\n      foot_clutch: 0,\n      endoscope_pedal: 0\n    }\n  }\n\n  // 转换器械使用数据\n  for (let i = 1; i <= 4; i++) {\n    const armUsage = analysisData[`arm${i}_usage`] || []\n    const instrumentUsage = armUsage.map(usage => ({\n      tool_type: usage.instrumentName || usage.tool_type || '未知器械',\n      udi: usage.udi || '无UDI',\n      start_time: normalizeTimeToISO(usage.startTime || usage.start_time),\n      end_time: normalizeTimeToISO(usage.endTime || usage.end_time),\n      energy_activation: []\n    }))\n\n    structured.arms.push({\n      arm_id: i,\n      instrument_usage: instrumentUsage\n    })\n  }\n\n  // 转换状态机数据\n  if (analysisData.state_machine_changes && Array.isArray(analysisData.state_machine_changes)) {\n    structured.surgery_stats.state_machine = analysisData.state_machine_changes.map(change => ({\n      time: normalizeTimeToISO(change.time),\n      state: change.stateName || String(change.state)\n    }))\n  }\n\n  // 转换网络延迟数据\n  if (analysisData.network_latency_data && Array.isArray(analysisData.network_latency_data)) {\n    structured.surgery_stats.network_latency_ms = analysisData.network_latency_data.map(data => ({\n      time: normalizeTimeToISO(data.timestamp),\n      latency: data.latency\n    }))\n  }\n\n  // 转换故障数据\n  if (analysisData.alarm_details && Array.isArray(analysisData.alarm_details)) {\n    structured.surgery_stats.faults = analysisData.alarm_details.map(fault => ({\n      timestamp: normalizeTimeToISO(fault.time),\n      error_code: fault.code,\n      param1: '',\n      param2: '',\n      param3: '',\n      param4: '',\n      explanation: fault.message,\n      log_id: analysisData.log_id\n    }))\n  }\n\n  // 转换电源循环数据\n  if (analysisData.power_on_times && analysisData.shutdown_times) {\n    const onTimes = analysisData.power_on_times\n    const offTimes = analysisData.shutdown_times\n\n    // 智能配对开机和关机时间\n    let onIndex = 0\n    let offIndex = 0\n\n    while (onIndex < onTimes.length || offIndex < offTimes.length) {\n      const onTime = onIndex < onTimes.length ? onTimes[onIndex] : null\n      const offTime = offIndex < offTimes.length ? offTimes[offIndex] : null\n\n      structured.power_cycles.push({\n        on_time: normalizeTimeToISO(onTime),\n        off_time: normalizeTimeToISO(offTime)\n      })\n\n      if (onTime && offTime) {\n        onIndex++\n        offIndex++\n      } else if (onTime) {\n        onIndex++\n      } else {\n        offIndex++\n      }\n    }\n  }\n\n  return structured\n}\n\n/**\n * 标准化结构化数据\n * @param {Object} structuredData - 结构化数据\n * @returns {Object} 标准化后的数据\n */\nfunction standardizeStructuredData (structuredData) {\n  const standardized = {\n    arms: structuredData.arms || [],\n    power_cycles: structuredData.power_cycles || [],\n    surgery_stats: {\n      success: structuredData.surgery_stats?.success ?? true,\n      network_latency_ms: structuredData.surgery_stats?.network_latency_ms || [],\n      faults: structuredData.surgery_stats?.faults || [],\n      state_machine: structuredData.surgery_stats?.state_machine || [],\n      arm_switch_count: structuredData.surgery_stats?.arm_switch_count || 0,\n      left_hand_clutch: structuredData.surgery_stats?.left_hand_clutch || 0,\n      right_hand_clutch: structuredData.surgery_stats?.right_hand_clutch || 0,\n      foot_clutch: structuredData.surgery_stats?.foot_clutch || 0,\n      endoscope_pedal: structuredData.surgery_stats?.endoscope_pedal || 0\n    }\n  }\n\n  // 确保 arms 数组格式正确\n  if (!Array.isArray(standardized.arms)) {\n    standardized.arms = []\n  }\n\n  // 确保每个 arm 都有正确的结构，并转换时间\n  for (let i = 0; i < standardized.arms.length; i++) {\n    if (!standardized.arms[i].arm_id) {\n      standardized.arms[i].arm_id = i + 1\n    }\n    if (!standardized.arms[i].instrument_usage) {\n      standardized.arms[i].instrument_usage = []\n    } else {\n      // 转换器械使用时间\n      standardized.arms[i].instrument_usage = standardized.arms[i].instrument_usage.map(usage => ({\n        ...usage,\n        start_time: normalizeTimeToISO(usage.start_time),\n        end_time: normalizeTimeToISO(usage.end_time)\n      }))\n    }\n  }\n\n  // 转换状态机数据时间\n  if (standardized.surgery_stats.state_machine) {\n    standardized.surgery_stats.state_machine = standardized.surgery_stats.state_machine.map(item => ({\n      ...item,\n      time: normalizeTimeToISO(item.time)\n    }))\n  }\n\n  // 转换网络延迟数据时间\n  if (standardized.surgery_stats.network_latency_ms) {\n    standardized.surgery_stats.network_latency_ms = standardized.surgery_stats.network_latency_ms.map(item => ({\n      ...item,\n      time: normalizeTimeToISO(item.time)\n    }))\n  }\n\n  // 转换故障数据时间\n  if (standardized.surgery_stats.faults) {\n    standardized.surgery_stats.faults = standardized.surgery_stats.faults.map(fault => ({\n      ...fault,\n      timestamp: normalizeTimeToISO(fault.timestamp)\n    }))\n  }\n\n  // 转换电源循环数据时间\n  if (standardized.power_cycles) {\n    standardized.power_cycles = standardized.power_cycles.map(cycle => ({\n      on_time: normalizeTimeToISO(cycle.on_time),\n      off_time: normalizeTimeToISO(cycle.off_time)\n    }))\n  }\n\n  return standardized\n}\n\n/**\n * 验证适配后的数据是否完整\n * @param {Object} adaptedData - 适配后的数据\n * @returns {boolean} 是否有效\n */\nexport function validateAdaptedData (adaptedData) {\n  if (!adaptedData) return false\n\n  const hasRequiredFields = !!(\n    adaptedData.surgery_id &&\n    adaptedData.start_time &&\n    adaptedData.arms &&\n    adaptedData.surgery_stats\n  )\n\n  const hasValidArms = Array.isArray(adaptedData.arms) && adaptedData.arms.length > 0\n\n  console.log('🔍 数据验证结果:', {\n    hasRequiredFields,\n    hasValidArms,\n    armsCount: adaptedData.arms?.length || 0,\n    stateMachineCount: adaptedData.surgery_stats?.state_machine?.length || 0,\n    networkLatencyCount: adaptedData.surgery_stats?.network_latency_ms?.length || 0\n  })\n\n  return hasRequiredFields && hasValidArms\n}\n\n/**\n * 获取数据来源类型\n * @param {Object} rawData - 原始数据\n * @returns {string} 数据来源类型\n */\nexport function getDataSourceType (rawData) {\n  if (!rawData) return 'unknown'\n\n  if (rawData.postgresql_row_preview?.structured_data) {\n    return 'surgery_statistics'\n  } else if (rawData.structured_data) {\n    return 'database_record'\n  } else if (rawData.arms || rawData.surgery_stats || rawData.power_cycles) {\n    return 'structured_data'\n  } else if (rawData.arm1_usage || rawData.state_machine_changes || rawData.alarm_details) {\n    return 'analysis_data'\n  }\n\n  return 'unknown'\n}\n","// 统一的手术数据可视化辅助函数\nimport router from '../router'\nimport { adaptSurgeryData, validateAdaptedData, getDataSourceType } from './surgeryDataAdapter'\n\n/**\n * 统一的手术数据可视化函数\n * 使用数据适配器统一处理不同来源的手术数据\n *\n * @param {Object} surgeryData - 手术数据对象\n * @param {Object} options - 可选参数\n * @param {boolean} options.openInNewTab - 是否在新标签页打开，默认true\n * @param {string} options.queryId - 查询ID，用于日志解析页面的可视化\n */\nexport function visualizeSurgery (surgeryData, options = {}) {\n  const { openInNewTab = true, queryId = null } = options\n\n  try {\n    // 确保有数据\n    if (!surgeryData) {\n      throw new Error('手术数据不能为空')\n    }\n\n    // 添加调试信息\n    console.log('🔧 开始处理手术数据可视化:', surgeryData)\n    const dataSourceType = getDataSourceType(surgeryData)\n    console.log('📊 数据来源类型:', dataSourceType)\n\n    // 使用数据适配器统一处理数据\n    const adaptedData = adaptSurgeryData(surgeryData)\n    \n    if (!adaptedData) {\n      throw new Error('数据适配失败，无法识别的数据格式')\n    }\n\n    // 验证适配后的数据\n    if (!validateAdaptedData(adaptedData)) {\n      throw new Error('数据验证失败，缺少必要字段')\n    }\n\n    // 添加数据来源信息\n    adaptedData._dataSource = dataSourceType\n    adaptedData._originalData = surgeryData\n\n    console.log('✅ 数据适配成功:', adaptedData)\n\n    // 将数据存储到sessionStorage\n    sessionStorage.setItem('surgeryVizData', JSON.stringify(adaptedData))\n\n    // 构建路由参数\n    const routeOptions = { path: '/surgery-visualization' }\n    if (queryId) {\n      routeOptions.query = { id: queryId }\n    }\n\n    const routeData = router.resolve(routeOptions)\n\n    // 打开可视化页面\n    if (openInNewTab) {\n      window.open(routeData.href, '_blank')\n    } else {\n      // 如果在当前页面打开，使用push方式\n      router.push(routeOptions)\n    }\n  } catch (error) {\n    console.error('❌ 可视化手术数据失败:', error)\n    // 这里可以添加用户友好的错误提示\n    if (window.ElMessage) {\n      window.ElMessage.error('可视化手术数据失败: ' + error.message)\n    }\n  }\n}\n\n/**\n * 验证手术数据是否包含可视化所需的基本信息\n * @param {Object} surgeryData - 手术数据\n * @returns {boolean} 是否有效\n */\nexport function validateSurgeryData (surgeryData) {\n  if (!surgeryData) return false\n\n  // 检查是否有structured_data\n  const hasStructuredData = surgeryData.structured_data ||\n                           surgeryData.postgresql_row_preview?.structured_data\n\n  // 检查structured_data中是否有必要字段\n  if (hasStructuredData) {\n    const structuredData = surgeryData.structured_data || surgeryData.postgresql_row_preview.structured_data\n    return !!(structuredData.arms || structuredData.timeline || structuredData.power_cycles)\n  }\n\n  return false\n}\n\n/**\n * 从手术数据中提取可视化所需的数据\n * @param {Object} surgeryData - 手术数据\n * @returns {Object} 提取的数据\n */\nexport function extractVisualizationData (surgeryData) {\n  if (!surgeryData) return null\n\n  // 如果是PostgreSQL格式的数据，需要保留基本信息并合并structured_data\n  if (surgeryData.structured_data) {\n    // 保留外层的基本信息，并将structured_data合并进去\n    return {\n      ...surgeryData.structured_data,\n      // 保留关键的基本信息（优先使用外层值，即使为false也要保留）\n      surgery_id: surgeryData.surgery_id !== undefined ? surgeryData.surgery_id : surgeryData.structured_data.surgery_id,\n      start_time: surgeryData.start_time !== undefined ? surgeryData.start_time : surgeryData.structured_data.start_time,\n      end_time: surgeryData.end_time !== undefined ? surgeryData.end_time : surgeryData.structured_data.end_time,\n      is_remote: surgeryData.is_remote !== undefined ? surgeryData.is_remote : surgeryData.structured_data.is_remote,\n      has_fault: surgeryData.has_fault !== undefined ? surgeryData.has_fault : surgeryData.structured_data.has_fault,\n      device_ids: surgeryData.device_ids !== undefined ? surgeryData.device_ids : surgeryData.structured_data.device_ids,\n      source_log_ids: surgeryData.source_log_ids !== undefined ? surgeryData.source_log_ids : surgeryData.structured_data.source_log_ids\n    }\n  }\n\n  // 其次使用postgresql_row_preview中的structured_data\n  if (surgeryData.postgresql_row_preview?.structured_data) {\n    const preview = surgeryData.postgresql_row_preview\n    return {\n      ...preview.structured_data,\n      // 保留关键的基本信息（优先使用外层值，即使为false也要保留）\n      surgery_id: preview.surgery_id !== undefined ? preview.surgery_id : preview.structured_data?.surgery_id,\n      start_time: preview.start_time !== undefined ? preview.start_time : preview.structured_data?.start_time,\n      end_time: preview.end_time !== undefined ? preview.end_time : preview.structured_data?.end_time,\n      is_remote: preview.is_remote !== undefined ? preview.is_remote : preview.structured_data?.is_remote,\n      has_fault: preview.has_fault !== undefined ? preview.has_fault : preview.structured_data?.has_fault,\n      device_ids: preview.device_ids !== undefined ? preview.device_ids : preview.structured_data?.device_ids,\n      source_log_ids: preview.source_log_ids !== undefined ? preview.source_log_ids : preview.structured_data?.source_log_ids\n    }\n  }\n\n  // 最后返回原始数据\n  return surgeryData\n}\n"],"names":["GANTT_STYLE","ROW_GAP_PX","BAR_MAX_PX","BAR_RATIO","GANTT_COLORS","TOOL_TYPE_COLORS","ARM_BASE_COLORS","toMs","v","undefined","NaN","Number","isFinite","t","Date","getTime","title","style","key","tab","layout","gutter","span","label","value","form","code","placeholder","subsystem","template","param1","param2","param3","param4","type","loading","handleParse","handleReset","bordered","column","result","arm","joint","JSON","stringify","params","explanation","vizJsonText","minRows","handleRenderViz","fillVizExample","name","setup","vizChartRef","vizChart","async","payload","resp","api","explanations","preview","data","e","message","warning","disposeChart","dispose","raw","parse","error","now","example","surgery_id","start_time","toISOString","end_time","is_remote","structured_data","power_cycles","on_time","off_time","arms","arm_id","instrument_usage","udi","tool_type","state_machine_changes","time","stateName","previous_end_time","onResize","resize","window","addEventListener","__exports__","render","normalizeTimeToISO","timeStr","test","utcTime","replace","date","isNaN","console","warn","adaptSurgeryData","rawData","log","structuredData","metadata","postgresql_row_preview","surgery_start_time","surgery_end_time","is_remote_surgery","has_fault","has_error","device_ids","source_log_ids","surgery_stats","arm1_usage","alarm_details","convertAnalysisDataToStructured","log_id","standardizedData","standardizeStructuredData","analysisData","structured","success","network_latency_ms","faults","state_machine","arm_switch_count","left_hand_clutch","right_hand_clutch","foot_clutch","endoscope_pedal","i","armUsage","instrumentUsage","map","usage","instrumentName","startTime","endTime","energy_activation","push","Array","isArray","change","state","String","network_latency_data","timestamp","latency","fault","error_code","power_on_times","shutdown_times","onTimes","offTimes","onIndex","offIndex","length","onTime","offTime","standardized","item","cycle","validateAdaptedData","adaptedData","hasRequiredFields","hasValidArms","armsCount","stateMachineCount","networkLatencyCount","getDataSourceType","visualizeSurgery","surgeryData","options","openInNewTab","queryId","Error","dataSourceType","_dataSource","_originalData","sessionStorage","setItem","routeOptions","path","query","id","routeData","resolve","open","href","ElMessage"],"sourceRoot":""}