{"version":3,"file":"js/437.1467b344.js","mappings":"qNACOA,MAAM,gC,SAUJA,MAAM,oB,GAEFA,MAAM,iB,6BAwBVA,MAAM,oB,GAEFA,MAAM,iB,aAgCFA,MAAM,kB,GAQNA,MAAM,uB,GAEJA,MAAM,oB,GAEFA,MAAM,e,GAEJA,MAAM,U,GAgCZA,MAAM,uB,GAQLA,MAAM,yB,YAWLA,MAAM,e,GAORA,MAAM,yB,GAEJA,MAAM,8B,GACJA,MAAM,yB,GACHA,MAAM,iB,GACNA,MAAM,c,GAETA,MAAM,4B,GAKJA,MAAM,8B,GACJA,MAAM,wB,GAUVA,MAAM,mB,GACHA,MAAM,c,GACNA,MAAM,c,GAKXA,MAAM,gB,GAMFA,MAAM,c,GACJA,MAAM,e,GAaRA,MAAM,0B,GACJA,MAAM,a,GAEHA,MAAM,Y,GAETA,MAAM,oB,GAuB+CA,MAAM,e,GAMvDA,MAAM,sB,GACJA,MAAM,oB,GACJA,MAAM,oB,GAGNA,MAAM,mB,GACNA,MAAM,wB,GAGVA,MAAM,0B,GACJA,MAAM,oB,GAcAA,MAAM,mB,GACHA,MAAM,gB,GAOnBA,MAAM,e,GAWhBA,MAAM,sB,SAuCqCA,MAAM,gB,IAcjDA,MAAM,iB,mhBAlUvB,QA0UM,MA1UN,EA0UM,C,eAxUJ,QAKM,OALDA,MAAM,cAAY,EACrB,QAGM,OAHDA,MAAM,iBAAe,EACxB,QAAgC,MAA5BA,MAAM,cAAa,SACvB,QAA6C,KAA1CA,MAAM,iBAAgB,wB,IAKQ,GAAAC,UAAUC,QAAW,GAAAC,W,4BAA1D,QAuBM,MAvBN,EAuBM,EAtBJ,QAqBU,IArBDH,MAAM,cAAY,C,iBACzB,IAmBM,EAnBN,QAmBM,MAnBN,EAmBM,EAlBJ,QAAkD,IAAzCA,MAAM,cAAY,C,iBAAC,IAAY,EAAZ,QAAY,M,mBACxC,QAAe,UAAX,UAAM,IACD,GAAAI,gBAAkB,I,WAA3B,QAEI,MAF0B,SACxB,QAAG,GAAAA,iBAAkB,qBAC3B,M,WACA,QAEI,MAFM,qCAIV,QAQY,IAPVC,KAAK,UACJ,QAAO,GAAAC,YACPC,QAAS,GAAAJ,UACTK,SAA8B,IAApB,GAAAJ,iB,kBAEX,IAAmC,EAAnC,QAAmC,S,iBAA1B,IAAgB,EAAhB,QAAgB,M,eAAU,KACnC,QAAG,GAAAK,yBAAqB,K,uDAOK,GAAAR,UAAUC,QAAU,GAAAC,Y,WAAzD,QAQM,MARN,EAQM,EAPJ,QAMU,IANDH,MAAM,cAAY,C,iBACzB,IAIM,EAJN,QAIM,MAJN,EAIM,EAHJ,QAAiD,IAAxCA,MAAM,cAAY,C,iBAAC,IAAW,EAAX,QAAW,M,mBACvC,QAAoB,UAAhB,eAAW,I,aACf,QAAuB,SAApB,oBAAgB,Q,sBAMzB,QA0RM,UAtRJ,QAqRU,IArRDA,MAAM,YAAU,C,iBACvB,IAmRU,EAnRV,QAmRU,I,WAlRC,GAAAU,U,qCAAA,GAAS,aAClBL,KAAK,OACJ,WAAW,GAAAM,eACXC,MAAM,EACN,eAAc,GAAAC,qBACdC,SAAS,EACTC,UAAU,EACVC,SAAS,G,kBAGR,IAA4B,G,aAD9B,QAwQc,mBAvQM,GAAAf,UAAXgB,K,WADT,QAwQc,IAtQXC,IAAKD,EAAQE,GACbC,MAAOH,EAAQI,WACfC,KAAML,EAAQE,GAAGI,WACjB,kBAAiBN,EAAQE,I,kBAG1B,IAKM,EALN,QAKM,MALN,EAKM,EAJJ,QAGY,IAHDd,KAAK,UAAW,QAAK,GAAE,GAAAmB,aAAaP,EAAQE,K,kBACrD,IAA+B,EAA/B,QAA+B,S,iBAAtB,IAAY,EAAZ,QAAY,M,2BAAU,mB,iCAMnC,QAoDM,MApDN,EAoDM,EAlDJ,QAiCM,MAjCN,EAiCM,EAhCJ,QA+BU,IA/BDnB,MAAM,aAAW,C,iBACxB,IAcM,EAdN,QAcM,MAdN,EAcM,C,aAbJ,QAA6B,OAAxBA,MAAM,QAAO,SAAK,KACvB,QAWM,MAXN,EAWM,CATIiB,EAAQQ,YAAc,I,WAD9B,QASS,I,MAPPpB,KAAK,SACLqB,KAAK,QACL1B,MAAM,YACL,QAAK,GAAE,GAAA2B,kBAAkBV,EAAQE,IAClCS,MAAA,oB,kBACD,IAED,c,QAFC,e,oDAOL,QAYU,IAXRC,UAAU,WACTC,QAAS,GAAAC,wBAAwBd,GAASf,OAAS,EACnD,gBAAc,EACfF,MAAM,iB,kBAGJ,IAA0D,G,aAD5D,QAKE,mBAJyB,GAAA+B,wBAAwBd,GAAO,CAAhDe,EAAOC,M,WADjB,QAKE,IAHCf,IAAG,SAAWe,IACdC,MAAOF,EAAMZ,MACbe,YAAa,GAAAC,WAAWJ,EAAMK,O,iFAOvC,QAaM,MAbN,EAaM,EAZJ,QAWU,IAXDrC,MAAM,oBAAkB,C,iBAC/B,IAEM,C,aAFN,QAEM,OAFDA,MAAM,gBAAc,EACvB,QAAuC,OAAlCA,MAAM,eAAc,c,KAI3B,QAIM,MAJN,EAIM,EADJ,QAAqF,OAA/EmB,GAAE,qBAAuBF,EAAQE,KAAMS,MAAA,8B,qCAOrD,QAiJU,IAjJD5B,MAAM,kBAAgB,CAClBsC,QAAM,QACf,IAGM,EAHN,QAGM,MAHN,EAGM,C,aAFJ,QAAiB,YAAX,QAAI,KACV,QAAmE,IAA3DjC,KAAK,QAAM,C,iBAAC,IAAO,E,QAAP,WAAO,QAAGY,EAAQsB,gBAAiB,MAAG,K,gCAK9D,IA4HM,EA5HN,QA4HM,MA5HN,EA4HM,EA1HJ,QAyBM,MAzBN,EAyBM,EAxBJ,QAGM,MAHN,EAGM,EAFJ,QAAuE,OAAvE,EAA4B,SAAK,QAAGtB,EAAQsB,gBAAiB,MAAG,IAChE,QAA8H,OAA9H,EAAyB,SAAK,QAAG,GAAAH,WAAWnB,EAAQuB,qBAAsB,OAAG,QAAG,GAAAJ,WAAWnB,EAAQwB,mBAAgB,MAErH,QAeM,MAfN,EAeM,C,eAdJ,QAGM,OAHDzC,MAAM,iBAAe,EACxB,QAAiC,OAA5BA,MAAM,mBACX,QAAuC,QAAjCA,MAAM,gBAAe,W,KAE7B,QASM,MATN,EASM,EARJ,QAOM,MAPN,EAOM,EANJ,QAKM,OAJJA,MAAM,2BACL4B,OAAK,QAAE,GAAAc,wBAAwBzB,K,cAEhC,QAA+C,QAAzCjB,MAAM,wBAAuB,SAAK,K,UAKhD,QAGM,MAHN,EAGM,EAFJ,QAA8F,OAA9F,GAA8F,QAAlE,GAAA2C,gBAAgB,GAAAC,yBAAyB3B,GAAS4B,QAAK,IACnF,QAA4F,OAA5F,GAA4F,QAAhE,GAAAF,gBAAgB,GAAAC,yBAAyB3B,GAAS6B,MAAG,QAKrF,QA6FM,MA7FN,EA6FM,G,aA5FJ,QA2FM,mBA1FwB,GAAAC,aAAa9B,GAAO,CAAxC+B,EAAUf,M,WADpB,QA2FM,OAzFHf,IAAKe,EACNjC,MAAM,Y,EAEN,QAYM,MAZN,EAYM,EAXJ,QAUM,MAVN,EAUM,EATJ,QAQY,IAPV0B,KAAK,QACLrB,KAAK,UACL4C,MAAA,GACC,QAAK,GAAE,GAAAC,iBAAiBjC,EAAQE,GAAIc,I,kBAErC,IAAgC,EAAhC,QAAgC,S,iBAAvB,IAAa,EAAb,QAAa,M,6BAAU,W,oCAMtC,QAyBM,MAzBN,EAyBM,EAxBJ,QAGM,MAHN,EAGM,EAFJ,QAAyD,OAApDjC,OAAK,SAAC,YAAW,OAAgBiC,EAAQ,O,SAC9C,QAAiD,OAAjD,EAAuB,QAAI,QAAGA,EAAQ,GAAH,MAErC,QAmBM,MAnBN,EAmBM,G,aAlBJ,QAiBM,mBAhB8B,GAAAkB,uBAAuBH,EAAU/B,GAAO,CAAlEmC,EAASC,M,WADnB,QAiBM,OAfHnC,IAAKmC,EACNrD,OAAK,SAAC,mBAAkB,OACTiC,EAAQ,MACtBL,OAAK,QAAEwB,I,EAER,QASa,IARVE,QAAO,GAAK,GAAAC,yBAAyBH,EAASJ,EAAU/B,KACzDuC,UAAU,MACT,cAAY,EACZ,eAAc,sB,kBAEf,IAEM,gBAFN,QAEM,OAFDxD,MAAM,mBAAiB,EAC1B,QAAmC,QAA7BA,MAAM,mB,sDAOtB,QA4CyB,S,iBA3CvB,IA0CM,E,SA1CN,QA0CM,MA1CN,EA0CM,G,aAzCJ,QAoCM,mBAnC8B,GAAAyD,sBAAsBT,GAAQ,CAAxDU,EAAcC,M,WADxB,QAoCM,OAlCHzC,IAAKyC,EACN3D,MAAM,e,EAEN,QAQM,MARN,EAQM,EAPJ,QAMM,MANN,EAMM,EALJ,QAEM,MAFN,GAEM,QADD0D,EAAaE,gBAAc,IAEhC,QAAqD,MAArD,EAA6B,SAAK,QAAGD,GAAO,IAC5C,QAA0F,MAA1F,EAAkC,WAAO,QAAG,GAAAE,wBAAwBH,IAAY,QAGpF,QAqBM,MArBN,EAqBM,EApBJ,QAmBM,MAnBN,EAmBM,G,aAlBJ,QAiBM,mBAhB0BA,EAAaI,OAAM,CAAzCC,EAAOC,M,WADjB,QAiBM,OAfH9C,IAAK8C,EACNhE,OAAK,SAAC,mBAAkB,OACTiC,EAAQ,MACtBL,OAAK,QAAE,GAAAqC,sBAAsBF,EAAO9C,K,EAErC,QASa,IARVqC,QAAO,MAAQS,EAAMH,sBAAsB,GAAAxB,WAAW2B,EAAMG,gBAAgB,GAAA9B,WAAW2B,EAAMI,gBAAgBC,KAAKC,OAAO,IAAIC,KAAKP,EAAMI,SAAW,IAAIG,KAAKP,EAAMG,YAAc,IAAO,QACxLV,UAAU,MACT,cAAY,EACZ,eAAc,sB,kBAEf,IAEM,EAFN,QAEM,MAFN,EAEM,EADJ,QAAsE,OAAtE,GAAsE,QAAxC,GAAAe,eAAeR,EAAO9C,IAAO,O,kDAOvE,QAGM,MAHN,EAGM,EAFJ,QAAoD,IAA3CjB,MAAM,eAAa,C,iBAAC,IAAa,EAAb,QAAa,M,eAAU,cAC3C,QAAG,GAAAwE,cAAcxB,IAAQ,M,YAxCzB,GAAAyB,kBAAkBxD,EAAQE,GAAK,IAAMc,Q,0BAiD1D,QAQM,MARN,EAQM,C,eAPJ,QAEM,OAFDjC,MAAM,cAAc4B,MAAA,6C,EACvB,QAAiB,YAAX,U,KAER,QAGW,IAHA8C,KAAM,GAAAC,kBAAkB1D,GAAUS,KAAK,QAAQE,MAAA,gB,kBACxD,IAAsE,EAAtE,QAAsE,IAArDgD,KAAK,iBAAiBxD,MAAM,OAAO,YAAU,SAC9D,QAA2D,IAA1CwD,KAAK,MAAMxD,MAAM,OAAO,YAAU,U,oCAMzD,QA4CU,IA5CDpB,MAAM,cAAY,CACdsC,QAAM,QACf,IAAmB,gBAAnB,QAAmB,YAAb,UAAM,M,iBAGd,IAmBW,EAnBX,QAmBW,IAnBAoC,KAAM,GAAAG,gBAAgB5D,GAAS6D,MAAM,EAAG,GAAAC,cAAc9D,EAAQE,SAAM6D,EAAY,GAAIpD,MAAA,gB,kBAC7F,IAIkB,EAJlB,QAIkB,IAJDgD,KAAK,OAAOxD,MAAM,KAAK6D,MAAM,O,CACjCC,SAAO,QAChB,EADoBC,SAAG,E,iBACpB,GAAA/C,WAAW+C,EAAI9C,OAAI,K,OAG1B,QAIkB,IAJDuC,KAAK,OAAOxD,MAAM,MAAM6D,MAAM,O,CAClCC,SAAO,QAChB,EADoBC,SAAG,E,iBACpBA,EAAIC,MAAQD,EAAIE,YAAc,KAAJ,K,OAGjC,QAA+C,IAA9BT,KAAK,UAAUxD,MAAM,UACtC,QAMkB,IANDwD,KAAK,SAASxD,MAAM,OAAO6D,MAAM,O,CACrCC,SAAO,QAChB,EADoBC,SAAG,EACvB,QAES,IAFA9E,KAAqB,QAAf8E,EAAIG,OAAmB,UAA2B,QAAfH,EAAIG,OAAmB,SAAW,W,kBAClF,IAAgB,E,iBAAbH,EAAIG,QAAM,K,kDAOV,GAAAT,gBAAgB5D,GAASf,OAAS,I,WAA7C,QAYM,MAZN,EAYM,EAXJ,QAUY,IATVG,KAAK,OACJ,QAAK,GAAE,GAAAkF,aAAatE,EAAQE,IAC7BO,KAAK,S,kBAEL,IAGU,EAHV,QAGU,S,iBAuE3B,IAGkB,CA5EmB,GAAAqD,cAAc9D,EAAQE,M,WACxC,QAAkB,e,WADlB,QAA+C,e,oBAEvC,KACV,QAAG,GAAA4D,cAAc9D,EAAQE,IAAM,KAAO,SAAS,GAAA0D,gBAAgB5D,GAASf,OAAS,OAAH,K,2CAIlF,QAEM,MAFN,GAEM,EADJ,QAAmE,IAA3DG,KAAK,UAAQ,C,iBAAC,IAAM,E,QAAN,UAAM,QAAGY,EAAQQ,aAAe,GAAJ,K,8OAqClE,IACEH,KAAM,oBACNkE,WAAY,CACVC,aAAY,gBACZC,SAAQ,YACRC,aAAY,gBACZC,MAAK,SACLC,UAAS,aACTC,WAAU,cACNC,QAAO,WACXC,UAAS,aACTC,UAAS,aACTC,WAAU,cACVC,SAAQ,YACRC,SAAQ,YACRC,UAAS,aACTC,MAAK,SACLC,QAAO,YAET,KAAAC,IAEgB,YACC,WADf,MAEMC,GAAQ,WAKRxG,GAAY,SAAI,IAChBS,GAAY,SAAI,IAChB+D,GAAoB,SAAS,CAAC,GAC9BM,GAAgB,SAAS,CAAC,GAC1B5E,GAAY,UAAI,GAGhBuG,EAAqB,IAAIC,IACzBC,GAAiB,SAAI,GACrBC,GAAmB,SAAI,MAyBvBC,EAAyB,KACtB,CACL,EAAG,EACH,EAAG,EACH,EAAG,GACH,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,KAcFC,GAAa,QAAS,KAE1B,MAAMC,EAAcP,EAAMQ,MAAMC,OAChC,GAAIF,EAEF,MAAO,GAIT,IACE,MAAMG,EAAcC,eAAeC,QAAQ,uBAC3C,GAAIF,EAAa,CACf,MAAMzC,EAAO4C,KAAKC,MAAMJ,GACxB,GAAIzC,GAAQA,EAAK8C,SAAW9C,EAAK8C,QAAQtH,OAAS,EAAG,CAEnD,MAAMuH,EAAUnD,KAAKoD,OAAShD,EAAKiD,WAAa,GAChD,GAAIF,EAAU,KAGZ,OAFAG,QAAQC,IAAI,kBACZT,eAAeU,WAAW,uBACnB,GAIT,GAAIpD,EAAKqD,WAAY,CAEnB,MAAMC,EAAsBtD,EAAK8C,QAAQS,IAAIC,IAAS,CACpDP,UAAWO,EAAMC,EACjB9C,WAAY6C,EAAME,EAClBC,OAAQH,EAAMI,GACdC,OAAQL,EAAMM,GACdC,OAAQP,EAAMQ,GACdC,OAAQT,EAAMU,GACdC,YAAaX,EAAMY,IACnBC,SAAUb,EAAMc,MAGlB,OAAOhB,CACT,CACE,OAAOtD,EAAK8C,OAEhB,CACF,CACF,CAAE,MAAOyB,GACPrB,QAAQqB,MAAM,cAAeA,GAC7B7B,eAAeU,WAAW,sBAC5B,CAEA,MAAO,KAGH1H,GAAkB,QAAS,IAAM2G,EAAWmC,MAAMhJ,QAGlDiJ,EAA2BC,UAC/B,IAEE,MAAMpC,EAAcP,EAAMQ,MAAMC,OAChC,IAAKF,EAAa,OAElB,MAAME,EAASF,EAAYqC,MAAM,KAAKpB,IAAI9G,GAAMmI,SAASnI,IACzD,IAAK+F,GAA4B,IAAlBA,EAAOhH,OAAc,OAGpCC,EAAU+I,OAAQ,EAGlB,MAAMK,QAAiBC,GAAA,EAAIC,kBAAkBC,gBAAgBxC,GAEzDqC,EAAS7E,KAAKiF,SAAWJ,EAAS7E,KAAKkF,aAEnCC,EAAeN,EAAS7E,KAAKkF,QAC1BL,EAAS7E,KAAKiF,SAAWJ,EAAS7E,KAAKA,MAEhDzE,EAAUiJ,MAAQK,EAAS7E,KAAKA,MAAQ,GAEpCzE,EAAUiJ,MAAMhJ,OAAS,IAC3BQ,EAAUwI,MAAQjJ,EAAUiJ,MAAM,GAAG/H,GAAGI,WACxCtB,EAAUiJ,MAAMY,QAAQ7I,IACtBwD,EAAkBxD,EAAQE,KAAM,EAChC4D,EAAc9D,EAAQE,KAAM,KAIhC,MAAUwI,QAAQJ,EAAS7E,KAAKqF,SAAW,SAAS9J,EAAUiJ,MAAMhJ,eAEpE,MAAU+I,MAAMM,EAAS7E,KAAKqF,SAAW,OAG7C,CAAE,MAAOd,GACP,MAAUA,MAAM,gBAAkBA,EAAMM,UAAU7E,MAAMqF,SAAWd,EAAMc,SAC3E,CAAE,QACA5J,EAAU+I,OAAQ,CACpB,GAIIW,EAAiBT,MAAOQ,IAC5B,MAAMI,EAAc,GACpB,IAAIC,EAAW,EAEf,MAAMC,EAAOd,UACX,IACE,MAAMG,QAAiBC,GAAA,EAAIC,kBAAkBU,sBAAsBP,GAEnE,GAAIL,EAAS7E,KAAKiF,QAAS,CACzB,MAAMS,EAAOb,EAAS7E,KAAKA,KAE3B,GAAoB,cAAhB0F,EAAK9E,OAaP,OAXArF,EAAUiJ,MAAQkB,EAAKC,QAAU,GAE7BpK,EAAUiJ,MAAMhJ,OAAS,IAC3BQ,EAAUwI,MAAQjJ,EAAUiJ,MAAM,GAAG/H,GAAGI,WACxCtB,EAAUiJ,MAAMY,QAAQ7I,IACtBwD,EAAkBxD,EAAQE,KAAM,EAChC4D,EAAc9D,EAAQE,KAAM,UAIhC,MAAUwI,QAAQ,SAAS1J,EAAUiJ,MAAMhJ,cAEtC,GAAoB,WAAhBkK,EAAK9E,OAGd,YADA,MAAU2D,MAAMmB,EAAKnB,OAAS,UAEL,eAAhBmB,EAAK9E,SAEd2E,IACIA,EAAWD,SAEP,IAAIM,QAAQC,GAAWC,WAAWD,EAAS,YAC3CL,KAEN,MAAUjB,MAAM,kBAGtB,MACE,MAAUA,MAAM,WAEpB,CAAE,MAAOA,GACP,MAAUA,MAAM,aAAeA,EAAMc,QACvC,SAIIG,KAIFO,EAAe,KACnB,GAAgC,IAA5B1D,EAAWmC,MAAMhJ,OAAc,MAAO,MAE1C,MAAMwK,EAAa3D,EAAWmC,MAAMjB,IAAIC,GAAS,IAAI5D,KAAK4D,EAAMP,YAC1DgD,EAAU,IAAIrG,KAAKF,KAAKwG,OAAOF,IAC/BG,EAAU,IAAIvG,KAAKF,KAAK0G,OAAOJ,IAErC,MAAO,GAAG/H,EAAgBgI,QAAchI,EAAgBkI,MAIpDpK,EAAwB,IACE,IAA1BL,EAAgB8I,MACX,aAEF,WAAW9I,EAAgB8I,SAI9B5I,EAAc8I,UAClB,GAAgC,IAA5BrC,EAAWmC,MAAMhJ,OAArB,CAKAC,EAAU+I,OAAQ,EAClB,IAIE,MAAM6B,EAAWzD,KAAK0D,UAAUjE,EAAWmC,OAAOhJ,OAC5C+K,EAAU,SAChB,IAAIC,EAAenE,EAAWmC,MAE9B,GAAI6B,EAAWE,EAAS,CACtB,MAAUE,QAAQ,UAAUJ,EAAW,KAAO,MAAMK,QAAQ,wBAG5D,MAAMC,EAAajH,KAAKC,MAAM4G,GAAWF,EAAWhE,EAAWmC,MAAMhJ,SAC/DoL,EAAOlH,KAAKC,MAAM0C,EAAWmC,MAAMhJ,OAASmL,GAClDH,EAAe,GAEf,IAAK,IAAIK,EAAI,EAAGA,EAAIxE,EAAWmC,MAAMhJ,OAAQqL,GAAKD,EAEhD,GADAJ,EAAaM,KAAKzE,EAAWmC,MAAMqC,IAC/BL,EAAahL,QAAUmL,EAAY,KAG3C,CAKA,MAAM9B,QAAiBC,GAAA,EAAIC,kBAAkBgC,qBAAqBP,GAE9D3B,EAAS7E,KAAKiF,SAChB1J,EAAUiJ,MAAQK,EAAS7E,KAAKA,MAAQ,GAIpCzE,EAAUiJ,MAAMhJ,OAAS,IAC3BQ,EAAUwI,MAAQjJ,EAAUiJ,MAAM,GAAG/H,GAAGI,WACxCtB,EAAUiJ,MAAMY,QAAQ7I,IACtBwD,EAAkBxD,EAAQE,KAAM,EAChC4D,EAAc9D,EAAQE,KAAM,KAIhC,MAAUwI,QAAQ,gBAAgB1J,EAAUiJ,MAAMhJ,eAElD,MAAU+I,MAAMM,EAAS7E,KAAKqF,SAAW,OAE7C,CAAE,MAAOd,GACP,MAAUA,MAAM,cAAgBA,EAAMM,UAAU7E,MAAMqF,SAAWd,EAAMc,SACzE,CAAE,QACA5J,EAAU+I,OAAQ,CACpB,CApDA,MAFE,MAAUiC,QAAQ,kCA0DhB3J,EAAe4H,MAAOsC,IAC1B,UACyBlC,GAAA,EAAIC,kBAAkBjI,aAAakK,GAC1D,MAAU/B,QAAQ,YACpB,CAAE,MAAOV,GACP,MAAUA,MAAM,SAClB,GAII/F,EAAmB,CAACwI,EAAWC,KACnC,MAAMzK,EAAM,GAAGwK,KAAaC,IAC5BlH,EAAkBvD,IAAQuD,EAAkBvD,IAIxCqE,EAAgBmG,IACpB3G,EAAc2G,IAAc3G,EAAc2G,IAItC/J,EAAqB+J,IAErBhL,EAAUwI,QAAUwC,EAAUnK,aAChCb,EAAUwI,MAAQwC,EAAUnK,aAI9B,QAAS,KACP,MAAMqK,EAAYC,SAASC,cAAc,qBAAqBJ,mBAC1DE,IACFA,EAAUG,eAAe,CACvBC,SAAU,SACVC,MAAO,UAITL,EAAUhK,MAAMsK,UAAY,yDAC5BN,EAAUhK,MAAMuK,WAAa,uBAG7B3B,WAAW,KACToB,EAAUhK,MAAMsK,UAAY,IAC3B,SAMHnJ,EAAgB9B,GACb,CACLA,EAAQmL,YAAc,GACtBnL,EAAQoL,YAAc,GACtBpL,EAAQqL,YAAc,GACtBrL,EAAQsL,YAAc,IAKlB5H,EAAqB1D,IACzB,IAAKA,EAAS,MAAO,GACrB,MAAMuL,EAAU,IAAI7F,IACd8F,EAAU1J,EAAa9B,GAC7BwL,EAAQ3C,QAAQ9G,KACbA,GAAY,IAAI8G,QAAQ4C,IACvB,IAAKA,EAAG,OACR,IAAKA,EAAExI,YAAcwI,EAAEvI,QAAS,OAChC,MAAMwI,EAAMD,EAAEC,KAAO,KACfzL,EAAM,GAAGyL,MAAQD,EAAE9I,gBAAkB,SACtC4I,EAAQI,IAAI1L,IACfsL,EAAQK,IAAI3L,EAAK,CACf0C,eAAgB8I,EAAE9I,gBAAkB,OACpC+I,IAAKA,EACLG,SAAU,KAGdN,EAAQO,IAAI7L,GAAK4L,SAAStB,KAAK,CAAEtH,UAAWwI,EAAExI,UAAWC,QAASuI,EAAEvI,cAIxE,MAAM6I,EAAOC,MAAMC,KAAKV,EAAQW,UAAUlF,IAAImF,IAE5CA,EAAKN,SAASO,KAAK,CAACC,EAAGC,IAAM,IAAIjJ,KAAKgJ,EAAEpJ,WAAa,IAAII,KAAKiJ,EAAErJ,YAEhE,MAAMsJ,EAAS,GACf,IAAK,MAAMC,KAAOL,EAAKN,SAAU,CAC/B,GAAsB,IAAlBU,EAAOtN,OAAc,CAAEsN,EAAOhC,KAAK,IAAKiC,IAAQ,QAAS,CAC7D,MAAMC,EAAOF,EAAOA,EAAOtN,OAAS,GAC9ByN,EAAU,IAAIrJ,KAAKoJ,EAAKvJ,SAASyJ,UACjCC,EAAW,IAAIvJ,KAAKmJ,EAAIvJ,WAAW0J,UACnCE,EAAS,IAAIxJ,KAAKmJ,EAAItJ,SAASyJ,UACjCC,GAAYF,EACVG,EAASH,IAASD,EAAKvJ,QAAUsJ,EAAItJ,SAEzCqJ,EAAOhC,KAAK,IAAKiC,GAErB,CACA,MAAMvJ,EAAYsJ,EAAOtN,OAASsN,EAAO,GAAGtJ,UAAY,KAClDC,EAAUqJ,EAAOtN,OAASsN,EAAOA,EAAOtN,OAAS,GAAGiE,QAAU,KACpE,MAAO,IAAKiJ,EAAMN,SAAUU,EAAQtJ,YAAWC,aAIjD,OADA6I,EAAKK,KAAK,CAACC,EAAGC,IAAM,IAAIjJ,KAAKgJ,EAAEpJ,WAAa,IAAII,KAAKiJ,EAAErJ,YAChD8I,GAILe,EAAmB/K,IACvB,IAAKA,GAAgC,IAApBA,EAAS9C,OAAc,MAAO,MAG/C,MAAM8N,EAAehL,EAClBiL,OAAOlK,GAASA,EAAMG,WAAaH,EAAMI,SACzC+J,OAAO,CAACC,EAAOpK,KACd,MAAMqK,EAAWhK,KAAKC,OAAO,IAAIC,KAAKP,EAAMI,SAAW,IAAIG,KAAKP,EAAMG,YAAc,IAAO,IAC3F,OAAOiK,EAAQC,GACd,GAEL,MAAO,GAAGJ,OAINK,EAAmBhO,IACvB,OAAQA,GACN,IAAK,KACH,MAAO,SACT,IAAK,KACH,MAAO,UACT,IAAK,KACH,MAAO,OACT,QACE,MAAO,SAKPwE,EAAmB5D,IACvB,IAAKA,IAAYA,EAAQqN,cAAe,MAAO,GAE/C,IAAIC,EAAU,GAEd,GAAqC,kBAA1BtN,EAAQqN,cACjB,IACEC,EAAUjH,KAAKC,MAAMtG,EAAQqN,cAC/B,CAAE,MAAOrF,GAEP,OADArB,QAAQqB,MAAM,wBAAyBA,GAChC,EACT,MAEAsF,EAAUtN,EAAQqN,eAAiB,GAGrC,OAAOC,GAIHnM,EAAcC,IAClB,IAAKA,EAAM,MAAO,IAClB,MAAMmM,EAAO,IAAIlK,KAAKjC,GAChBoM,EAAOD,EAAKE,cACZC,EAAQC,OAAOJ,EAAKK,WAAa,GAAGC,SAAS,EAAG,KAChDC,EAAMH,OAAOJ,EAAKQ,WAAWF,SAAS,EAAG,KACzCG,EAAQL,OAAOJ,EAAKU,YAAYJ,SAAS,EAAG,KAC5CK,EAAUP,OAAOJ,EAAKY,cAAcN,SAAS,EAAG,KAChDO,EAAUT,OAAOJ,EAAKc,cAAcR,SAAS,EAAG,KACtD,MAAO,GAAGL,KAAQE,KAASI,KAAOE,KAASE,KAAWE,KAIlDE,EAAqBtO,IACzB,IAAKA,EAAQuB,qBAAuBvB,EAAQwB,iBAC1C,MAAO,UAET,MAAMI,EAAQ,IAAIyB,KAAKrD,EAAQuB,oBAAoBgN,iBAC7C1M,EAAM,IAAIwB,KAAKrD,EAAQwB,kBAAkB+M,iBAC/C,MAAO,GAAG3M,OAAWC,KAIjBH,EAAmBN,IACvB,IAAKA,EAAM,MAAO,IAClB,MAAMmM,EAAO,IAAIlK,KAAKjC,GAChB4M,EAAQL,OAAOJ,EAAKU,YAAYJ,SAAS,EAAG,KAC5CK,EAAUP,OAAOJ,EAAKY,cAAcN,SAAS,EAAG,KACtD,MAAO,GAAGG,KAASE,KAIfM,EAAoBxO,IACxB,IAAKA,EAAS,MAAO,CAAE4B,MAAO,KAAMC,IAAK,MAGzC,MAAMD,EAAQ5B,EAAQuB,mBAChBM,EAAM7B,EAAQwB,iBAGpB,GAAII,GAASC,EAAK,CAChB,MAAMoB,EAAY,IAAII,KAAKzB,GAAO+K,UAC5BzJ,EAAU,IAAIG,KAAKxB,GAAK8K,UAE9B,GAAI1J,GAAaC,EAQf,OAPAyD,QAAQ8H,KAAK,wBAAyB,CACpCrO,WAAYJ,EAAQI,WACpBwB,MAAOA,EACPC,IAAKA,EACLoB,UAAWA,EACXC,QAASA,IAEJ,CAAEtB,MAAO,KAAMC,IAAK,KAE/B,CAQA,OANA8E,QAAQC,IAAI,gBAAiB5G,EAAQI,WAAY,CAC/CwB,MAAOA,EACPC,IAAKA,EACLsL,SAAUvL,GAASC,GAAO,IAAIwB,KAAKxB,GAAK8K,UAAY,IAAItJ,KAAKzB,GAAO+K,WAAa,IAAc,QAG1F,CAAE/K,QAAOC,QAIZ6M,EAAyB1O,IAC7B,IACE,MAAM2O,EAAS7N,EAAwBd,GACvC,IAAK2O,GAA4B,IAAlBA,EAAO1P,OAEpB,OAAO0C,EAAyB3B,GAElC,MAAM4B,EAAQ+M,EAAO,GAAGvN,KAClBS,EAAM8M,EAAOA,EAAO1P,OAAS,GAAGmC,KACtC,MAAO,CAAEQ,QAAOC,MAClB,CAAE,MAAOsF,GACP,OAAOxF,EAAyB3B,EAClC,GAII2B,EAA4B3B,IAChC,IAAKA,EAAS,MAAO,CAAE4B,MAAO,KAAMC,IAAK,MAGzC,MAAM+M,EAAcC,EAAe7O,GAG7B8O,EAAeC,EAAgB/O,GAC/BkD,EAAU4L,GAAgB9O,EAAQwB,iBAGxC,IAAII,EAAQgN,GACPhN,GAAS5B,EAAQuB,qBACpBK,EAAQ5B,EAAQuB,oBAIlB,IAAIM,EAAMqB,EAMV,IALKrB,GAAO7B,EAAQwB,mBAClBK,EAAM7B,EAAQwB,kBAIZI,GAASC,EAAK,CAChB,MAAMoB,EAAY,IAAII,KAAKzB,GAAO+K,UAC5BzJ,EAAU,IAAIG,KAAKxB,GAAK8K,UAE9B,GAAI1J,GAAaC,EAQf,OAPAyD,QAAQ8H,KAAK,2BAA4B,CACvCrO,WAAYJ,EAAQI,WACpBwB,MAAOA,EACPC,IAAKA,EACLoB,UAAWA,EACXC,QAASA,IAEJ,CAAEtB,MAAO,KAAMC,IAAK,KAE/B,CAWA,OATA8E,QAAQC,IAAI,YAAa5G,EAAQI,WAAY,CAC3CwB,MAAOA,EACPC,IAAKA,EACL+M,YAAaA,EACbE,aAAcA,EACdE,eAAgBhP,EAAQwB,iBACxB2L,SAAUvL,GAASC,GAAO,IAAIwB,KAAKxB,GAAK8K,UAAY,IAAItJ,KAAKzB,GAAO+K,WAAa,IAAc,QAG1F,CAAE/K,QAAOC,QAIZoN,EAAkB,CAAC7N,EAAM6B,EAAWC,KACxC,IAAK9B,IAAS6B,IAAcC,EAAS,OAAO,EAE5C,IAEE,MAAMtB,EAAQ,IAAIyB,KAAKJ,GAAW0J,UAC5B9K,EAAM,IAAIwB,KAAKH,GAASyJ,UACxB9L,EAAU,IAAIwC,KAAKjC,GAAMuL,UAG/B,GAAIuC,MAAMtN,IAAUsN,MAAMrN,IAAQqN,MAAMrO,GAEtC,OADA8F,QAAQ8H,KAAK,gBAAiB,CAAErN,OAAM6B,YAAWC,YAC1C,EAIT,GAAItB,GAASC,EAEX,OADA8E,QAAQ8H,KAAK,wBAAyB,CAAExL,YAAWC,YAC5C,EAIT,MAAMiM,GAAatO,EAAUe,IAAUC,EAAMD,GAAU,IAGvD,OAAOuB,KAAK0G,IAAI,EAAG1G,KAAKwG,IAAI,IAAKwF,GACnC,CAAE,MAAOnH,GAEP,OADArB,QAAQqB,MAAM,YAAaA,EAAO,CAAE5G,OAAM6B,YAAWC,YAC9C,CACT,GAIIkM,EAAmB,CAACnM,EAAWC,KACnC,IAAKD,IAAcC,EAAS,MAAO,GACnC,MAAMtB,EAAQ,IAAIyB,KAAKJ,GACjBpB,EAAM,IAAIwB,KAAKH,GACfiK,EAAWtL,EAAI8K,UAAY/K,EAAM+K,UAGvC,IAAI0C,EAEFA,EADElC,GAAY,KACH,IACFA,GAAY,KACV,IAEA,KAGb,MAAMmC,EAAQ,GACd,IAAIzO,EAAUe,EAAM+K,UAAY0C,EAChC,MAAOxO,EAAUgB,EAAI8K,UAAW,CAC9B,MAAMwC,EAAWF,EAAgBpO,EAASoC,EAAWC,GACrDoM,EAAM/E,KAAK,CACTnJ,KAAM,IAAIiC,KAAKxC,GACfsO,SAAUA,IAEZtO,GAAWwO,CACb,CAEA,OAAOC,GAIHC,EAA8B1M,IAClC,IAAKA,GAA4B,IAAlBA,EAAO5D,OAAc,MAAO,GAG3C,MAAMuQ,EAAa3M,EAAOmE,IAAIlE,IAAS,CACrCG,UAAW,IAAII,KAAKP,EAAMG,WAAW0J,UACrCzJ,QAAS,IAAIG,KAAKP,EAAMI,SAASyJ,aAInC6C,EAAWpD,KAAK,CAACC,EAAGC,IAAMD,EAAEpJ,UAAYqJ,EAAErJ,WAE1C,MAAMsJ,EAAS,GACf,IAAI1L,EAAU2O,EAAW,GAEzB,IAAK,IAAIlF,EAAI,EAAGA,EAAIkF,EAAWvQ,OAAQqL,IAAK,CAC1C,MAAMmF,EAAOD,EAAWlF,GAGpBzJ,EAAQqC,SAAWuM,EAAKxM,UAC1BpC,EAAQqC,QAAUC,KAAK0G,IAAIhJ,EAAQqC,QAASuM,EAAKvM,UAGjDqJ,EAAOhC,KAAK1J,GACZA,EAAU4O,EAEd,CAOA,OAJI5O,GACF0L,EAAOhC,KAAK1J,GAGP0L,GAIHmD,EAAsB,CAAC3N,EAAU/B,KACrC,IAAK+B,GAAgC,IAApBA,EAAS9C,SAAiBe,EAAQuB,qBAAuBvB,EAAQwB,iBAChF,MAAO,CAAEmO,KAAM,KAAM3L,MAAO,MAI9B,MAAM4L,EAAiB7N,EAASiL,OAAOlK,GAASA,EAAMG,WAAaH,EAAMI,SAEzE,GAA8B,IAA1B0M,EAAe3Q,OAAc,MAAO,CAAE0Q,KAAM,KAAM3L,MAAO,MAG7D,MAAM6L,EAAmBN,EAA2BK,GAEpD,GAAgC,IAA5BC,EAAiB5Q,OAAc,MAAO,CAAE0Q,KAAM,KAAM3L,MAAO,MAG/D,IAAI8L,EAAa,EACjB,MAAMjE,EAAW,GAGXkE,EAAgBrB,EAAsB1O,GAC5C,OAAK+P,EAAcnO,OAAUmO,EAAclO,KAE3CgO,EAAiBhH,QAAQmH,IACvB,MAAMC,EAAgBhB,EAAgBe,EAAM/M,UAAW8M,EAAcnO,MAAOmO,EAAclO,KACpFqO,EAAcjB,EAAgBe,EAAM9M,QAAS6M,EAAcnO,MAAOmO,EAAclO,KAChFmC,EAAQb,KAAK0G,IAAI,EAAGqG,EAAcD,GAExCpE,EAAStB,KAAK,CACZoF,KAAM,GAAGM,KACTjM,MAAO,GAAGA,OAGZ8L,GAAc9L,IAKT6H,EAAS5M,OAAS,EAAI4M,EAAS,GAAK,CAAE8D,KAAM,KAAM3L,MAAO,OAjBT,CAAE2L,KAAM,KAAM3L,MAAO,OAqBxE9B,EAAyB,CAACH,EAAU/B,KACxC,IAAK+B,GAAgC,IAApBA,EAAS9C,SAAiBe,EAAQuB,qBAAuBvB,EAAQwB,iBAChF,MAAO,GAIT,MAAMoO,EAAiB7N,EAASiL,OAAOlK,GAASA,EAAMG,WAAaH,EAAMI,SAEzE,GAA8B,IAA1B0M,EAAe3Q,OAAc,MAAO,GAGxC,MAAM4Q,EAAmBN,EAA2BK,GAEpD,GAAgC,IAA5BC,EAAiB5Q,OAAc,MAAO,GAG1C,MAAM4M,EAAW,GAGXkE,EAAgBrB,EAAsB1O,GAC5C,OAAK+P,EAAcnO,OAAUmO,EAAclO,KAE3CgO,EAAiBhH,QAAQ,CAACmH,EAAOhP,KAC/B,MAAMiP,EAAgBhB,EAAgBe,EAAM/M,UAAW8M,EAAcnO,MAAOmO,EAAclO,KACpFqO,EAAcjB,EAAgBe,EAAM9M,QAAS6M,EAAcnO,MAAOmO,EAAclO,KAChFmC,EAAQb,KAAK0G,IAAI,EAAGqG,EAAcD,GAEpCjM,EAAQ,GACV6H,EAAStB,KAAK,CACZoF,KAAM,GAAGM,KACTjM,MAAO,GAAGA,SAKT6H,GAfgD,IAmBnDpK,EAA2BzB,IAC/B,IAAKA,IAAYA,EAAQuB,qBAAuBvB,EAAQwB,iBACtD,MAAO,CAAEmO,KAAM,KAAM3L,MAAO,MAI9B,MAAM+L,EAAgBrB,EAAsB1O,GAC5C,IAAK+P,EAAcnO,QAAUmO,EAAclO,IACzC,MAAO,CAAE8N,KAAM,KAAM3L,MAAO,MAI9B,MAAMiM,EAAgBhB,EAAgBjP,EAAQuB,mBAAoBwO,EAAcnO,MAAOmO,EAAclO,KAC/FqO,EAAcjB,EAAgBjP,EAAQwB,iBAAkBuO,EAAcnO,MAAOmO,EAAclO,KAC3FmC,EAAQb,KAAK0G,IAAI,EAAGqG,EAAcD,GAYxC,OAVAtJ,QAAQC,IAAI,WAAY5G,EAAQI,WAAY,CAC1C+P,iBAAkBnQ,EAAQuB,mBAC1ByN,eAAgBhP,EAAQwB,iBACxB4O,cAAeL,EAAcnO,MAC7ByO,YAAaN,EAAclO,IAC3BoO,cAAeA,EAAc9F,QAAQ,GAAK,IAC1C+F,YAAaA,EAAY/F,QAAQ,GAAK,IACtCnG,MAAOA,EAAMmG,QAAQ,GAAK,MAGrB,CACLwF,KAAM,GAAGM,KACTjM,MAAO,GAAGA,OAKRhB,EAAwB,CAACF,EAAO9C,KACpC,IAAK8C,IAAU9C,EAAQuB,qBAAuBvB,EAAQwB,iBACpD,MAAO,CAAEmO,KAAM,KAAM3L,MAAO,MAI9B,IAAKlB,EAAMG,YAAcH,EAAMI,QAC7B,MAAO,CAAEyM,KAAM,KAAM3L,MAAO,MAI9B,MAAM+L,EAAgBrB,EAAsB1O,GAC5C,IAAK+P,EAAcnO,QAAUmO,EAAclO,IACzC,MAAO,CAAE8N,KAAM,KAAM3L,MAAO,MAG9B,MAAMf,EAAY,IAAII,KAAKP,EAAMG,WAAW0J,UACtCzJ,EAAU,IAAIG,KAAKP,EAAMI,SAASyJ,UAGlCsD,EAAgBhB,EAAgBhM,EAAW8M,EAAcnO,MAAOmO,EAAclO,KAC9EqO,EAAcjB,EAAgB/L,EAAS6M,EAAcnO,MAAOmO,EAAclO,KAG1EmC,EAAQb,KAAK0G,IAAI,EAAGqG,EAAcD,GAClCN,EAAOxM,KAAK0G,IAAI,EAAG1G,KAAKwG,IAAI,IAAM3F,EAAOiM,IAE/C,MAAO,CACLN,KAAM,GAAGA,KACT3L,MAAO,GAAGA,OAKRT,EAAiBxB,IACrB,IAAKA,GAAgC,IAApBA,EAAS9C,OAAc,MAAO,OAG/C,MAAMqR,EAAevO,EAClBiL,OAAOlK,GAASA,EAAMG,WAAaH,EAAMI,SACzC+J,OAAO,CAACC,EAAOpK,KACd,MAAMqK,EAAWhK,KAAKC,OAAO,IAAIC,KAAKP,EAAMI,SAAW,IAAIG,KAAKP,EAAMG,YAAc,KACpF,OAAOiK,EAAQC,GACd,GAECe,EAAU/K,KAAKC,MAAMkN,EAAe,IACpClC,EAAUkC,EAAe,GAC/B,MAAO,GAAGpC,KAAWE,MAMjBS,EAAkB7O,GACjBA,EAGDA,EAAQuQ,gBAAkBvQ,EAAQuQ,eAAetR,OAAS,EACrDe,EAAQuQ,eAAe,GAI5BvQ,EAAQwQ,cACHxQ,EAAQwQ,cAIVxQ,EAAQuB,mBAbM,KAiBjBwN,EAAmB/O,GAClBA,EAGDA,EAAQyQ,gBAAkBzQ,EAAQyQ,eAAexR,OAAS,EACrDe,EAAQyQ,eAAezQ,EAAQyQ,eAAexR,OAAS,GAI5De,EAAQ0Q,eACH1Q,EAAQ0Q,eAIV,KAbc,KAiBjBC,EAAsB3Q,GACrBA,EAGDA,EAAQuQ,gBAAkBvQ,EAAQuQ,eAAetR,OAAS,EACrDe,EAAQuQ,eAIbvQ,EAAQwQ,cACH,CAACxQ,EAAQwQ,eAGX,GAZc,GAgBjBI,EAAuB5Q,GACtBA,EAGDA,EAAQyQ,gBAAkBzQ,EAAQyQ,eAAexR,OAAS,EACrDe,EAAQyQ,eAIbzQ,EAAQ0Q,eACH,CAAC1Q,EAAQ0Q,gBAGX,GAZc,GAgBjB5P,EAA2Bd,IAC/B,IAAKA,EAAS,MAAO,GAErB,MAAM2O,EAAS,GAGTkC,EAAeF,EAAmB3Q,GAGpCA,EAAQ8Q,wBACVnK,QAAQC,IAAI,YAAa,CACvBxG,WAAYJ,EAAQI,WACpB0Q,uBAAwB9Q,EAAQ8Q,uBAChCC,0BAA2B/Q,EAAQ+Q,0BACnCR,eAAgBvQ,EAAQuQ,eACxBM,aAAcA,IAIlBA,EAAahI,QAAQ,CAACzH,EAAMJ,KAE1B,IAAIb,EAAQ,KACRH,EAAQ8Q,wBAAoC,IAAV9P,EACpCb,EAAQ,YACC0Q,EAAa5R,OAAS,IAC/BkB,EAAQ,MAAMa,EAAQ,KAGxB2N,EAAOpE,KAAK,CACVnJ,KAAM,IAAIiC,KAAKjC,GACfhC,KAAM,UACNe,MAAOA,EACP6Q,MAAO,QACPC,KAAM,eAKNjR,EAAQuB,oBACVoN,EAAOpE,KAAK,CACVnJ,KAAM,IAAIiC,KAAKrD,EAAQuB,oBACvBnC,KAAM,eACNe,MAAO,OACP6Q,MAAO,OACPC,KAAM,cAKNjR,EAAQwB,kBACVmN,EAAOpE,KAAK,CACVnJ,KAAM,IAAIiC,KAAKrD,EAAQwB,kBACvBpC,KAAM,aACNe,MAAO,OACP6Q,MAAO,SACPC,KAAM,eAKV,MAAMC,EAAgBN,EAAoB5Q,GAY1C,OAXAkR,EAAcrI,QAAQ,CAACzH,EAAMJ,KAC3B2N,EAAOpE,KAAK,CACVnJ,KAAM,IAAIiC,KAAKjC,GACfhC,KAAM,WACNe,MAAO+Q,EAAcjS,OAAS,EAAI,MAAM+B,EAAQ,IAAM,KACtDgQ,MAAO,MACPC,KAAM,eAKHtC,EAAOvC,KAAK,CAACC,EAAGC,IAAMD,EAAEjL,KAAKuL,UAAYL,EAAElL,KAAKuL,YAInDwE,EAAmBnR,IACvB,IAAKA,EAAS,MAAO,GAGrB,IAAIoR,EAAsB,GAE1B,GAAIpR,EAAQqR,sBACV,GAA6C,kBAAlCrR,EAAQqR,sBACjB,IACED,EAAsB/K,KAAKC,MAAMtG,EAAQqR,sBAC3C,CAAE,MAAOrJ,GACPrB,QAAQqB,MAAM,gCAAiCA,GAC/CoJ,EAAsB,EACxB,MAEAA,EAAsBpR,EAAQqR,uBAAyB,GAQ3D,GAHA1K,QAAQC,IAAI,aAAc5G,EAAQI,WAAYgR,GAGX,IAA/BA,EAAoBnS,OAEtB,OADA0H,QAAQC,IAAI,aACL,GAIT,MAAM0K,EAAe,GAErB,IAAK,IAAIhH,EAAI,EAAGA,EAAI8G,EAAoBnS,OAAQqL,IAAK,CACnD,MAAMiH,EAAgBH,EAAoB9G,GACpCkH,EAAaJ,EAAoB9G,EAAI,GAErCmH,EAAepJ,SAASkJ,EAAcG,OACtCzO,EAAY,IAAII,KAAKkO,EAAcnQ,MACnC8B,EAAUsO,EAAa,IAAInO,KAAKmO,EAAWpQ,MAASpB,EAAQwB,iBAAmB,IAAI6B,KAAKrD,EAAQwB,kBAAoB,IAAI6B,KACxH8J,EAAWjK,EAAQyJ,UAAY1J,EAAU0J,UAG/ChG,QAAQC,IAAI,QAAQ0D,mBAAmBmH,gBAA2BxO,cAAsBC,eAAqBiK,OAG7G,IAAIwE,EAAgB,OAGpB,GAAIF,GAAgB,EAClBE,EAAgB,YAGb,GAAIF,EAAe,GAAKA,EAAe,GAC1CE,EAAgB,eAGb,GAAqB,KAAjBF,EAAqB,CAE5B,MAAMG,EAAYJ,EAAanJ,SAASmJ,EAAWE,OAAS,KAE1DC,EADgB,OAAdC,GAAsBA,EAAY,GACpB,QAEA,SAEpB,MAGED,EAAgB,OAGlBhL,QAAQC,IAAI,sBAAsB6K,gBAA2BD,EAAaA,EAAWE,MAAQ,2BAA2BC,KAElG,SAAlBA,GACFL,EAAa/G,KAAK,CAChBmH,MAAOC,EACP1O,UAAWA,EACXC,QAASA,EACTiK,SAAUA,EACV0E,cAAeJ,EACfK,UAAWP,EAAcO,WAAa,KAAKL,KAGjD,CAGA,OADA9K,QAAQC,IAAI,YAAa0K,GAClBA,GAIHS,EAAgBL,IACpB,MAAMM,EAAW,CACf,QAAW,OACX,MAAS,OACT,KAAQ,KACR,OAAU,KACV,QAAW,KACX,QAAW,MAEb,OAAOA,EAASN,IAAUA,GAItBO,EAAqBP,IAEzB,MAAMQ,EAAY,CAChB,QAAW,GACX,MAAS,KAELC,EAASD,EAAUR,IAAU,GAEnC,OADA/K,QAAQC,IAAI,gBAAgB8K,aAAiBS,OACtCA,GAIHC,EAAsB,CAACnP,EAAWjD,KACtC,IAAKiD,IAAcjD,EAAS,OAAO,EAEnC,MAAM+P,EAAgBpO,EAAyB3B,GAC/C,IAAK+P,EAAcnO,QAAUmO,EAAclO,IAAK,OAAO,EAEvD,MAAMsN,EAAWF,EAAgBhM,EAAW8M,EAAcnO,MAAOmO,EAAclO,KAC/E8E,QAAQC,IAAI,sBAAsB3D,oBAA4B8M,EAAcnO,sBAAsBmO,EAAclO,iBAAiBsN,MAGjI,MAAMkD,EAAkBlP,KAAK0G,IAAI,EAAG1G,KAAKwG,IAAI,GAAIwF,IACjD,OAAOkD,GAMH7P,EAAyBT,IAC7B,MAAMwJ,EAAU,CAAC,EAcjB,OAbAxJ,EAAS8G,QAAQ,CAAC/F,EAAO9B,KAIvB,MAAM0K,EAAM5I,EAAM4I,KAAO,GAAG5I,EAAMH,kBAAkB3B,IAC/CuK,EAAQG,KACXH,EAAQG,GAAO,CACb/I,eAAgBG,EAAMH,eACtBE,OAAQ,KAGZ0I,EAAQG,GAAK7I,OAAO0H,KAAKzH,KAEpByI,GAMH3I,EAA2BH,IAC/B,IAAKA,GAA+C,IAA/BA,EAAaI,OAAO5D,OAAc,MAAO,MAE9D,MAAMqT,EAAgB7P,EAAaI,OAChCmK,OAAOlK,GAASA,EAAMG,WAAaH,EAAMI,SACzC+J,OAAO,CAACC,EAAOpK,KACd,MAAMqK,EAAWhK,KAAKC,OAAO,IAAIC,KAAKP,EAAMI,SAAW,IAAIG,KAAKP,EAAMG,YAAc,IAAO,IAC3F,OAAOiK,EAAQC,GACd,GAEL,MAAO,GAAGmF,OAILhP,EAAiB,CAACR,EAAO9C,KAC7B,IAEE,MAAMW,EAAQqC,EAAsBF,EAAO9C,GACrCgE,EAAQrD,EAAMqD,MACduO,EAAeC,WAAWxO,GAG1BrB,EAAiBG,EAAMH,gBAAkB,KAGzC8P,EAAkB,IAClBC,EAAU,EACVC,EAAgBxP,KAAKwG,IAAIhH,EAAe1D,OAASwT,EAAkBC,EAAS,IAGlF,GAAIH,GAAgBI,EAAe,CAEjC,GAAIJ,GAAgB5P,EAAe1D,OAASwT,EAAkBC,EAC5D,OAAO/P,EACF,CAEL,MAAMiQ,EAAWzP,KAAKC,OAAOmP,EAAeG,GAAWD,GACvD,OAAO9P,EAAekQ,UAAU,EAAGD,GAAY,KACjD,CACF,CAEE,MAAO,EAEX,CAAE,MAAO5K,GAEP,OADArB,QAAQqB,MAAM,aAAcA,GACrB,EACT,GAIG1F,EAA2B,CAACH,EAASJ,EAAU/B,KACnD,IAAKmC,IAAYJ,IAAa/B,EAAS,MAAO,OAG9C,MAAM+P,EAAgBpO,EAAyB3B,GAC/C,IAAK+P,EAAcnO,QAAUmO,EAAclO,IAAK,MAAO,OAGvD,MAAMiR,EAAeN,WAAWrQ,EAAQwN,MAClCoD,EAAaD,EAAeN,WAAWrQ,EAAQ6B,OAE/Cf,EAAY,IAAII,KAAK0M,EAAcnO,OAAO+K,UAAamG,EAAe,KAAQ,IAAIzP,KAAK0M,EAAclO,KAAK8K,UAAY,IAAItJ,KAAK0M,EAAcnO,OAAO+K,WACpJzJ,EAAU,IAAIG,KAAK0M,EAAcnO,OAAO+K,UAAaoG,EAAa,KAAQ,IAAI1P,KAAK0M,EAAclO,KAAK8K,UAAY,IAAItJ,KAAK0M,EAAcnO,OAAO+K,WAGhJqG,EAAuBjR,EAASiL,OAAOlK,IAC3C,IAAKA,EAAMG,YAAcH,EAAMI,QAAS,OAAO,EAE/C,MAAM+P,EAAa,IAAI5P,KAAKP,EAAMG,WAAW0J,UACvCuG,EAAW,IAAI7P,KAAKP,EAAMI,SAASyJ,UAGzC,OAAOsG,EAAa/P,GAAWgQ,EAAWjQ,IAG5C,OAAoC,IAAhC+P,EAAqB/T,OAAqB,QAGvC+T,EAAqB,GAAGrQ,gBAAkB,QAO7CjD,IAAiB,SAAUyT,KAC/B,SAAa,KACX1T,EAAUwI,MAAQkL,EAAI9S,QAEvB,IAGGT,GAAuB,CAACwT,EAAYC,KACjC,WAAeC,KAAK,KAAM,GAI7BC,GAAiB,KAErB9N,EAAmBoD,QAAQ,CAAC2K,EAAO/I,KACjC9D,QAAQC,IAAI,UAAW6D,GACvB,IACE+I,EAAMC,SAAWD,EAAMC,SACzB,CAAE,MAAOtM,GACPR,QAAQ8H,KAAK,WAAYhE,EAAWtD,EACtC,IAEF1B,EAAmBiO,QAEnBC,OAAOC,KAAKC,IAAoBhL,QAAQ5I,WAC/B4T,GAAmB5T,KAE5B6T,GAAuBJ,QACvB9N,EAAiBqC,MAAQ,MAIrB8L,GAA4B/T,IAChC,IAAKA,EAAS,OAAO,KACrB,IAAIgU,EAAU,GACd,GAAIhU,EAAQqR,sBACV,GAA6C,kBAAlCrR,EAAQqR,sBACjB,IACE2C,EAAU3N,KAAKC,MAAMtG,EAAQqR,sBAC/B,CAAE,MAAOlK,GAEP,OADAR,QAAQqB,MAAM,4BAA6Bb,GACpC,IACT,MAEA6M,EAAUhU,EAAQqR,uBAAyB,GAK/C,MAAM1C,EAAS7N,EAAwBd,GACvC,IAAIiU,EAAO,KACPC,EAAO,KAMX,GALIvF,EAAO1P,OAAS,IAClBgV,EAAO,IAAI5Q,KAAKsL,EAAO,GAAGvN,MAAMuL,UAChCuH,EAAO,IAAI7Q,KAAKsL,EAAOA,EAAO1P,OAAS,GAAGmC,MAAMuL,WAG3B,IAAnBqH,EAAQ/U,OACV,OAAKgV,GAASC,EACP,CAAEC,OAAQ,GAAIC,QAAS,GAAIH,OAAMC,QADb,KAK7BF,EAAQ5H,KAAK,CAACC,EAAGC,IAAM,IAAIjJ,KAAKgJ,EAAEjL,MAAMuL,UAAY,IAAItJ,KAAKiJ,EAAElL,MAAMuL,WAChEsH,GAASC,IACZD,EAAO,IAAI5Q,KAAK2Q,EAAQ,GAAG5S,MAAMuL,UACjCuH,EAAO,IAAI7Q,KAAK2Q,EAAQA,EAAQ/U,OAAS,GAAGmC,MAAMuL,WAGpD,MAAM0H,EAAcxO,IAGdyO,EAAgB,GACtB,IAAIC,EAAa,KACjB,IAAK,MAAMC,KAAMR,EAAS,CACxB,MAAM9M,EAAI,IAAI7D,KAAKmR,EAAGpT,MAAMuL,UACxBzF,GAAK+M,IACPM,EAAaC,GAEXtN,EAAI+M,GAAQ/M,GAAKgN,GACnBI,EAAc/J,KAAKiK,EAEvB,CAEA,MAAML,EAAS,GAEf,IAAIM,EAAaF,EAAaA,EAAW7C,MAASsC,EAAQ/U,OAAS,EAAI+U,EAAQ,GAAGtC,MAAQ,IAC1FyC,EAAO5J,KAAK,CAAC0J,EAAMI,EAAYhM,SAASoM,KAAgBpM,SAASoM,GAAaA,IAG9E,IAAK,MAAMD,KAAMF,EAAe,CAC9B,MAAMpN,EAAI,IAAI7D,KAAKmR,EAAGpT,MAAMuL,UACtB+H,EAAIL,EAAYhM,SAASmM,EAAG9C,SAAWrJ,SAASmM,EAAG9C,OACzDyC,EAAO5J,KAAK,CAACrD,EAAGwN,EAAGF,EAAG9C,OACxB,CAGA,MAAMiD,EAAYL,EAAcrV,OAAS,EAAIqV,EAAcA,EAAcrV,OAAS,GAAGyS,MAAQ+C,EAG7F,OAFAN,EAAO5J,KAAK,CAAC2J,EAAMG,EAAYhM,SAASsM,KAAetM,SAASsM,GAAYA,IAErE,CAAER,SAAQC,QAASE,EAAeL,OAAMC,SAI3CU,GAA+B5U,IACnC,MAAMmQ,EAAmBnQ,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,KAC7F,IAAK4O,EAAkB,MAAO,CAAC,EAG/B,IAAI0E,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa3E,EACb4E,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAGnC,MAAM5R,EAAY,IAAII,KAAKwR,EAAaC,YAAYnI,UAAsC,GAAzBkI,EAAaE,UAAiB,KACzF7R,EAAU,IAAIG,KAAKwR,EAAaC,YAAYnI,UAAsC,GAAzBkI,EAAaE,UAAiB,KAE7F,MAAO,CACLC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,CACXC,KAAM,QACNC,WAAW,GAEbC,QAAS,CACPC,OAAQ,CACNC,SAAS,GAEXC,QAAS,CACPC,UAAW,CACTxU,MAAO,SAASyU,GACd,MAAMC,EAAYD,EAAQ,GAAGC,UACvBvB,EAAUsB,EAAQ,GAAGlC,MAAM/P,KAAK2Q,QACtC,GAAIA,GAAWA,EAAQuB,GAAY,CACjC,MAAMvU,EAAO,IAAIiC,KAAK+Q,EAAQuB,GAAWvU,MAEnCwU,EAAa3S,EAAU8K,YAAc7K,EAAQ6K,WAClC9K,EAAU2K,aAAe1K,EAAQ0K,YACjC3K,EAAUwK,gBAAkBvK,EAAQuK,cAErD,OAAImI,EACKxU,EAAKyU,mBAAmB,SAAW,IAAMzU,EAAK0U,mBAAmB,SAEjE1U,EAAK0U,mBAAmB,QAEnC,CACA,OAAOJ,EAAQ,GAAGvV,KACpB,EACAA,MAAO,SAASuV,GACd,MAAMC,EAAYD,EAAQC,UACpBvB,EAAUsB,EAAQlC,MAAM/P,KAAK2Q,QACnC,GAAIA,GAAWA,EAAQuB,GAAY,CACjC,MAAM9D,EAAgBxJ,SAAS+L,EAAQuB,GAAWjE,OAC5CI,EAAYiE,GAAyBlE,EAAcvR,YACzD,MAAO,OAAOuR,MAAkBC,IAClC,CACA,MAAO,OAAO4D,EAAQM,OAAOtB,GAC/B,KAINuB,OAAQ,CACKC,EAAG,CACXjV,MAAO,CACLsU,SAAS,EACTY,KAAM,MAER7G,MAAO,CACL8G,cAAe,GACfC,SAAU,SAASpO,EAAOjH,EAAOsO,GAC/B,MAAM8E,EAAUkC,KAAK9C,MAAM/P,KAAK2Q,QAChC,GAAIA,GAAWA,EAAQpT,GAAQ,CAC7B,MAAMI,EAAO,IAAIiC,KAAK+Q,EAAQpT,GAAOI,MAE/BwU,EAAa3S,EAAU8K,YAAc7K,EAAQ6K,WAClC9K,EAAU2K,aAAe1K,EAAQ0K,YACjC3K,EAAUwK,gBAAkBvK,EAAQuK,cAErD,OAAImI,EACKxU,EAAKyU,mBAAmB,QAAS,CAAEnI,MAAO,UAAWI,IAAK,YAAe,IACzE1M,EAAK0U,mBAAmB,QAAS,CAAES,KAAM,UAAWC,OAAQ,YAE5DpV,EAAK0U,mBAAmB,QAAS,CAAES,KAAM,UAAWC,OAAQ,WAEvE,CACA,OAAOvO,CACT,IAKLyM,EAAG,CACD+B,aAAa,EACb9M,IAAK,EACLE,IAAK,GACL5I,MAAO,CACLsU,SAAS,EACTY,KAAM,SAGR7G,MAAO,CACLoH,SAAU,EACVN,cAAe,MAIrBO,UAAW,CACTxJ,SAAU,OAMVyJ,GAA2B5W,IAC/B,IAAKA,EAAS,OACd,MAAM6W,EAAYjM,SAASkM,eAAe,qBAAqB9W,EAAQE,MACvE,IAAK2W,EAEH,YADAtN,WAAW,IAAMqN,GAAwB5W,GAAU,IAIrD,MAAMyD,EAAOsQ,GAAyB/T,GAEhC+W,EAAWtR,EAAmBqG,IAAI9L,EAAQE,IAChD,GAAI6W,EAAU,CACZ,IAAMA,EAAStD,SAAWsD,EAAStD,SAAU,CAAE,MAAOuD,GAAI,CAC1DvR,EAAmBwR,OAAOjX,EAAQE,GACpC,CAEA,IAAKuD,EAEH,YADAoT,EAAUK,UAAY,gHAIxB,MAAM1D,EAAQ2D,GAAA,GAAaN,GAC3BpR,EAAmBmG,IAAI5L,EAAQE,GAAIsT,GAEnC,MAAMa,EAAcxO,IACduR,EAAa,CAAC,EACpBzD,OAAOC,KAAKS,GAAaxL,QAAQwO,IAAOD,EAAW/C,EAAYgD,IAAMA,IAErE,MAAMC,EAAgB,IAChBC,EAAapU,KAAKwG,IAAIlG,EAAKwQ,KAAOqD,EAAe7T,EAAKyQ,MAE5DV,EAAMgE,UAAU,CACdC,KAAM,CAAE9H,KAAM,GAAI+H,MAAO,GAAIC,IAAK,GAAIC,OAAQ,GAAIC,cAAc,GAChEC,QAAS,CACPJ,MAAO,GACPC,IAAK,GACLI,QAAS,CACPC,SAAU,CAAEC,WAAY,QACxBC,QAAS,CAAC,EACVC,YAAa,CAAC,IAGlB3C,QAAS,CACP4C,QAAS,OACTC,YAAa,CAAEjZ,KAAM,QACrBkZ,UAAYC,IACV,IAAKA,IAAWA,EAAO,GAAI,MAAO,GAClC,MAAMC,EAAID,EAAO,GACXrR,EAAI,IAAI7D,KAAKmV,EAAEvQ,MAAM,IACrBwQ,EAAUD,EAAEvQ,MAAM,GAClB4J,EAAgB2G,EAAEvQ,MAAM,IAAMmP,EAAWqB,IAAYA,EACrD3G,EAAYiE,GAAyBpI,OAAOkE,IAClD,MAAO,GAAG3K,EAAEqH,eAAe,oBAAoBsD,KAAiBC,OAGpEkG,SAAU,CACR,CACE5Y,KAAM,SACNsZ,WAAY,EACZC,WAAY,OACZC,kBAAkB,EAClBC,kBAAkB,EAClBC,iBAAiB,EACjBC,WAAYtV,EAAKwQ,KACjB+E,SAAUzB,GAEZ,CACEnY,KAAM,SACNsZ,WAAY,EACZC,WAAY,OACZxG,OAAQ,GACRyF,OAAQ,GACRqB,gBAAgB,EAChBC,aAAa,EACbH,WAAYtV,EAAKwQ,KACjB+E,SAAUzB,IAGd4B,MAAO,CACL/Z,KAAM,OACNuK,IAAKlG,EAAKwQ,KACVpK,IAAKpG,EAAKyQ,KACVkF,UAAW,CAAEd,UAAYrQ,GAAU,IAAI5E,KAAK4E,GAAO6N,mBAAmB,QAAS,CAAES,KAAM,UAAWC,OAAQ,UAAW6C,OAAQ,cAE/HC,MAAO,CACLla,KAAM,QACNuK,IAAK,EACLE,IAAK,GACLuP,UAAW,CACTd,UAAYiB,IACV,MAAMC,EAAWpC,EAAWmC,GAC5B,OAAOC,EAAW7L,OAAO6L,GAAY,KAGzCC,SAAU,CAAEC,MAAM,GAClBC,YAAa,GAEfC,OAAQ,CAAC,CACPxa,KAAM,OACNiL,KAAM,MACNwP,YAAY,EACZC,UAAW,CAAE9V,MAAO,EAAGgN,MAAO,WAC9B+I,UAAW,CACT/I,MAAO,IAAImG,GAAA,MAA+B,EAAG,EAAG,EAAG,EAAG,CACpD,CAAE6C,OAAQ,EAAGhJ,MAAO,yBACpB,CAAEgJ,OAAQ,EAAGhJ,MAAO,4BAGxBvN,KAAMA,EAAK0Q,YAMX4B,GAA4BrE,IAChC,MAAMM,EAAW,CACf,EAAK,WACL,EAAK,UACL,EAAK,UACL,GAAM,UACN,GAAM,YACN,GAAM,YACN,GAAM,eACN,GAAM,WACN,GAAM,YACN,GAAM,aACN,GAAM,UACN,GAAM,WAER,OAAOA,EAASN,IAAU,KAAKA,KAQ3BoC,GAAyB,IAAIpO,IAC7BmO,IAAqB,SAAS,CAAC,GAC/BoG,IAAyB,SAAI,GAG7BC,GAAyB,CAACla,EAASma,KACvC,IAAKna,IAAYA,EAAQqR,sBAAuB,MAAO,CAAC,EAGxD,MAAM+I,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UAE9D,GAAI2F,GAAiB,EAAG,MAAO,CAAC,EAGhC,MAAMgI,EAAYvG,GAAyB/T,GAC3C,IAAIua,EAAeC,EAEnB,GAAIF,GAAaA,EAAUrX,WAAaqX,EAAUpX,QAEhDqX,EAAgB,IAAIlX,KAAKiX,EAAUrX,WACnCuX,EAAc,IAAInX,KAAKiX,EAAUpX,aAC5B,CAEL,IAAI2R,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAInC,MAAM4F,EAA4C,GAAvB9U,EAAesC,MAAa,IACvD,IAAIyS,EAAiB7F,EAAaC,YAGhC,MAAM6F,EAAgB,IAAItX,KAAK+W,EAAezN,UAAY8N,EAAqB,GACzEG,EAAgB,IAAIvX,KAAKgX,EAAa1N,UAAY8N,EAAqB,GAG/E,GAAInI,GAAiBmI,EAAoB,CAEvC,MAAMI,EAAc,IAAIxX,KAAKF,KAAK0G,IAAIuQ,EAAezN,UAAWxJ,KAAKwG,IAAI0Q,EAAa1N,UAAW+N,EAAe/N,aAChH+N,EAAiBG,CACnB,MAEMH,EAAe/N,UAAYgO,EAAchO,UAC3C+N,EAAiBC,EACRD,EAAe/N,UAAYiO,EAAcjO,YAClD+N,EAAiBE,GAKrBL,EAAgB,IAAIlX,KAAKqX,EAAe/N,UAAY8N,EAAqB,GACzED,EAAc,IAAInX,KAAKqX,EAAe/N,UAAY8N,EAAqB,GAGnEF,EAAc5N,UAAYyN,EAAezN,YAC3C4N,EAAgBH,EAChBI,EAAc,IAAInX,KAAK+W,EAAezN,UAAY8N,IAGhDD,EAAY7N,UAAY0N,EAAa1N,YACvC6N,EAAcH,EACdE,EAAgB,IAAIlX,KAAKgX,EAAa1N,UAAY8N,GAG9CF,EAAc5N,UAAYyN,EAAezN,YAC3C4N,EAAgBH,EAChBI,EAAc,IAAInX,KAAK+W,EAAezN,UAAY8N,IAGxD,CAEA,MAAMK,EAAeN,EAAY7N,UAAY4N,EAAc5N,UAGrDoO,GAAkBR,EAAc5N,UAAYyN,EAAezN,WAAa2F,EAAiB,IACzF0I,EAAcF,EAAexI,EAAiB,IAG9CD,EAAkBlP,KAAK0G,IAAI,EAAG1G,KAAKwG,IAAI,IAAMqR,EAAYD,IACzDE,EAAe9X,KAAK0G,IAAI,EAAG1G,KAAKwG,IAAI,IAAKqR,IAkB/C,OAhBArU,QAAQC,IAAI,gBAAiB,CAC3B6D,UAAWzK,EAAQI,WACnBga,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,cAAeA,EAAgB,IAC/BiI,cAAeA,EAAcW,cAC7BV,YAAaA,EAAYU,cACzBJ,aAAcA,EAAe,IAC7BC,cAAeA,EAAc5Q,QAAQ,GACrC6Q,WAAYA,EAAW7Q,QAAQ,GAC/BkI,gBAAiBA,EAAgBlI,QAAQ,GACzC8Q,aAAcA,EAAa9Q,QAAQ,GACnCgR,QAASX,EAAY7N,YAAc0N,EAAa1N,UAChDyO,UAAWb,EAAc5N,YAAcyN,EAAezN,YAGjD,CACLgD,KAAM,GAAG0C,KACTrO,MAAO,GAAGiX,OAKPI,GAAmB,CAACta,EAAOf,KAC/B,IAAKA,EAAS,OAEd,MAAMsb,EAAQva,EAAMwa,cACdC,EAAOF,EAAMG,wBACbC,EAAS3a,EAAM4a,QAAUH,EAAK7L,KAC9BiM,EAAaJ,EAAKxX,MAGlB6X,EAAkBH,EAASE,EAG3BxB,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UAGxDmP,EAAa,IAAIzY,KAAK+W,EAAezN,UAAakP,EAAkBvJ,GAGpEmI,EAA4C,GAAvB9U,EAAesC,MAAa,IACjDyB,EAAU,IAAIrG,KAAK+W,EAAezN,UAAY8N,EAAqB,GACnE7Q,EAAU,IAAIvG,KAAKgX,EAAa1N,UAAY8N,EAAqB,GAGvE,IAAI5F,EAAehB,GAAmB7T,EAAQE,IAU9C,GATK2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAI/BvC,GAAiBmI,EAAoB,CAEvC,MAAMI,EAAc,IAAIxX,KAAKF,KAAK0G,IAAIuQ,EAAezN,UAAWxJ,KAAKwG,IAAI0Q,EAAa1N,UAAWmP,EAAWnP,aAC5GkI,EAAaC,YAAc+F,CAC7B,MAEMiB,EAAWnP,UAAYjD,EAAQiD,UACjCkI,EAAaC,YAAcpL,EAClBoS,EAAWnP,UAAY/C,EAAQ+C,UACxCkI,EAAaC,YAAclL,EAE3BiL,EAAaC,YAAcgH,EAI/BnV,QAAQC,IAAI,gBAAiB,CAC3B6D,UAAWzK,EAAQI,WACnByb,gBAAiBA,EAAgB1R,QAAQ,GACzC2R,WAAYA,EAAWZ,cACvBa,eAAgBlH,EAAaC,YAAYoG,cACzCd,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,cAAeA,EAAgB,MAIjC2H,GAAuBhS,QACvB2O,GAAwB5W,IAIpBgc,GAAqB,CAACjb,EAAOf,KACjC,IAAKA,EAAS,OAEde,EAAMkb,iBACNlb,EAAMmb,kBAGN,IAAIC,EAAiBrI,GAAuBhI,IAAI9L,EAAQE,IACnDic,IACHA,EAAiB,CACfC,YAAY,EACZC,WAAY,EACZC,cAAe,MAEjBxI,GAAuBlI,IAAI5L,EAAQE,GAAIic,IAGzCA,EAAeC,YAAa,EAC5BD,EAAeE,WAAatb,EAAM4a,QAGlC,IAAI9G,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAEnCsH,EAAeG,cAAgBzH,EAAaC,YAAc,IAAIzR,KAAKwR,EAAaC,aAAe,KAG/FlK,SAAS2R,iBAAiB,YAAcpV,GAAMqV,GAAoBrV,EAAGnH,IACrE4K,SAAS2R,iBAAiB,UAAW,IAAME,GAAkBzc,KAIzDwc,GAAsB,CAACzb,EAAOf,KAElC,IAAImc,EAAiBrI,GAAuBhI,IAAI9L,EAAQE,IACxD,IAAKic,IAAmBA,EAAeC,aAAeD,EAAeG,cAAe,OAEpF,MAAMI,EAAS3b,EAAM4a,QAAUQ,EAAeE,WAIxCM,EAAqB/R,SAASC,cAAc,qBAAqB7K,EAAQE,mCACzE0c,EAAiBD,GAAoB9R,cAAc,oBACzD,IAAK+R,EAEH,YADAjW,QAAQ8H,KAAK,YAAazO,EAAQE,IAIpC,MAAM0b,EAAagB,EAAeC,YAE5BzC,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UAGxDmQ,EAAkBJ,EAASd,EAActJ,EAGzCyK,EAAgB,IAAI1Z,KAAK8Y,EAAeG,cAAc3P,UAAYmQ,GAGlErC,EAA4C,GAAvB9U,EAAesC,MAAa,IACjDyB,EAAU,IAAIrG,KAAK+W,EAAezN,UAAY8N,EAAqB,GACnE7Q,EAAU,IAAIvG,KAAKgX,EAAa1N,UAAY8N,EAAqB,GAGvE,IAAI5F,EAAehB,GAAmB7T,EAAQE,IAU9C,GATK2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAI/BvC,GAAiBmI,EAAoB,CAEvC,MAAMI,EAAc,IAAIxX,KAAKF,KAAK0G,IAAIuQ,EAAezN,UAAWxJ,KAAKwG,IAAI0Q,EAAa1N,UAAWoQ,EAAcpQ,aAC/GkI,EAAaC,YAAc+F,CAC7B,MAEMkC,EAAcpQ,UAAYjD,EAAQiD,UACpCkI,EAAaC,YAAcpL,EAClBqT,EAAcpQ,UAAY/C,EAAQ+C,UAC3CkI,EAAaC,YAAclL,EAE3BiL,EAAaC,YAAciI,EAI/BpW,QAAQC,IAAI,gBAAiB,CAC3B6D,UAAWzK,EAAQI,WACnBsc,OAAQA,EAAOvS,QAAQ,GACvB2S,eAAgBA,EAAiB,IACjCC,cAAeA,EAAc7B,cAC7Ba,eAAgBlH,EAAaC,YAAYoG,cACzCd,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,cAAeA,EAAgB,MAIjC2H,GAAuBhS,QACvB2O,GAAwB5W,IAIrByc,GAAqBzc,IACzB,IAAKA,EAAS,OAGd,IAAImc,EAAiBrI,GAAuBhI,IAAI9L,EAAQE,IACpDic,IACFA,EAAeC,YAAa,EAC5BD,EAAeE,WAAa,EAC5BF,EAAeG,cAAgB,MAIjC1R,SAASoS,oBAAoB,YAAc7V,GAAMqV,GAAoBrV,EAAGnH,IACxE4K,SAASoS,oBAAoB,UAAW,IAAMP,GAAkBzc,KAI5Did,GAAmBjd,IACvB,IAAKA,EAAS,OAEd,IAAI6U,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAGnC,MAAMqI,EAAa,IACbnB,EAAiB,IAAI1Y,KAAKwR,EAAaC,YAAYnI,UAAYuQ,GAG/D9C,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UACxD8N,EAA4C,GAAvB9U,EAAesC,MAAa,IAGvD,GAAIqK,GAAiBmI,EAAoB,CACvC,MAAMI,EAAc,IAAIxX,KAAKF,KAAK0G,IAAIuQ,EAAezN,UAAWxJ,KAAKwG,IAAI0Q,EAAa1N,UAAWoP,EAAepP,aAChHkI,EAAaC,YAAc+F,CAC7B,KAAO,CAEL,MAAMnR,EAAU,IAAIrG,KAAK+W,EAAezN,UAAY8N,EAAqB,GAGrEsB,EAAepP,WAAajD,EAAQiD,UACtCkI,EAAaC,YAAciH,EAE3BlH,EAAaC,YAAcpL,CAE/B,CAEA/C,QAAQC,IAAI,eAAgB,CAC1B6D,UAAWzK,EAAQI,WACnB+c,QAAStI,EAAaC,YAAYoG,cAClCkC,QAASrB,EAAeb,cACxBd,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,cAAeA,EAAgB,MAIjC2H,GAAuBhS,QACvB2O,GAAwB5W,IAIpBqd,GAAoBrd,IACxB,IAAKA,EAAS,OAEd,IAAI6U,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAGnC,MAAMqI,EAAa,IACbnB,EAAiB,IAAI1Y,KAAKwR,EAAaC,YAAYnI,UAAYuQ,GAG/D9C,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UACxD8N,EAA4C,GAAvB9U,EAAesC,MAAa,IAGvD,GAAIqK,GAAiBmI,EAAoB,CACvC,MAAMI,EAAc,IAAIxX,KAAKF,KAAK0G,IAAIuQ,EAAezN,UAAWxJ,KAAKwG,IAAI0Q,EAAa1N,UAAWoP,EAAepP,aAChHkI,EAAaC,YAAc+F,EAE3BlU,QAAQC,IAAI,qBAAsB,CAChC6D,UAAWzK,EAAQI,WACnB+c,QAAStI,EAAaC,YAAYoG,cAClCkC,QAASrB,EAAeb,cACxBL,YAAaA,EAAYK,cACzBd,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,cAAeA,EAAgB,KAEnC,KAAO,CAEL,MAAM1I,EAAU,IAAIvG,KAAKgX,EAAa1N,UAAY8N,EAAqB,GAGnEsB,EAAepP,WAAa/C,EAAQ+C,UACtCkI,EAAaC,YAAciH,EAE3BlH,EAAaC,YAAclL,EAG7BjD,QAAQC,IAAI,qBAAsB,CAChC6D,UAAWzK,EAAQI,WACnB+c,QAAStI,EAAaC,YAAYoG,cAClCkC,QAASrB,EAAeb,cACxBtR,QAASA,EAAQsR,cACjBd,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,cAAeA,EAAgB,KAEnC,CAGA2H,GAAuBhS,QACvB2O,GAAwB5W,IAIpBsd,GAAiBtd,IACrB,IAAKA,EAAS,OAAO,EAErB,IAAI6U,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAInC,MAAMuF,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UACxD8N,EAA4C,GAAvB9U,EAAesC,MAAa,IAGvD,GAAIqK,GAAiBmI,EACnB,OAAO,EAGT,MAAM/Q,EAAU,IAAIrG,KAAK+W,EAAezN,UAAY8N,EAAqB,GAEzE,OAAO5F,EAAaC,YAAYnI,UAAYjD,EAAQiD,WAIhD4Q,GAAkBvd,IACtB,IAAKA,EAAS,OAAO,EAErB,IAAI6U,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAInC,MAAMuF,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UACxD8N,EAA4C,GAAvB9U,EAAesC,MAAa,IAGvD,GAAIqK,GAAiBmI,EACnB,OAAO,EAIT,MAAMG,EAAgB,IAAIvX,KAAKgX,EAAa1N,UAAY8N,EAAqB,GAa7E,OAXA9T,QAAQC,IAAI,iBAAkB,CAC5B6D,UAAWzK,EAAQI,WACnB0U,YAAaD,EAAaC,YAAYoG,cACtCN,cAAeA,EAAcM,cAC7Bd,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,cAAeA,EAAgB,IAC/BmI,oBAAqBA,EAAqB,KAAatQ,QAAQ,GAAK,KACpEqT,UAAW3I,EAAaC,YAAYnI,UAAYiO,EAAcjO,YAGzDkI,EAAaC,YAAYnI,UAAYiO,EAAcjO,WAItD8Q,GAAwBzd,IAC5B,IAAKA,EAAS,OAEd,MAAMsa,EAAYvG,GAAyB/T,GACrC0d,EAAiBxD,GAAuBla,EAASia,GAAuBhS,OACxE0V,EAAgBC,GAAiB5d,EAASia,GAAuBhS,OAGjEmS,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UACxD8N,EAA4C,GAAvB9U,EAAesC,MAAa,IAGjD0S,EAAgB,IAAItX,KAAK+W,EAAezN,UAAY8N,EAAqB,GACzEG,EAAgB,IAAIvX,KAAKgX,EAAa1N,UAAY8N,EAAqB,GAE7E9T,QAAQC,IAAI,iBAAkB,CAC5B6D,UAAWzK,EAAQI,WACnBga,eAAgBA,EAAec,cAC/Bb,aAAcA,EAAaa,cAC3B5I,eAAgBA,EAAgB,KAAanI,QAAQ,GAAK,KAC1DsQ,oBAAqBA,EAAqB,KAAatQ,QAAQ,GAAK,KACpE0T,eAAgBvL,GAAiBmI,EACjCE,cAAeA,EAAcO,cAC7BN,cAAeA,EAAcM,cAC7B4C,kBAAmBxD,EACnByD,YAAazD,GAAW0D,QAAQ/e,QAAU,EAC1Cgf,gBAAiB3D,GAAW7W,MAAMxE,QAAU,EAC5Cif,eAAgB5D,GAAWrX,WAAWiY,eAAiB,MACvDiD,aAAc7D,GAAWpX,SAASgY,eAAiB,MACnDkD,cAAeV,EAAe/N,KAC9B0O,eAAgBX,EAAe1Z,MAC/B2Z,cAAeA,EACfL,cAAeA,GAActd,GAC7Bud,eAAgBA,GAAevd,GAE/BmQ,iBAAkBnQ,EAAQuB,mBAC1ByN,eAAgBhP,EAAQwB,iBACxBuO,cAAevB,EAAiBxO,GAChC4O,YAAaC,EAAe7O,GAC5B8O,aAAcC,EAAgB/O,MAK5B4d,GAAmB,CAAC5d,EAASma,KACjC,IAAKna,EAAS,MAAO,GAGrB,MAAMsa,EAAYvG,GAAyB/T,GAC3C,IAAKsa,IAAcA,EAAUrX,YAAcqX,EAAUpX,QAAS,CAE5D,IAAI2R,EAAehB,GAAmB7T,EAAQE,IACzC2U,IACHA,EAAe,CACbC,YAAa9U,EAAQuB,mBAAqB,IAAI8B,KAAKrD,EAAQuB,oBAAsB,IAAI8B,KACrF0R,UAAWpP,EAAesC,OAE5B4L,GAAmB7T,EAAQE,IAAM2U,GAInC,MAAMuF,EAAiB,IAAI/W,KAAKrD,EAAQuB,oBAClC8Y,EAAe,IAAIhX,KAAKrD,EAAQwB,kBAChC8Q,EAAgB+H,EAAa1N,UAAYyN,EAAezN,UACxD8N,EAA4C,GAAvB9U,EAAesC,MAAa,IACvD,IAAIyS,EAAiB7F,EAAaC,YAGhC,MAAM6F,EAAgB,IAAItX,KAAK+W,EAAezN,UAAY8N,EAAqB,GACzEG,EAAgB,IAAIvX,KAAKgX,EAAa1N,UAAY8N,EAAqB,GAG/E,GAAInI,GAAiBmI,EAAoB,CAEvC,MAAMI,EAAc,IAAIxX,KAAKF,KAAK0G,IAAIuQ,EAAezN,UAAWxJ,KAAKwG,IAAI0Q,EAAa1N,UAAW+N,EAAe/N,aAChH+N,EAAiBG,CACnB,MAEMH,EAAe/N,UAAYgO,EAAchO,UAC3C+N,EAAiBC,EACRD,EAAe/N,UAAYiO,EAAcjO,YAClD+N,EAAiBE,GAKrB,MAAML,EAAgB,IAAIlX,KAAKqX,EAAe/N,UAAY8N,EAAqB,GACzED,EAAc,IAAInX,KAAKqX,EAAe/N,UAAY8N,EAAqB,GAG7E,IAAI6D,EAAqB/D,EACrBgE,EAAmB/D,EAEnB8D,EAAmB3R,UAAYyN,EAAezN,YAChD2R,EAAqBlE,EACrBmE,EAAmB,IAAIlb,KAAK+W,EAAezN,UAAY8N,IAGrD8D,EAAiB5R,UAAY0N,EAAa1N,YAC5C4R,EAAmBlE,EACnBiE,EAAqB,IAAIjb,KAAKgX,EAAa1N,UAAY8N,GAGnD6D,EAAmB3R,UAAYyN,EAAezN,YAChD2R,EAAqBlE,EACrBmE,EAAmB,IAAIlb,KAAK+W,EAAezN,UAAY8N,KAI3D,MAAM+D,EAAeF,EAAmBxI,mBAAmB,QAAS,CAClES,KAAM,UACNC,OAAQ,YAEJiI,EAAaF,EAAiBzI,mBAAmB,QAAS,CAC9DS,KAAM,UACNC,OAAQ,YAGJkI,GAAmBH,EAAiB5R,UAAY2R,EAAmB3R,WAAa,IAEtF,MAAO,GAAG6R,OAAkBC,MAAeC,EAAgBvU,QAAQ,OACrE,CAGA,MAAMwU,EAAkB,IAAItb,KAAKiX,EAAUrX,WACrC2b,EAAgB,IAAIvb,KAAKiX,EAAUpX,SAEnCsb,EAAeG,EAAgB7I,mBAAmB,QAAS,CAC/DS,KAAM,UACNC,OAAQ,YAEJiI,EAAaG,EAAc9I,mBAAmB,QAAS,CAC3DS,KAAM,UACNC,OAAQ,YAIJqI,GAAyBD,EAAcjS,UAAYgS,EAAgBhS,WAAa,IAUtF,OARAhG,QAAQC,IAAI,kBAAmB5G,EAAQI,WAAY,CACjD6C,UAAW0b,EAAgBzD,cAC3BhY,QAAS0b,EAAc1D,cACvB/N,SAAU0R,EAAsB1U,QAAQ,GAAK,KAC7CiQ,eAAgB,IAAI/W,KAAKrD,EAAQuB,oBAAoB2Z,cACrDb,aAAc,IAAIhX,KAAKrD,EAAQwB,kBAAkB0Z,gBAG5C,GAAGsD,OAAkBC,MAAeI,EAAsB1U,QAAQ,SAuFrE,OAjFN,QAAMnL,EAAY8f,IAChB,GAAIA,EAAa7f,OAAS,GAAKQ,EAAUwI,MAAO,CAC9C,MAAM8W,EAAiBD,EAAaE,KAAKC,GAAKA,EAAE/e,GAAGI,aAAeb,EAAUwI,OACxE8W,IAEF,QAAS,KAEP,MAAMG,EAAW,qBAAqBH,EAAe7e,KAC/Cif,EAASvU,SAASkM,eAAeoI,GACnCC,EACJvI,GAAwBmI,IAEtBpY,QAAQ8H,KAAK,uBAAwByQ,GAErC3V,WAAW,KACTqN,GAAwBmI,IACvB,OAIX,GACC,CAAEK,MAAM,KAGX,QAAM3f,EAAY4f,IAChB,GAAIA,GAAUrgB,EAAUiJ,MAAMhJ,OAAS,EAAG,CACxC,MAAM8f,EAAiB/f,EAAUiJ,MAAM+W,KAAKC,GAAKA,EAAE/e,GAAGI,aAAe+e,GACjEN,IAEF,QAAS,KAEP,MAAMG,EAAW,qBAAqBH,EAAe7e,KAC/Cif,EAASvU,SAASkM,eAAeoI,GACnCC,GACFxY,QAAQC,IAAI,YAAamY,EAAe3e,YAGN,YAA9B2e,EAAe3e,aACjBuG,QAAQC,IAAI,qBACZD,QAAQC,IAAI,UAAWmY,EAAexd,oBACtCoF,QAAQC,IAAI,UAAWmY,EAAevd,kBACtCmF,QAAQC,IAAI,SAAU4H,EAAiBuQ,IACvCpY,QAAQC,IAAI,QAASiI,EAAekQ,IACpCpY,QAAQC,IAAI,QAASmI,EAAgBgQ,IACrCpY,QAAQC,IAAI,WAAYmY,EAAe1N,uBACvC1K,QAAQC,IAAI,6BAGdgQ,GAAwBmI,KAExBpY,QAAQ8H,KAAK,uBAAwByQ,GAErC3V,WAAW,KACTqN,GAAwBmI,IACvB,OAIX,KAIF,QAAU5W,UAER,MAAMpC,EAAcP,EAAMQ,MAAMC,OAChC,GAAIF,QACImC,SAKR,GAAIpC,EAAWmC,MAAMhJ,OAAS,EAAG,CAE/B,MAAMqgB,EAAcnZ,eAAeC,QAAQ,eACvB,SAAhBkZ,IACFnZ,eAAeU,WAAW,qBACpBxH,IAEV,IAGW,CACTL,YACAS,YACA+D,oBACAM,gBACA5E,YACAC,kBACAE,cACAkB,eACA0B,mBACAqC,eACA5D,oBACAoB,eACA4B,oBACAoJ,kBACA4C,sBACMxN,yBACRT,0BACAuB,wBACEO,gBACA6J,kBACAxJ,kBACAzC,aACAmN,oBACA5M,kBACAuN,kBACAG,mBACA1P,kBACAF,wBACAgK,eACAtB,2BACAU,iBACAiG,iBACAE,kBACA4B,qBACAC,sBACAnP,0BACAe,wBACAI,0BACAU,iBACAkL,mBACA7M,2BACAW,2BACAxB,0BACAqQ,kBACAY,eACAE,oBACAG,sBACAxS,wBAGA2T,kBACAqD,2BACA7C,4BACAa,+BAGCsF,0BACAmB,oBACAW,sBACAiB,mBACAI,oBACAC,iBACAC,kBACAK,oBACAH,wBAKP,G,WCzsFF,MAAM8B,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAASC,IAAQ,CAAC,YAAY,qBAEzF,S","sources":["webpack://logtool-frontend/./src/views/SurgeryStatistics.vue","webpack://logtool-frontend/./src/views/SurgeryStatistics.vue?30b3"],"sourcesContent":["<template>\n  <div class=\"surgery-statistics-container\">\n    <!-- 页面标题和操作栏 -->\n    <div class=\"action-bar\">\n      <div class=\"title-section\">\n        <h2 class=\"page-title\">手术统计</h2>\n        <p class=\"page-subtitle\">查看和分析各场手术的详细统计数据</p>\n      </div>\n    </div>\n    \n    <!-- 分析按钮 -->\n    <div class=\"analysis-section\" v-if=\"!surgeries.length && !analyzing\">\n      <el-card class=\"empty-card\">\n        <div class=\"empty-content\">\n          <el-icon class=\"empty-icon\"><Calendar /></el-icon>\n          <h3>手术数据分析</h3>\n          <p v-if=\"logEntriesCount > 0\">\n            检测到 {{ logEntriesCount }} 条日志条目数据，点击按钮开始分析\n          </p>\n          <p v-else>\n            暂无日志条目数据，请先在批量分析或日志分析页面加载日志数据\n          </p>\n          \n          <el-button \n            type=\"primary\" \n            @click=\"analyzeLogs\" \n            :loading=\"analyzing\"\n            :disabled=\"logEntriesCount === 0\"\n          >\n            <el-icon><DataAnalysis /></el-icon>\n            {{ getAnalysisButtonText() }}\n          </el-button>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 分析中状态 -->\n    <div class=\"analysis-section\" v-if=\"!surgeries.length && analyzing\">\n      <el-card class=\"empty-card\">\n        <div class=\"empty-content\">\n          <el-icon class=\"empty-icon\"><Loading /></el-icon>\n          <h3>正在分析手术数据...</h3>\n          <p>请稍候，系统正在处理日志条目数据</p>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 手术统计内容 -->\n    <div v-else>\n      \n      \n      <!-- 标签页导航 -->\n      <el-card class=\"tab-card\">\n        <el-tabs \n          v-model=\"activeTab\" \n          type=\"card\" \n          @tab-click=\"handleTabClick\"\n          :lazy=\"true\"\n          :before-leave=\"handleBeforeTabLeave\"\n          :stretch=\"false\"\n          :closable=\"false\"\n          :addable=\"false\"\n        >\n          <el-tab-pane \n            v-for=\"surgery in surgeries\" \n            :key=\"surgery.id\"\n            :label=\"surgery.surgery_id\"\n            :name=\"surgery.id.toString()\"\n            :data-surgery-id=\"surgery.id\"\n          >\n            <!-- 导出按钮 -->\n            <div class=\"export-section\">\n              <el-button type=\"primary\" @click=\"exportReport(surgery.id)\">\n                <el-icon><Download /></el-icon>\n                导出手术报告 PDF\n              </el-button>\n            </div>\n            \n                        <!-- 手术信息布局 -->\n            <div class=\"surgery-info-layout\">\n              <!-- 手术时间线 - 30%宽度 -->\n              <div class=\"timeline-section\">\n                <el-card class=\"info-card\">\n                  <div class=\"info-header\">\n                    <div class=\"time\">手术时间线</div>\n                    <div class=\"badges\">\n                      <el-tag \n                        v-if=\"surgery.alarm_count > 0\" \n                        type=\"danger\" \n                        size=\"small\"\n                        class=\"alarm-tag\"\n                        @click=\"scrollToAlarmCard(surgery.id)\"\n                        style=\"cursor: pointer;\"\n                      >\n                        查看手术故障\n                      </el-tag>\n                    </div>\n                  </div>\n\n                  <!-- 按时间顺序排序的时间线（AntD Steps progressDot 风格） -->\n                  <a-steps\n                    direction=\"vertical\"\n                    :current=\"getSortedTimelineEvents(surgery).length - 1\"\n                    :progress-dot=\"true\"\n                    class=\"surgery-steps\"\n                  >\n                    <a-step\n                      v-for=\"(event, index) in getSortedTimelineEvents(surgery)\"\n                      :key=\"`event-${index}`\"\n                      :title=\"event.label\"\n                      :description=\"formatTime(event.time)\"\n                    />\n                  </a-steps>\n                </el-card>\n              </div>\n\n              <!-- 手术状态变化图 - 70%宽度 -->\n              <div class=\"state-chart-section\">\n                <el-card class=\"state-chart-card\">\n                  <div class=\"chart-header\">\n                    <div class=\"chart-title\">手术状态机变化图</div>\n                  </div>\n                  \n                  <!-- 状态机曲线图容器（ECharts） -->\n                  <div \n                    class=\"state-chart-container\"\n                  >\n                    <div :id=\"`stateMachineChart_${surgery.id}`\" style=\"width: 100%; height: 100%\"></div>\n                  </div>\n                </el-card>\n              </div>\n            </div>\n                        \n            <!-- 手术统计（恢复整行宽度），并在卡片内下方显示手术器械表 -->\n            <el-card class=\"arm-usage-card\">\n              <template #header>\n                <div class=\"card-header\">\n                  <span>手术统计</span>\n                  <el-tag type=\"info\">总手术时长: {{ surgery.total_duration }} 分钟</el-tag>\n                </div>\n              </template>\n\n              <!-- 统一时间轴视图 - 结合手术时长和工具臂使用 -->\n              <div class=\"unified-timeline-view\">\n                <!-- 手术时长进度条 -->\n                <div class=\"surgery-progress-container\">\n                  <div class=\"surgery-duration-info\">\n                    <span class=\"duration-text\">手术时长：{{ surgery.total_duration }} 分钟</span>\n                    <span class=\"time-range\">手术时间：{{ formatTime(surgery.surgery_start_time) }} - {{ formatTime(surgery.surgery_end_time) }}</span>\n                  </div>\n                  <div class=\"surgery-timeline-wrapper\">\n                    <div class=\"surgery-label\">\n                      <div class=\"surgery-color\"></div>\n                      <span class=\"surgery-name\">手术时间段</span>\n                    </div>\n                    <div class=\"surgery-timeline-container\">\n                      <div class=\"surgery-timeline-bar\">\n                        <div \n                          class=\"surgery-timeline-segment\"\n                          :style=\"getSurgeryTimelineStyle(surgery)\"\n                        >\n                          <span class=\"surgery-segment-text\">手术时间段</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"progress-labels\">\n                    <span class=\"time-label\">{{ formatTimeShort(getProgressTimelineRange(surgery).start) }}</span>\n                    <span class=\"time-label\">{{ formatTimeShort(getProgressTimelineRange(surgery).end) }}</span>\n                  </div>\n                </div>\n\n                <!-- 工具臂时间线（更紧凑） -->\n                <div class=\"arm-timeline\">\n                  <div \n                    v-for=\"(armUsage, index) in getArmUsages(surgery)\" \n                    :key=\"index\"\n                    class=\"arm-item\"\n                  >\n                    <div class=\"arm-header\">\n                      <div class=\"arm-actions\">\n                        <el-button \n                          size=\"small\" \n                          type=\"primary\" \n                          plain\n                          @click=\"toggleArmDetails(surgery.id, index)\"\n                        >\n                          <el-icon><ArrowDown /></el-icon>\n                          详情\n                        </el-button>\n                      </div>\n                    </div>\n\n                    <div class=\"arm-timeline-container\">\n                      <div class=\"arm-label\">\n                        <div class=\"arm-color\" :class=\"`arm-${index + 1}`\"></div>\n                        <span class=\"arm-name\">工具臂 {{ index + 1 }}</span>\n                      </div>\n                      <div class=\"arm-timeline-bar\">\n                        <div \n                          v-for=\"(segment, segmentIndex) in getArmTimelineSegments(armUsage, surgery)\" \n                          :key=\"segmentIndex\"\n                          class=\"timeline-segment\" \n                          :class=\"`arm-${index + 1}`\" \n                          :style=\"segment\"\n                        >\n                          <el-tooltip \n                            :content=\"`${getSegmentInstrumentName(segment, armUsage, surgery)}`\"\n                            placement=\"top\"\n                            :show-arrow=\"true\"\n                            :popper-class=\"'usage-time-tooltip'\"\n                          >\n                            <div class=\"segment-content\">\n                              <span class=\"segment-text\"> </span>\n                            </div>\n                          </el-tooltip>\n                        </div>\n                      </div>\n                    </div>\n\n                    <el-collapse-transition>\n                      <div v-show=\"armDetailsVisible[surgery.id + '_' + index]\" class=\"arm-details\">\n                        <div \n                          v-for=\"(groupedUsage, udiCode) in getGroupedUsagesByUdi(armUsage)\" \n                          :key=\"udiCode\"\n                          class=\"usage-group\"\n                        >\n                          <div class=\"usage-group-header\">\n                            <div class=\"usage-group-info\">\n                              <div class=\"usage-group-name\">\n                                {{ groupedUsage.instrumentName }}\n                              </div>\n                              <div class=\"usage-group-udi\">UDI: {{ udiCode }}</div>\n                              <div class=\"usage-group-duration\">总使用时长: {{ getGroupedUsageDuration(groupedUsage) }}</div>\n                            </div>\n                          </div>\n                          <div class=\"arm-timeline-container\">\n                            <div class=\"arm-timeline-bar\">\n                              <div \n                                v-for=\"(usage, usageIndex) in groupedUsage.usages\" \n                                :key=\"usageIndex\"\n                                class=\"timeline-segment\" \n                                :class=\"`arm-${index + 1}`\" \n                                :style=\"getUsageTimelineStyle(usage, surgery)\"\n                              >\n                                <el-tooltip \n                                  :content=\"`器械：${usage.instrumentName}\\n时间：${formatTime(usage.startTime)} - ${formatTime(usage.endTime)}\\n时长：${Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)}分钟`\"\n                                  placement=\"top\"\n                                  :show-arrow=\"true\"\n                                  :popper-class=\"'usage-time-tooltip'\"\n                                >\n                                  <div class=\"segment-content\">\n                                    <span class=\"segment-text\">{{ getSegmentText(usage, surgery) }}</span>\n                                  </div>\n                                </el-tooltip>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"energy-time\">\n                          <el-icon class=\"energy-icon\"><Lightning /></el-icon>\n                          器械总使用时间: {{ getEnergyTime(armUsage) }}\n                        </div>\n                      </div>\n                    </el-collapse-transition>\n                  </div>\n                </div>\n              </div>\n\n              <!-- 手术器械（位于手术统计卡片内，工具臂激活时间下方） -->\n              <div class=\"instruments-inside\">\n                <div class=\"card-header\" style=\"margin-top: 12px; margin-bottom: 8px;\">\n                  <span>手术器械</span>\n                </div>\n                <el-table :data=\"getInstrumentRows(surgery)\" size=\"small\" style=\"width: 100%\">\n                  <el-table-column prop=\"instrumentName\" label=\"器械名称\" min-width=\"180\" />\n                  <el-table-column prop=\"udi\" label=\"UDI码\" min-width=\"220\" />\n                </el-table>\n              </div>\n            </el-card>\n            \n            <!-- 安全报警信息 -->\n            <el-card class=\"alarm-card\">\n              <template #header>\n                <span>安全报警记录</span>\n              </template>\n              \n              <el-table :data=\"getAlarmDetails(surgery).slice(0, showAllAlarms[surgery.id] ? undefined : 5)\" style=\"width: 100%\">\n                <el-table-column prop=\"time\" label=\"时间\" width=\"180\">\n                  <template #default=\"{ row }\">\n                    {{ formatTime(row.time) }}\n                  </template>\n                </el-table-column>\n                <el-table-column prop=\"code\" label=\"故障码\" width=\"120\">\n                  <template #default=\"{ row }\">\n                    {{ row.code || row.error_code || '无' }}\n                  </template>\n                </el-table-column>\n                <el-table-column prop=\"message\" label=\"报警信息\" />\n                <el-table-column prop=\"status\" label=\"处理状态\" width=\"120\">\n                  <template #default=\"{ row }\">\n                    <el-tag :type=\"row.status === '已恢复' ? 'success' : row.status === '未处理' ? 'danger' : 'warning'\">\n                      {{ row.status }}\n                    </el-tag>\n                  </template>\n                </el-table-column>\n              </el-table>\n              \n              <!-- 展开/折叠按钮 -->\n              <div v-if=\"getAlarmDetails(surgery).length > 5\" class=\"alarm-toggle\">\n                <el-button \n                  type=\"text\" \n                  @click=\"toggleAlarms(surgery.id)\"\n                  size=\"small\"\n                >\n                  <el-icon>\n                    <ArrowDown v-if=\"!showAllAlarms[surgery.id]\" />\n                    <ArrowUp v-else />\n                  </el-icon>\n                  {{ showAllAlarms[surgery.id] ? '收起' : `展开更多 (${getAlarmDetails(surgery).length - 5}条)` }}\n                </el-button>\n              </div>\n              \n              <div class=\"alarm-summary\">\n                <el-tag type=\"danger\">报警总数: {{ surgery.alarm_count || 0 }}</el-tag>\n              </div>\n            </el-card>\n          </el-tab-pane>\n        </el-tabs>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted, nextTick, computed, watch, h, resolveComponent } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter, useRoute } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { \n  DataAnalysis, \n  Download, \n  SwitchButton, \n  Close, \n  VideoPlay, \n  VideoPause, \n  ArrowUp, \n  ArrowDown,\n  ArrowLeft,\n  ArrowRight,\n  Calendar,\n  PowerOff,\n  Lightning,\n  Globe,\n  Loading\n} from '@element-plus/icons-vue'\nimport { debounce, safeNextTick } from '@/utils/resizeObserverFix'\nimport * as echarts from 'echarts'\n\nimport api from '@/api'\n\nexport default {\n  name: 'SurgeryStatistics',\n  components: {\n    DataAnalysis,\n    Download,\n    SwitchButton,\n    Close,\n    VideoPlay,\n    VideoPause,\n        ArrowUp, \n    ArrowDown,\n    ArrowLeft,\n    ArrowRight,\n    Calendar,\n    PowerOff,\n    Lightning,\n    Globe,\n    Loading\n  },\n  setup() {\n    // 不需要悬停效果：移除自定义 progressDot 渲染与状态区分\n    const store = useStore()\n    const router = useRouter()\n    const route = useRoute()\n    \n    // ResizeObserver 错误处理已在全局初始化，这里不需要重复处理\n    \n    // 响应式数据\n    const surgeries = ref([])\n    const activeTab = ref('')\n    const armDetailsVisible = reactive({})\n    const showAllAlarms = reactive({})\n    const analyzing = ref(false)\n    \n    // 状态机图表相关\n    const stateMachineCharts = new Map() // 为每个手术存储独立的图表实例\n    const chartViewRange = ref(5) // 默认显示5分钟\n    const chartCurrentTime = ref(null) // 当前图表中心时间\n    \n    // Y轴刻度配置 - 固定间隔\n    const yAxisConfig = {\n      // 固定间隔 - 显示指定的刻度值，使用映射位置增大间距\n      fixedInterval: {\n        afterBuildTicks: function(axis) {\n          // 使用固定的刻度值\n          const fixedStates = getFixedTicks()\n          const positionMap = getStateToYPositionMap()\n          \n          // 创建刻度数组，确保显示正确的状态值\n          axis.ticks = fixedStates.map(stateValue => {\n            const yPosition = positionMap[stateValue]\n            return {\n              value: yPosition,        // Y轴位置使用映射值\n              label: stateValue.toString() // 显示原始状态值\n            }\n          })\n        }\n      }\n    }\n    \n    // 状态值到Y轴位置的映射 - 增大特定刻度之间的距离\n    // 这个映射用于在Y轴上增大特定状态值之间的视觉距离，而不改变显示的刻度值\n    const getStateToYPositionMap = () => {\n      return {\n        0: 0,   // 0位置\n        1: 5,   // 1位置（与0距离增大）\n        2: 10,  // 2位置\n        10: 20, // 10位置\n        13: 30, // 13位置（与10距离增大）\n        14: 35, // 14位置（与13距离增大）\n        20: 45, // 20位置（与14距离增大）\n        21: 50, // 21位置（与20距离增大）\n        30: 60, // 30位置（与21距离增大）\n        31: 65  // 31位置（与30距离增大）\n      }\n    }\n    \n    // 固定显示指定的刻度值\n    const getFixedTicks = () => {\n      // 显示的刻度值：0, 1, 2, 10, 13, 14, 20, 21, 30, 31\n      return [0, 1, 2, 10, 13, 14, 20, 21, 30, 31]\n    }\n\n    \n\n\n    // 计算属性 - 获取日志条目数据\n    const logEntries = computed(() => {\n      // 优先从URL参数获取日志ID\n      const logIdsParam = route.query.logIds\n      if (logIdsParam) {\n        // 如果有URL参数，直接返回空数组，让后端处理\n        return []\n      }\n      \n      // 如果没有URL参数，尝试从sessionStorage获取数据（兼容旧版本）\n      try {\n        const surgeryData = sessionStorage.getItem('surgeryAnalysisData')\n        if (surgeryData) {\n          const data = JSON.parse(surgeryData)\n          if (data && data.entries && data.entries.length > 0) {\n            // 检查数据是否过期（1小时）\n            const dataAge = Date.now() - (data.timestamp || 0)\n            if (dataAge > 60 * 60 * 1000) {\n              console.log('手术分析数据已过期，清除缓存')\n              sessionStorage.removeItem('surgeryAnalysisData')\n              return []\n            }\n            \n            // 检查是否是压缩格式的数据\n            if (data.compressed) {\n              // 解压缩数据\n              const decompressedEntries = data.entries.map(entry => ({\n                timestamp: entry.t,\n                error_code: entry.e,\n                param1: entry.p1,\n                param2: entry.p2,\n                param3: entry.p3,\n                param4: entry.p4,\n                explanation: entry.exp,\n                log_name: entry.ln\n              }))\n              \n              return decompressedEntries\n            } else {\n              return data.entries\n            }\n          }\n        }\n      } catch (error) {\n        console.error('解析手术分析数据失败:', error)\n        sessionStorage.removeItem('surgeryAnalysisData')\n      }\n      \n      return []\n    })\n    \n    const logEntriesCount = computed(() => logEntries.value.length)\n    \n    // 通过URL参数中的日志ID直接分析手术数据\n    const loadBatchLogEntriesByIds = async () => {\n      try {\n        // 从URL参数获取日志ID\n        const logIdsParam = route.query.logIds\n        if (!logIdsParam) return\n        \n        const logIds = logIdsParam.split(',').map(id => parseInt(id))\n        if (!logIds || logIds.length === 0) return\n        \n        // 设置分析状态\n        analyzing.value = true\n        \n        // 调用后端API创建分析任务\n        const response = await api.surgeryStatistics.analyzeByLogIds(logIds)\n        \n        if (response.data.success && response.data.taskId) {\n          // 异步任务已创建，开始轮询结果\n          await pollTaskResult(response.data.taskId)\n        } else if (response.data.success && response.data.data) {\n          // 直接返回结果（兼容旧版本）\n          surgeries.value = response.data.data || []\n          \n          if (surgeries.value.length > 0) {\n            activeTab.value = surgeries.value[0].id.toString()\n            surgeries.value.forEach(surgery => {\n              armDetailsVisible[surgery.id] = false\n              showAllAlarms[surgery.id] = false\n            })\n          }\n          \n          ElMessage.success(response.data.message || `成功分析出 ${surgeries.value.length} 场手术`)\n        } else {\n          ElMessage.error(response.data.message || '分析失败')\n        }\n        \n      } catch (error) {\n        ElMessage.error('分析批量日志数据失败: ' + (error.response?.data?.message || error.message))\n      } finally {\n        analyzing.value = false\n      }\n    }\n    \n    // 轮询任务结果\n    const pollTaskResult = async (taskId) => {\n      const maxAttempts = 60 // 最多轮询60次（5分钟）\n      let attempts = 0\n      \n      const poll = async () => {\n        try {\n          const response = await api.surgeryStatistics.getAnalysisTaskStatus(taskId)\n          \n          if (response.data.success) {\n            const task = response.data.data\n            \n            if (task.status === 'completed') {\n              // 任务完成，显示结果\n              surgeries.value = task.result || []\n              \n              if (surgeries.value.length > 0) {\n                activeTab.value = surgeries.value[0].id.toString()\n                surgeries.value.forEach(surgery => {\n                  armDetailsVisible[surgery.id] = false\n                  showAllAlarms[surgery.id] = false\n                })\n              }\n              \n              ElMessage.success(`成功分析出 ${surgeries.value.length} 场手术`)\n              return\n            } else if (task.status === 'failed') {\n              // 任务失败\n              ElMessage.error(task.error || '分析任务失败')\n              return\n            } else if (task.status === 'processing') {\n              // 任务进行中，继续轮询\n              attempts++\n              if (attempts < maxAttempts) {\n                // 使用Promise包装setTimeout\n                await new Promise(resolve => setTimeout(resolve, 5000))\n                await poll()\n              } else {\n                ElMessage.error('分析任务超时，请稍后查看结果')\n              }\n            }\n          } else {\n            ElMessage.error('查询任务状态失败')\n          }\n        } catch (error) {\n          ElMessage.error('查询任务状态失败: ' + error.message)\n        }\n      }\n      \n      // 开始轮询\n      await poll()\n    }\n    \n    // 获取时间范围\n    const getTimeRange = () => {\n      if (logEntries.value.length === 0) return '无数据'\n      \n      const timestamps = logEntries.value.map(entry => new Date(entry.timestamp))\n      const minTime = new Date(Math.min(...timestamps))\n      const maxTime = new Date(Math.max(...timestamps))\n      \n      return `${formatTimeShort(minTime)} 至 ${formatTimeShort(maxTime)}`\n    }\n\n    // 获取分析按钮文本\n    const getAnalysisButtonText = () => {\n      if (logEntriesCount.value === 0) {\n        return '请先加载日志条目数据'\n      }\n      return `分析日志条目 (${logEntriesCount.value})`\n    }\n\n    // 分析日志数据\n    const analyzeLogs = async () => {\n      if (logEntries.value.length === 0) {\n        ElMessage.warning('暂无日志条目数据，请先在批量分析或日志分析页面加载日志数据')\n        return\n      }\n      \n      analyzing.value = true\n      try {\n        // 直接使用已排序的日志条目数据进行手术分析\n        \n        // 检查数据大小\n        const dataSize = JSON.stringify(logEntries.value).length\n        const maxSize = 10 * 1024 * 1024 // 10MB\n        let analysisData = logEntries.value\n        \n        if (dataSize > maxSize) {\n          ElMessage.warning(`数据量较大(${(dataSize / 1024 / 1024).toFixed(1)}MB)，将进行数据采样以提高分析速度`)\n          \n          // 数据采样：保留关键数据点\n          const sampleSize = Math.floor(maxSize / (dataSize / logEntries.value.length))\n          const step = Math.floor(logEntries.value.length / sampleSize)\n          analysisData = []\n          \n          for (let i = 0; i < logEntries.value.length; i += step) {\n            analysisData.push(logEntries.value[i])\n            if (analysisData.length >= sampleSize) break\n          }\n          \n        }\n        \n\n        \n        // 调用新的API端点，传递已排序的日志条目数据\n        const response = await api.surgeryStatistics.analyzeSortedEntries(analysisData)\n        \n        if (response.data.success) {\n          surgeries.value = response.data.data || []\n          \n          \n          \n          if (surgeries.value.length > 0) {\n            activeTab.value = surgeries.value[0].id.toString()\n            surgeries.value.forEach(surgery => {\n              armDetailsVisible[surgery.id] = false\n              showAllAlarms[surgery.id] = false\n            })\n          }\n          \n          ElMessage.success(`手术数据分析完成，共发现 ${surgeries.value.length} 场手术`)\n        } else {\n          ElMessage.error(response.data.message || '分析失败')\n        }\n      } catch (error) {\n        ElMessage.error('分析日志数据失败: ' + (error.response?.data?.message || error.message))\n      } finally {\n        analyzing.value = false\n      }\n    }\n\n    // 导出报告\n    const exportReport = async (surgeryId) => {\n      try {\n        const response = await api.surgeryStatistics.exportReport(surgeryId)\n        ElMessage.success('报告导出功能开发中')\n      } catch (error) {\n        ElMessage.error('导出报告失败')\n      }\n    }\n\n    // 切换工具臂详情显示\n    const toggleArmDetails = (surgeryId, armIndex) => {\n      const key = `${surgeryId}_${armIndex}`\n      armDetailsVisible[key] = !armDetailsVisible[key]\n    }\n\n    // 切换报警记录显示\n    const toggleAlarms = (surgeryId) => {\n      showAllAlarms[surgeryId] = !showAllAlarms[surgeryId]\n    }\n\n    // 滚动到安全报警记录卡片\n    const scrollToAlarmCard = (surgeryId) => {\n      // 确保当前手术标签页是激活的\n      if (activeTab.value !== surgeryId.toString()) {\n        activeTab.value = surgeryId.toString()\n      }\n      \n      // 等待DOM更新后滚动到报警卡片\n      nextTick(() => {\n        const alarmCard = document.querySelector(`[data-surgery-id=\"${surgeryId}\"] .alarm-card`)\n        if (alarmCard) {\n          alarmCard.scrollIntoView({ \n            behavior: 'smooth', \n            block: 'start' \n          })\n          \n          // 添加高亮效果\n          alarmCard.style.boxShadow = '0 0 0 2px #F56C6C, 0 4px 12px rgba(245, 108, 108, 0.3)'\n          alarmCard.style.transition = 'box-shadow 0.3s ease'\n          \n          // 3秒后移除高亮效果\n          setTimeout(() => {\n            alarmCard.style.boxShadow = ''\n          }, 3000)\n        }\n      })\n    }\n\n    // 获取工具臂使用情况\n    const getArmUsages = (surgery) => {\n      return [\n        surgery.arm1_usage || [],\n        surgery.arm2_usage || [],\n        surgery.arm3_usage || [],\n        surgery.arm4_usage || []\n      ]\n    }\n\n      // 手术器械表数据\n      const getInstrumentRows = (surgery) => {\n        if (!surgery) return []\n        const grouped = new Map()\n        const allArms = getArmUsages(surgery)\n        allArms.forEach(armUsage => {\n          (armUsage || []).forEach(u => {\n            if (!u) return\n            if (!u.startTime || !u.endTime) return\n            const udi = u.udi || '未知'\n            const key = `${udi}__${u.instrumentName || '未知器械'}`\n            if (!grouped.has(key)) {\n              grouped.set(key, {\n                instrumentName: u.instrumentName || '未知器械',\n                udi: udi,\n                segments: []\n              })\n            }\n            grouped.get(key).segments.push({ startTime: u.startTime, endTime: u.endTime })\n          })\n        })\n        // 合并相邻/重叠的段，并计算整体起止\n        const rows = Array.from(grouped.values()).map(item => {\n          // 排序\n          item.segments.sort((a, b) => new Date(a.startTime) - new Date(b.startTime))\n          // 合并重叠或相邻\n          const merged = []\n          for (const seg of item.segments) {\n            if (merged.length === 0) { merged.push({ ...seg }); continue }\n            const last = merged[merged.length - 1]\n            const lastEnd = new Date(last.endTime).getTime()\n            const curStart = new Date(seg.startTime).getTime()\n            const curEnd = new Date(seg.endTime).getTime()\n            if (curStart <= lastEnd) {\n              if (curEnd > lastEnd) last.endTime = seg.endTime\n            } else {\n              merged.push({ ...seg })\n            }\n          }\n          const startTime = merged.length ? merged[0].startTime : null\n          const endTime = merged.length ? merged[merged.length - 1].endTime : null\n          return { ...item, segments: merged, startTime, endTime }\n        })\n        // 按起始时间排序\n        rows.sort((a, b) => new Date(a.startTime) - new Date(b.startTime))\n        return rows\n      }\n\n    // 获取工具臂总时间\n    const getArmTotalTime = (armUsage) => {\n      if (!armUsage || armUsage.length === 0) return '0分钟'\n      \n      // 计算所有完整使用时间段的总时长\n      const totalMinutes = armUsage\n        .filter(usage => usage.startTime && usage.endTime)\n        .reduce((total, usage) => {\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)\n          return total + duration\n        }, 0)\n      \n      return `${totalMinutes}分钟`\n    }\n\n    // 获取报警类型标签类型\n    const getAlarmTypeTag = (type) => {\n      switch (type) {\n        case '错误':\n          return 'danger'\n        case '警告':\n          return 'warning'\n        case '网络':\n          return 'info'\n        default:\n          return 'info'\n      }\n    }\n\n    // 获取报警详情\n    const getAlarmDetails = (surgery) => {\n      if (!surgery || !surgery.alarm_details) return []\n      \n      let details = []\n      \n      if (typeof surgery.alarm_details === 'string') {\n        try {\n          details = JSON.parse(surgery.alarm_details)\n        } catch (error) {\n          console.error('解析alarm_details字符串失败:', error)\n          return []\n        }\n      } else {\n        details = surgery.alarm_details || []\n      }\n      \n      return details\n    }\n\n    // 格式化时间（24小时制）\n    const formatTime = (time) => {\n      if (!time) return '-'\n      const date = new Date(time)\n      const year = date.getFullYear()\n      const month = String(date.getMonth() + 1).padStart(2, '0')\n      const day = String(date.getDate()).padStart(2, '0')\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      const seconds = String(date.getSeconds()).padStart(2, '0')\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n    }\n\n    // 格式化手术时间范围\n    const formatSurgeryTime = (surgery) => {\n      if (!surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return '手术时间未确定'\n      }\n      const start = new Date(surgery.surgery_start_time).toLocaleString()\n      const end = new Date(surgery.surgery_end_time).toLocaleString()\n      return `${start} ~ ${end}`\n    }\n\n    // 格式化短时间（24小时制）\n    const formatTimeShort = (time) => {\n      if (!time) return '-'\n      const date = new Date(time)\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      return `${hours}:${minutes}`\n    }\n\n    // 获取统一的时间轴范围（重新设计：严格使用手术开始到手术结束时间）\n    const getTimelineRange = (surgery) => {\n      if (!surgery) return { start: null, end: null }\n      \n      // 重新设计：严格使用手术开始和结束时间，确保与状态机图表一致\n      const start = surgery.surgery_start_time\n      const end = surgery.surgery_end_time\n      \n      // 确保开始时间早于结束时间\n      if (start && end) {\n        const startTime = new Date(start).getTime()\n        const endTime = new Date(end).getTime()\n        \n        if (startTime >= endTime) {\n          console.warn('时间轴范围异常：开始时间晚于或等于结束时间', {\n            surgery_id: surgery.surgery_id,\n            start: start,\n            end: end,\n            startTime: startTime,\n            endTime: endTime\n          })\n          return { start: null, end: null }\n        }\n      }\n      \n      console.log('时间轴范围 (重新设计):', surgery.surgery_id, {\n        start: start,\n        end: end,\n        duration: start && end ? (new Date(end).getTime() - new Date(start).getTime()) / (1000 * 60) : 'N/A'\n      })\n      \n      return { start, end }\n    }\n\n    // 获取\"手术时间线\"事件范围：起点为第一个事件时间，终点为最后一个事件时间\n    const getEventTimelineRange = (surgery) => {\n      try {\n        const events = getSortedTimelineEvents(surgery)\n        if (!events || events.length === 0) {\n          // 回退到进度条时间轴范围（开机-关机）\n          return getProgressTimelineRange(surgery)\n        }\n        const start = events[0].time\n        const end = events[events.length - 1].time\n        return { start, end }\n      } catch (e) {\n        return getProgressTimelineRange(surgery)\n      }\n    }\n\n    // 获取进度条时间轴范围（使用开机时间和关机时间）\n    const getProgressTimelineRange = (surgery) => {\n      if (!surgery) return { start: null, end: null }\n      \n      // 获取开机时间\n      const powerOnTime = getPowerOnTime(surgery)\n      \n      // 获取关机时间，如果没有则使用手术结束时间\n      const powerOffTime = getPowerOffTime(surgery)\n      const endTime = powerOffTime || surgery.surgery_end_time\n      \n      // 确定时间轴起点：优先使用开机时间，如果没有则使用手术开始时间\n      let start = powerOnTime\n      if (!start && surgery.surgery_start_time) {\n        start = surgery.surgery_start_time\n      }\n      \n      // 确定时间轴终点：优先使用关机时间，如果没有则使用手术结束时间\n      let end = endTime\n      if (!end && surgery.surgery_end_time) {\n        end = surgery.surgery_end_time\n      }\n      \n      // 确保开始时间早于结束时间\n      if (start && end) {\n        const startTime = new Date(start).getTime()\n        const endTime = new Date(end).getTime()\n        \n        if (startTime >= endTime) {\n          console.warn('进度条时间轴范围异常：开始时间晚于或等于结束时间', {\n            surgery_id: surgery.surgery_id,\n            start: start,\n            end: end,\n            startTime: startTime,\n            endTime: endTime\n          })\n          return { start: null, end: null }\n        }\n      }\n      \n      console.log('进度条时间轴范围:', surgery.surgery_id, {\n        start: start,\n        end: end,\n        powerOnTime: powerOnTime,\n        powerOffTime: powerOffTime,\n        surgeryEndTime: surgery.surgery_end_time,\n        duration: start && end ? (new Date(end).getTime() - new Date(start).getTime()) / (1000 * 60) : 'N/A'\n      })\n      \n      return { start, end }\n    }\n\n    // 计算时间在时间轴上的位置百分比（改进版本，支持跨天）\n    const getTimePosition = (time, startTime, endTime) => {\n      if (!time || !startTime || !endTime) return 0\n      \n      try {\n        // 确保时间格式正确\n        const start = new Date(startTime).getTime()\n        const end = new Date(endTime).getTime()\n        const current = new Date(time).getTime()\n        \n        // 检查时间有效性\n        if (isNaN(start) || isNaN(end) || isNaN(current)) {\n          console.warn('时间计算异常：无效的时间值', { time, startTime, endTime })\n          return 0\n        }\n        \n        // 检查时间顺序\n        if (start >= end) {\n          console.warn('时间轴范围异常：开始时间晚于或等于结束时间', { startTime, endTime })\n          return 0\n        }\n        \n        // 计算位置百分比\n        const position = ((current - start) / (end - start)) * 100\n        \n        // 确保位置在有效范围内\n        return Math.max(0, Math.min(100, position))\n      } catch (error) {\n        console.error('时间位置计算失败:', error, { time, startTime, endTime })\n        return 0\n      }\n    }\n\n    // 获取时间轴刻度位置\n    const getTimelineTicks = (startTime, endTime) => {\n      if (!startTime || !endTime) return []\n      const start = new Date(startTime)\n      const end = new Date(endTime)\n      const duration = end.getTime() - start.getTime()\n      \n      // 根据手术时长决定刻度间隔\n      let interval\n      if (duration <= 30 * 60 * 1000) { // 30分钟以内，5分钟间隔\n        interval = 5 * 60 * 1000\n      } else if (duration <= 2 * 60 * 60 * 1000) { // 2小时以内，15分钟间隔\n        interval = 15 * 60 * 1000\n      } else { // 超过2小时，30分钟间隔\n        interval = 30 * 60 * 1000\n      }\n      \n      const ticks = []\n      let current = start.getTime() + interval // 从第一个间隔开始，避免与开始时间重叠\n      while (current < end.getTime()) { // 使用 < 而不是 <=，避免与结束时间重叠\n        const position = getTimePosition(current, startTime, endTime)\n        ticks.push({\n          time: new Date(current),\n          position: position\n        })\n        current += interval\n      }\n      \n      return ticks\n    }\n\n    // 合并重叠的时间段\n    const mergeOverlappingTimeRanges = (usages) => {\n      if (!usages || usages.length === 0) return []\n      \n      // 将使用记录转换为时间范围对象\n      const timeRanges = usages.map(usage => ({\n        startTime: new Date(usage.startTime).getTime(),\n        endTime: new Date(usage.endTime).getTime()\n      }))\n      \n      // 按开始时间排序\n      timeRanges.sort((a, b) => a.startTime - b.startTime)\n      \n      const merged = []\n      let current = timeRanges[0]\n      \n      for (let i = 1; i < timeRanges.length; i++) {\n        const next = timeRanges[i]\n        \n        // 如果当前时间段与下一个时间段重叠或相邻，则合并\n        if (current.endTime >= next.startTime) {\n          current.endTime = Math.max(current.endTime, next.endTime)\n        } else {\n          // 不重叠，添加当前时间段到结果中\n          merged.push(current)\n          current = next\n        }\n      }\n      \n      // 添加最后一个时间段\n      if (current) {\n        merged.push(current)\n      }\n      \n      return merged\n    }\n\n    // 获取工具臂时间线样式（时间对齐）\n    const getArmTimelineStyle = (armUsage, surgery) => {\n      if (!armUsage || armUsage.length === 0 || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 找到所有完整的使用时间段（有开始和结束时间）\n      const completeUsages = armUsage.filter(usage => usage.startTime && usage.endTime)\n      \n      if (completeUsages.length === 0) return { left: '0%', width: '0%' }\n      \n      // 如果有多个器械使用时间段，需要合并重叠的时间段\n      const mergedTimeRanges = mergeOverlappingTimeRanges(completeUsages)\n      \n      if (mergedTimeRanges.length === 0) return { left: '0%', width: '0%' }\n      \n      // 计算所有合并后时间段的总长度\n      let totalWidth = 0\n      const segments = []\n      \n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件）\n      const timelineRange = getEventTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return { left: '0%', width: '0%' }\n      \n      mergedTimeRanges.forEach(range => {\n        const startPosition = getTimePosition(range.startTime, timelineRange.start, timelineRange.end)\n        const endPosition = getTimePosition(range.endTime, timelineRange.start, timelineRange.end)\n        const width = Math.max(0, endPosition - startPosition)\n        \n        segments.push({\n          left: `${startPosition}%`,\n          width: `${width}%`\n        })\n        \n        totalWidth += width\n      })\n      \n      // 如果有多个时间段，返回第一个（主要时间段）\n      // 如果需要显示多个时间段，可以在这里扩展逻辑\n      return segments.length > 0 ? segments[0] : { left: '0%', width: '0%' }\n    }\n\n    // 获取工具臂时间线所有段（用于显示多个时间段）\n    const getArmTimelineSegments = (armUsage, surgery) => {\n      if (!armUsage || armUsage.length === 0 || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return []\n      }\n      \n      // 找到所有完整的使用时间段（有开始和结束时间）\n      const completeUsages = armUsage.filter(usage => usage.startTime && usage.endTime)\n      \n      if (completeUsages.length === 0) return []\n      \n      // 合并重叠的时间段\n      const mergedTimeRanges = mergeOverlappingTimeRanges(completeUsages)\n      \n      if (mergedTimeRanges.length === 0) return []\n      \n      // 计算所有合并后时间段的样式\n      const segments = []\n      \n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件）\n      const timelineRange = getEventTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return []\n      \n      mergedTimeRanges.forEach((range, index) => {\n        const startPosition = getTimePosition(range.startTime, timelineRange.start, timelineRange.end)\n        const endPosition = getTimePosition(range.endTime, timelineRange.start, timelineRange.end)\n        const width = Math.max(0, endPosition - startPosition)\n        \n        if (width > 0) {\n          segments.push({\n            left: `${startPosition}%`,\n            width: `${width}%`\n          })\n        }\n      })\n      \n      return segments\n    }\n\n    // 获取手术时间段在总时间轴上的样式\n    const getSurgeryTimelineStyle = (surgery) => {\n      if (!surgery || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件）\n      const timelineRange = getEventTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 手术进度条：显示手术开始到手术结束的时间段，但基于开机时间到关机时间的时间轴\n      const startPosition = getTimePosition(surgery.surgery_start_time, timelineRange.start, timelineRange.end)\n      const endPosition = getTimePosition(surgery.surgery_end_time, timelineRange.start, timelineRange.end)\n      const width = Math.max(0, endPosition - startPosition)\n      \n      console.log('手术进度条计算:', surgery.surgery_id, {\n        surgeryStartTime: surgery.surgery_start_time,\n        surgeryEndTime: surgery.surgery_end_time,\n        timelineStart: timelineRange.start,\n        timelineEnd: timelineRange.end,\n        startPosition: startPosition.toFixed(2) + '%',\n        endPosition: endPosition.toFixed(2) + '%',\n        width: width.toFixed(2) + '%'\n      })\n      \n      return { \n        left: `${startPosition}%`, \n        width: `${width}%` \n      }\n    }\n\n    // 获取使用时间线样式（时间对齐）\n    const getUsageTimelineStyle = (usage, surgery) => {\n      if (!usage || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 检查是否有完整的时间段信息\n      if (!usage.startTime || !usage.endTime) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 使用\"手术时间线\"事件范围（第一个事件 ~ 最后一个事件），确保与时间线完全对齐\n      const timelineRange = getEventTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      const startTime = new Date(usage.startTime).getTime()\n      const endTime = new Date(usage.endTime).getTime()\n      \n      // 使用与arm-timeline-bar完全相同的时间计算逻辑\n      const startPosition = getTimePosition(startTime, timelineRange.start, timelineRange.end)\n      const endPosition = getTimePosition(endTime, timelineRange.start, timelineRange.end)\n      \n      // 确保进度条宽度不为负数，并且位置在有效范围内\n      const width = Math.max(0, endPosition - startPosition)\n      const left = Math.max(0, Math.min(100 - width, startPosition))\n      \n      return { \n        left: `${left}%`, \n        width: `${width}%` \n      }\n    }\n\n    // 获取能量时间\n    const getEnergyTime = (armUsage) => {\n      if (!armUsage || armUsage.length === 0) return '0分0秒'\n      \n      // 计算所有完整使用时间段的总时长（不再过滤术前安装的器械）\n      const totalSeconds = armUsage\n        .filter(usage => usage.startTime && usage.endTime)\n        .reduce((total, usage) => {\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000)\n          return total + duration\n        }, 0)\n      \n      const minutes = Math.floor(totalSeconds / 60)\n      const seconds = totalSeconds % 60\n      return `${minutes}分${seconds}秒`\n    }\n\n\n\n    // 获取开机时间：支持多个开机时间\n    const getPowerOnTime = (surgery) => {\n      if (!surgery) return null\n      \n      // 如果有开机时间数组，返回第一个（最早的开机时间）\n      if (surgery.power_on_times && surgery.power_on_times.length > 0) {\n        return surgery.power_on_times[0]\n      }\n      \n      // 兼容旧版本：如果有单个开机时间，直接使用\n      if (surgery.power_on_time) {\n        return surgery.power_on_time\n      }\n      \n      // 如果没有开机时间，使用手术开始时间\n      return surgery.surgery_start_time\n    }\n\n    // 获取关机时间：支持多个关机时间\n    const getPowerOffTime = (surgery) => {\n      if (!surgery) return null\n      \n      // 如果有关机时间数组，返回最后一个（最晚的关机时间）\n      if (surgery.shutdown_times && surgery.shutdown_times.length > 0) {\n        return surgery.shutdown_times[surgery.shutdown_times.length - 1]\n      }\n      \n      // 兼容旧版本：如果有单个关机时间，直接使用\n      if (surgery.power_off_time) {\n        return surgery.power_off_time\n      }\n      \n      // 如果没有关机时间，返回null（让调用方决定使用什么作为终点）\n      return null\n    }\n\n    // 获取所有开机时间\n    const getAllPowerOnTimes = (surgery) => {\n      if (!surgery) return []\n      \n      // 如果有开机时间数组，返回所有\n      if (surgery.power_on_times && surgery.power_on_times.length > 0) {\n        return surgery.power_on_times\n      }\n      \n      // 兼容旧版本：如果有单个开机时间，返回数组\n      if (surgery.power_on_time) {\n        return [surgery.power_on_time]\n      }\n      \n      return []\n    }\n\n    // 获取所有关机时间\n    const getAllPowerOffTimes = (surgery) => {\n      if (!surgery) return []\n      \n      // 如果有关机时间数组，返回所有\n      if (surgery.shutdown_times && surgery.shutdown_times.length > 0) {\n        return surgery.shutdown_times\n      }\n      \n      // 兼容旧版本：如果有单个关机时间，返回数组\n      if (surgery.power_off_time) {\n        return [surgery.power_off_time]\n      }\n      \n      return []\n    }\n\n    // 获取按时间排序的所有事件\n    const getSortedTimelineEvents = (surgery) => {\n      if (!surgery) return []\n      \n      const events = []\n      \n      // 添加开机事件 - 支持多个开机时间\n      const powerOnTimes = getAllPowerOnTimes(surgery)\n      \n      // 调试信息：检查连台手术数据\n      if (surgery.is_consecutive_surgery) {\n        console.log('连台手术调试信息:', {\n          surgery_id: surgery.surgery_id,\n          is_consecutive_surgery: surgery.is_consecutive_surgery,\n          previous_surgery_end_time: surgery.previous_surgery_end_time,\n          power_on_times: surgery.power_on_times,\n          powerOnTimes: powerOnTimes\n        })\n      }\n      \n      powerOnTimes.forEach((time, index) => {\n        // 检查是否为连台手术，如果是则显示\"上一场手术结束时间\"\n        let label = '开机'\n        if (surgery.is_consecutive_surgery && index === 0) {\n          label = '上一场手术结束时间'\n        } else if (powerOnTimes.length > 1) {\n          label = `开机 ${index + 1}`\n        }\n        \n        events.push({\n          time: new Date(time),\n          type: 'powerOn',\n          label: label,\n          color: 'green',\n          icon: 'PowerOff'\n        })\n      })\n      \n      // 添加手术开始事件\n      if (surgery.surgery_start_time) {\n        events.push({\n          time: new Date(surgery.surgery_start_time),\n          type: 'surgeryStart',\n          label: '手术开始',\n          color: 'blue',\n          icon: 'VideoPlay'\n        })\n      }\n      \n      // 添加手术结束事件\n      if (surgery.surgery_end_time) {\n        events.push({\n          time: new Date(surgery.surgery_end_time),\n          type: 'surgeryEnd',\n          label: '手术结束',\n          color: 'orange',\n          icon: 'VideoPause'\n        })\n      }\n      \n      // 添加关机事件 - 支持多个关机时间\n      const powerOffTimes = getAllPowerOffTimes(surgery)\n      powerOffTimes.forEach((time, index) => {\n        events.push({\n          time: new Date(time),\n          type: 'powerOff',\n          label: powerOffTimes.length > 1 ? `关机 ${index + 1}` : '关机',\n          color: 'red',\n          icon: 'PowerOff'\n        })\n      })\n      \n      // 按时间排序\n      return events.sort((a, b) => a.time.getTime() - b.time.getTime())\n    }\n\n    // 获取手术状态变化数据\n    const getStateChanges = (surgery) => {\n      if (!surgery) return []\n      \n      // 优先使用后端提供的状态机变化数据\n      let stateMachineChanges = []\n      \n      if (surgery.state_machine_changes) {\n        if (typeof surgery.state_machine_changes === 'string') {\n          try {\n            stateMachineChanges = JSON.parse(surgery.state_machine_changes)\n          } catch (error) {\n            console.error('解析state_machine_changes字符串失败:', error)\n            stateMachineChanges = []\n          }\n        } else {\n          stateMachineChanges = surgery.state_machine_changes || []\n        }\n      }\n      \n      // 调试信息\n      console.log('手术状态机变化数据:', surgery.surgery_id, stateMachineChanges)\n      \n      // 如果没有状态机变化数据，返回空数组\n      if (stateMachineChanges.length === 0) {\n        console.log('没有状态机变化数据')\n        return []\n      }\n      \n      // 将状态机变化数据转换为柱状图数据\n      const stateChanges = []\n      \n      for (let i = 0; i < stateMachineChanges.length; i++) {\n        const currentChange = stateMachineChanges[i]\n        const nextChange = stateMachineChanges[i + 1]\n        \n        const currentState = parseInt(currentChange.state)\n        const startTime = new Date(currentChange.time)\n        const endTime = nextChange ? new Date(nextChange.time) : (surgery.surgery_end_time ? new Date(surgery.surgery_end_time) : new Date())\n        const duration = endTime.getTime() - startTime.getTime()\n        \n        // 调试信息\n        console.log(`状态变化 ${i}: currentState=${currentState}, startTime=${startTime}, endTime=${endTime}, duration=${duration}ms`)\n        \n        // 根据currentState分类 - 新的阶段定义\n        let stateCategory = 'none'\n        \n        // 关机到开机阶段 (currentState <= 0) 不显示柱状图\n        if (currentState <= 0) {\n          stateCategory = 'none'\n        } \n        // currentState < 30 都用浅绿色柱状体表示\n        else if (currentState > 0 && currentState < 30) {\n          stateCategory = 'surgery' // 浅绿色 - 正常阶段\n        } \n        // currentState = 30 且未变化至 currentState >= 10 时都用红色柱状体表示\n        else if (currentState === 30) {\n          // 检查下一个状态是否 >= 10，如果不是则标记为错误\n          const nextState = nextChange ? parseInt(nextChange.state) : null\n          if (nextState === null || nextState < 10) {\n            stateCategory = 'error' // 红色 - 故障阶段\n          } else {\n            stateCategory = 'surgery' // 浅绿色 - 正常阶段\n          }\n        }\n        // currentState > 30 的其他状态不显示柱状图\n        else {\n          stateCategory = 'none'\n        }\n        \n        console.log(`状态分类: currentState=${currentState}, nextState=${nextChange ? nextChange.state : 'null'} -> stateCategory=${stateCategory}`)\n        \n        if (stateCategory !== 'none') {\n          stateChanges.push({\n            state: stateCategory,\n            startTime: startTime,\n            endTime: endTime,\n            duration: duration,\n            originalState: currentState,\n            stateName: currentChange.stateName || `状态${currentState}`\n          })\n        }\n      }\n      \n      console.log('生成的柱状图数据:', stateChanges)\n      return stateChanges\n    }\n\n    // 获取状态名称\n    const getStateName = (state) => {\n      const stateMap = {\n        'surgery': '正常阶段',\n        'error': '故障阶段',\n        'idle': '空闲',\n        'active': '激活',\n        'standby': '待机',\n        'offline': '离线'\n      }\n      return stateMap[state] || state\n    }\n\n    // 计算状态柱状图高度\n    const getStateBarHeight = (state) => {\n      // 根据状态类型设置不同高度\n      const heightMap = {\n        'surgery': 60,     // 正常阶段 60% 高度 (浅绿色)\n        'error': 100       // 故障阶段 100% 高度 (红色)\n      }\n      const height = heightMap[state] || 60;\n      console.log(`柱状图高度: state=${state}, height=${height}px`);\n      return height;\n    }\n\n    // 计算状态柱状图位置\n    const getStateBarPosition = (startTime, surgery) => {\n      if (!startTime || !surgery) return 0\n      \n      const timelineRange = getProgressTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return 0\n      \n      const position = getTimePosition(startTime, timelineRange.start, timelineRange.end)\n      console.log(`柱状图位置计算: startTime=${startTime}, timelineStart=${timelineRange.start}, timelineEnd=${timelineRange.end}, position=${position}%`)\n      \n      // 确保位置在有效范围内\n      const clampedPosition = Math.max(0, Math.min(95, position)) // 留出5%的边距\n      return clampedPosition\n    }\n\n\n\n    // 按UID码分组器械使用\n    const getGroupedUsagesByUdi = (armUsage) => {\n      const grouped = {}\n      armUsage.forEach((usage, index) => {\n        // 不过滤术前安装的器械，详情中需要完整显示\n        \n        // 使用UDI码作为分组键，如果没有UDI则使用器械名称和索引\n        const udi = usage.udi || `${usage.instrumentName}_${index}`\n        if (!grouped[udi]) {\n          grouped[udi] = {\n            instrumentName: usage.instrumentName,\n            usages: []\n          }\n        }\n        grouped[udi].usages.push(usage)\n      })\n      return grouped\n    }\n\n\n\n    // 获取分组器械的总使用时长\n    const getGroupedUsageDuration = (groupedUsage) => {\n      if (!groupedUsage || groupedUsage.usages.length === 0) return '0分钟'\n      \n      const totalDuration = groupedUsage.usages\n        .filter(usage => usage.startTime && usage.endTime)\n        .reduce((total, usage) => {\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)\n          return total + duration\n        }, 0)\n      \n      return `${totalDuration}分钟`\n    }\n\n         // 根据进度条宽度获取合适的显示文本\n     const getSegmentText = (usage, surgery) => {\n       try {\n         // 计算进度条宽度百分比\n         const style = getUsageTimelineStyle(usage, surgery);\n         const width = style.width;\n         const widthPercent = parseFloat(width);\n         \n         // 获取器械名称\n         const instrumentName = usage.instrumentName || '器械';\n         \n         // 计算所需的最小宽度（每个字符约1.5%宽度，加上一些边距）\n         const minWidthPerChar = 1.5;\n         const padding = 2; // 左右边距\n         const requiredWidth = Math.min(instrumentName.length * minWidthPerChar + padding, 20); // 最大20%\n         \n         // 只有当宽度足够显示器械名称时才显示文本\n         if (widthPercent >= requiredWidth) {\n           // 如果宽度足够显示完整名称，直接显示\n           if (widthPercent >= instrumentName.length * minWidthPerChar + padding) {\n             return instrumentName;\n           } else {\n             // 否则截断显示\n             const maxChars = Math.floor((widthPercent - padding) / minWidthPerChar);\n             return instrumentName.substring(0, maxChars) + '...';\n           }\n         } else {\n           // 宽度不足，不显示任何文本\n           return '';\n         }\n       } catch (error) {\n         console.error('计算进度条文本失败:', error);\n         return '';\n       }\n     };\n\n    // 获取时间段对应的器械名称\n    const getSegmentInstrumentName = (segment, armUsage, surgery) => {\n      if (!segment || !armUsage || !surgery) return '未知器械'\n      \n      // 获取进度条时间轴范围\n      const timelineRange = getProgressTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return '未知器械'\n      \n      // 计算时间段的开始和结束时间\n      const startPercent = parseFloat(segment.left)\n      const endPercent = startPercent + parseFloat(segment.width)\n      \n      const startTime = new Date(timelineRange.start).getTime() + (startPercent / 100) * (new Date(timelineRange.end).getTime() - new Date(timelineRange.start).getTime())\n      const endTime = new Date(timelineRange.start).getTime() + (endPercent / 100) * (new Date(timelineRange.end).getTime() - new Date(timelineRange.start).getTime())\n      \n      // 查找在这个时间段内使用的器械\n      const instrumentsInSegment = armUsage.filter(usage => {\n        if (!usage.startTime || !usage.endTime) return false\n        \n        const usageStart = new Date(usage.startTime).getTime()\n        const usageEnd = new Date(usage.endTime).getTime()\n        \n        // 检查是否有重叠\n        return usageStart < endTime && usageEnd > startTime\n      })\n      \n      if (instrumentsInSegment.length === 0) return '无器械使用'\n      \n      // 返回第一个找到的器械名称\n      return instrumentsInSegment[0].instrumentName || '未知器械'\n    }\n\n    \n\n\n    // 标签页点击处理 - 使用防抖和安全的 nextTick\n    const handleTabClick = debounce((tab) => {\n      safeNextTick(() => {\n        activeTab.value = tab.name\n      })\n    }, 50)\n\n    // 标签页切换前的处理 - 使用安全的 nextTick\n    const handleBeforeTabLeave = (newTabName, oldTabName) => {\n      return safeNextTick().then(() => true)\n    }\n\n    // 状态机图表相关方法\n    const resetChartView = () => {\n      // 清理所有图表实例\n      stateMachineCharts.forEach((chart, surgeryId) => {\n        console.log('销毁图表实例:', surgeryId)\n        try {\n          chart.dispose && chart.dispose()\n        } catch (e) {\n          console.warn('图表实例释放失败', surgeryId, e)\n        }\n      })\n      stateMachineCharts.clear()\n      // 清理响应式对象的所有属性\n      Object.keys(surgeryChartStates).forEach(key => {\n        delete surgeryChartStates[key]\n      })\n      surgeryScrollbarStates.clear()\n      chartCurrentTime.value = null\n    }\n\n    // 获取状态机图表数据（全时段，ECharts）\n    const getStateMachineChartData = (surgery) => {\n      if (!surgery) return null\n      let changes = []\n      if (surgery.state_machine_changes) {\n        if (typeof surgery.state_machine_changes === 'string') {\n          try {\n            changes = JSON.parse(surgery.state_machine_changes)\n          } catch (e) {\n            console.error('解析state_machine_changes失败', e)\n            return null\n          }\n        } else {\n          changes = surgery.state_machine_changes || []\n        }\n      }\n\n      // 时间范围：使用时间线事件的最早与最晚时间；若无事件，回退到状态机数据\n      const events = getSortedTimelineEvents(surgery)\n      let xMin = null\n      let xMax = null\n      if (events.length > 0) {\n        xMin = new Date(events[0].time).getTime()\n        xMax = new Date(events[events.length - 1].time).getTime()\n      }\n\n      if (changes.length === 0) {\n        if (!xMin || !xMax) return null\n        return { points: [], rawData: [], xMin, xMax }\n      }\n\n      // 排序并构建阶梯数据点\n      changes.sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime())\n      if (!xMin || !xMax) {\n        xMin = new Date(changes[0].time).getTime()\n        xMax = new Date(changes[changes.length - 1].time).getTime()\n      }\n\n      const positionMap = getStateToYPositionMap()\n\n      // 仅使用与时间线相同范围内的状态机数据，并在边界补点\n      const changesWithin = []\n      let lastBefore = null\n      for (const ch of changes) {\n        const t = new Date(ch.time).getTime()\n        if (t <= xMin) {\n          lastBefore = ch\n        }\n        if (t > xMin && t <= xMax) {\n          changesWithin.push(ch)\n        }\n      }\n\n      const points = []\n      // 起点：xMin 使用边界前最后状态（若无，则用第一个变化的状态）\n      let startState = lastBefore ? lastBefore.state : (changes.length > 0 ? changes[0].state : '0')\n      points.push([xMin, positionMap[parseInt(startState)] ?? parseInt(startState), startState])\n\n      // 区间内变化\n      for (const ch of changesWithin) {\n        const t = new Date(ch.time).getTime()\n        const y = positionMap[parseInt(ch.state)] ?? parseInt(ch.state)\n        points.push([t, y, ch.state])\n      }\n\n      // 终点：xMax 使用区间内最后状态（或起点状态）\n      const lastState = changesWithin.length > 0 ? changesWithin[changesWithin.length - 1].state : startState\n      points.push([xMax, positionMap[parseInt(lastState)] ?? parseInt(lastState), lastState])\n\n      return { points, rawData: changesWithin, xMin, xMax }\n    }\n\n    // 获取状态机图表配置\n    const getStateMachineChartOptions = (surgery) => {\n      const surgeryStartTime = surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : null\n      if (!surgeryStartTime) return {}\n      \n      // 获取当前手术的图表状态\n      let surgeryState = surgeryChartStates[surgery.id]\n      if (!surgeryState) {\n        surgeryState = {\n          currentTime: surgeryStartTime,\n          viewRange: chartViewRange.value\n        }\n        surgeryChartStates[surgery.id] = surgeryState\n      }\n      \n      const startTime = new Date(surgeryState.currentTime.getTime() - (surgeryState.viewRange * 30 * 1000))\n      const endTime = new Date(surgeryState.currentTime.getTime() + (surgeryState.viewRange * 30 * 1000))\n      \n      return {\n        responsive: true,\n        maintainAspectRatio: false,\n        interaction: {\n          mode: 'index',\n          intersect: false,\n        },\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              title: function(context) {\n                const dataIndex = context[0].dataIndex\n                const rawData = context[0].chart.data.rawData\n                if (rawData && rawData[dataIndex]) {\n                  const time = new Date(rawData[dataIndex].time)\n                  // 检查是否跨天，如果是则显示日期\n                  const isCrossDay = startTime.getDate() !== endTime.getDate() || \n                                   startTime.getMonth() !== endTime.getMonth() || \n                                   startTime.getFullYear() !== endTime.getFullYear()\n                  \n                  if (isCrossDay) {\n                    return time.toLocaleDateString('zh-CN') + ' ' + time.toLocaleTimeString('zh-CN')\n                  } else {\n                    return time.toLocaleTimeString('zh-CN')\n                  }\n                }\n                return context[0].label\n              },\n              label: function(context) {\n                const dataIndex = context.dataIndex\n                const rawData = context.chart.data.rawData\n                if (rawData && rawData[dataIndex]) {\n                  const originalState = parseInt(rawData[dataIndex].state)\n                  const stateName = getStateMachineStateName(originalState.toString())\n                  return `状态: ${originalState} (${stateName})`\n                }\n                return `状态: ${context.parsed.y}`\n              }\n            }\n          }\n        },\n        scales: {\n                     x: {\n             title: {\n               display: true,\n               text: '时间'\n             },\n             ticks: {\n               maxTicksLimit: 10,\n               callback: function(value, index, ticks) {\n                 const rawData = this.chart.data.rawData\n                 if (rawData && rawData[index]) {\n                   const time = new Date(rawData[index].time)\n                   // 检查是否跨天\n                   const isCrossDay = startTime.getDate() !== endTime.getDate() || \n                                    startTime.getMonth() !== endTime.getMonth() || \n                                    startTime.getFullYear() !== endTime.getFullYear()\n                   \n                   if (isCrossDay) {\n                     return time.toLocaleDateString('zh-CN', { month: '2-digit', day: '2-digit' }) + ' ' + \n                            time.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })\n                   } else {\n                     return time.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })\n                   }\n                 }\n                 return value\n               }\n             },\n             // 移除afterBuildTicks函数，使用更简单的回调方式\n             // afterBuildTicks在Chart.js 4.x中可能有问题，改用callback方式\n           },\n          y: {\n            beginAtZero: true,\n            min: 0,\n            max: 30, // 调整为映射后的最大值\n            title: {\n              display: true,\n              text: '状态机状态'\n            },\n            // 简化Y轴配置，避免afterBuildTicks问题\n            ticks: {\n              stepSize: 1,\n              maxTicksLimit: 15\n            }\n          }\n        },\n        animation: {\n          duration: 300\n        }\n      }\n    }\n\n    // 更新状态机图表 - 确保所有组件同步\n    const updateStateMachineChart = (surgery) => {\n      if (!surgery) return\n      const container = document.getElementById(`stateMachineChart_${surgery.id}`)\n      if (!container) {\n        setTimeout(() => updateStateMachineChart(surgery), 50)\n        return\n      }\n\n      const data = getStateMachineChartData(surgery)\n      // 清理旧实例\n      const existing = stateMachineCharts.get(surgery.id)\n      if (existing) {\n        try { existing.dispose && existing.dispose() } catch (_) {}\n        stateMachineCharts.delete(surgery.id)\n      }\n\n      if (!data) {\n        container.innerHTML = '<div style=\"display:flex;align-items:center;justify-content:center;height:100%;color:#909399;\">暂无状态机数据</div>'\n        return\n      }\n\n      const chart = echarts.init(container)\n      stateMachineCharts.set(surgery.id, chart)\n\n      const positionMap = getStateToYPositionMap()\n      const reverseMap = {}\n      Object.keys(positionMap).forEach(k => { reverseMap[positionMap[k]] = k })\n\n      const fiveMinutesMs = 5 * 60 * 1000\n      const initialEnd = Math.min(data.xMin + fiveMinutesMs, data.xMax)\n\n      chart.setOption({\n        grid: { left: 60, right: 20, top: 70, bottom: 80, containLabel: true },\n        toolbox: {\n          right: 10,\n          top: 10,\n          feature: {\n            dataZoom: { yAxisIndex: 'none' },\n            restore: {},\n            saveAsImage: {}\n          }\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: { type: 'line' },\n          formatter: (params) => {\n            if (!params || !params[0]) return ''\n            const p = params[0]\n            const t = new Date(p.value[0])\n            const yMapped = p.value[1]\n            const originalState = p.value[2] ?? reverseMap[yMapped] ?? yMapped\n            const stateName = getStateMachineStateName(String(originalState))\n            return `${t.toLocaleString('zh-CN')}<br/>状态: ${originalState}（${stateName}）`\n          }\n        },\n        dataZoom: [\n          {\n            type: 'inside',\n            xAxisIndex: 0,\n            filterMode: 'none',\n            zoomOnMouseWheel: true,\n            moveOnMouseWheel: true,\n            moveOnMouseMove: true,\n            startValue: data.xMin,\n            endValue: initialEnd\n          },\n          {\n            type: 'slider',\n            xAxisIndex: 0,\n            filterMode: 'none',\n            height: 40,\n            bottom: 20,\n            showDataShadow: true,\n            brushSelect: true,\n            startValue: data.xMin,\n            endValue: initialEnd\n          }\n        ],\n        xAxis: {\n          type: 'time',\n          min: data.xMin,\n          max: data.xMax,\n          axisLabel: { formatter: (value) => new Date(value).toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit', second: '2-digit' }) }\n        },\n        yAxis: {\n          type: 'value',\n          min: 0,\n          max: 65,\n          axisLabel: {\n            formatter: (val) => {\n              const original = reverseMap[val]\n              return original ? String(original) : ''\n            }\n          },\n          axisTick: { show: false },\n          splitNumber: 8\n        },\n        series: [{\n          type: 'line',\n          step: 'end',\n          showSymbol: false,\n          lineStyle: { width: 2, color: '#409EFF' },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n              { offset: 0, color: 'rgba(64,158,255,0.25)' },\n              { offset: 1, color: 'rgba(64,158,255,0.05)' }\n            ])\n          },\n          data: data.points\n        }]\n      })\n    }\n\n    // 获取状态机状态名称\n    const getStateMachineStateName = (state) => {\n      const stateMap = {\n        \"0\": \"初始化（S00）\",\n        \"1\": \"使能（S01）\",\n        \"2\": \"自检（S02）\",\n        \"10\": \"待机（S10）\",\n        \"12\": \"从手调整（S12）\",\n        \"13\": \"主手跟随（S13）\",\n        \"14\": \"断开主从/离合（S14）\",\n        \"15\": \"初始化（S00）\",\n        \"20\": \"主从控制（S20）\",\n        \"21\": \"内窥镜控制（S21）\",\n        \"30\": \"错误（S30）\",\n        \"31\": \"关机（S31）\"\n      }\n      return stateMap[state] || `状态${state}`\n    }\n\n    // 图表滚动功能已移除，现在只使用滚动条控制\n    \n    // 使用智能间隔模式\n\n    // 滚动条相关功能\n    const surgeryScrollbarStates = new Map() // 为每个手术存储滚动条状态\n    const surgeryChartStates = reactive({}) // 为每个手术存储图表状态（响应式）\n    const scrollbarUpdateTrigger = ref(0) // 用于触发滚动条重新渲染\n\n    // 获取滚动条滑块样式 - 重新设计：滚动条范围从手术开始到手术结束\n    const getScrollbarThumbStyle = (surgery, updateTrigger) => {\n      if (!surgery || !surgery.state_machine_changes) return {}\n      \n      // 重新设计：滚动条的总范围就是手术开始到手术结束\n      const totalStartTime = new Date(surgery.surgery_start_time)\n      const totalEndTime = new Date(surgery.surgery_end_time)\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n      \n      if (totalDuration <= 0) return {}\n      \n      // 获取图表数据 - 使用与图表完全相同的时间计算逻辑\n      const chartData = getStateMachineChartData(surgery)\n      let viewStartTime, viewEndTime\n      \n      if (chartData && chartData.startTime && chartData.endTime) {\n        // 使用图表实际的时间范围，确保完全同步\n        viewStartTime = new Date(chartData.startTime)\n        viewEndTime = new Date(chartData.endTime)\n      } else {\n        // 如果没有图表数据，使用与图表相同的计算逻辑\n        let surgeryState = surgeryChartStates[surgery.id]\n        if (!surgeryState) {\n          surgeryState = {\n            currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n            viewRange: chartViewRange.value\n          }\n          surgeryChartStates[surgery.id] = surgeryState\n        }\n        \n        // 使用与图表完全相同的视图窗口计算\n        const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n        let viewCenterTime = surgeryState.currentTime\n        \n        // 重新设计：确保视图中心时间在手术时间范围内\n          const minCenterTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\n          const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\n          \n        // 如果总时间范围小于视图窗口，允许在整个范围内移动\n        if (totalDuration <= viewWindowDuration) {\n          // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\n          const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), viewCenterTime.getTime())))\n          viewCenterTime = clampedTime\n        } else {\n          // 正常的时间范围限制\n          if (viewCenterTime.getTime() < minCenterTime.getTime()) {\n            viewCenterTime = minCenterTime\n          } else if (viewCenterTime.getTime() > maxCenterTime.getTime()) {\n            viewCenterTime = maxCenterTime\n          }\n        }\n        \n        // 计算视图的开始和结束时间\n        viewStartTime = new Date(viewCenterTime.getTime() - viewWindowDuration / 2)\n        viewEndTime = new Date(viewCenterTime.getTime() + viewWindowDuration / 2)\n        \n        // 确保视图范围不超出手术总时间范围\n        if (viewStartTime.getTime() < totalStartTime.getTime()) {\n          viewStartTime = totalStartTime\n          viewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\n        }\n        \n        if (viewEndTime.getTime() > totalEndTime.getTime()) {\n          viewEndTime = totalEndTime\n          viewStartTime = new Date(totalEndTime.getTime() - viewWindowDuration)\n          \n          // 确保调整后的开始时间不早于手术开始时间\n          if (viewStartTime.getTime() < totalStartTime.getTime()) {\n            viewStartTime = totalStartTime\n            viewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\n          }\n        }\n      }\n      \n      const viewDuration = viewEndTime.getTime() - viewStartTime.getTime()\n      \n      // 计算滑块位置和宽度 - 基于手术开始到手术结束的总范围\n      const thumbPosition = ((viewStartTime.getTime() - totalStartTime.getTime()) / totalDuration) * 100\n      const thumbWidth = (viewDuration / totalDuration) * 100\n      \n      // 确保滑块位置和宽度在有效范围内\n      const clampedPosition = Math.max(0, Math.min(100 - thumbWidth, thumbPosition))\n      const clampedWidth = Math.max(5, Math.min(100, thumbWidth))\n      \n      console.log('滚动条计算 (重新设计):', {\n        surgeryId: surgery.surgery_id,\n        totalStartTime: totalStartTime.toISOString(),\n        totalEndTime: totalEndTime.toISOString(),\n        totalDuration: totalDuration / (1000 * 60),\n        viewStartTime: viewStartTime.toISOString(),\n        viewEndTime: viewEndTime.toISOString(),\n        viewDuration: viewDuration / (1000 * 60),\n        thumbPosition: thumbPosition.toFixed(2),\n        thumbWidth: thumbWidth.toFixed(2),\n        clampedPosition: clampedPosition.toFixed(2),\n        clampedWidth: clampedWidth.toFixed(2),\n        isAtEnd: viewEndTime.getTime() === totalEndTime.getTime(),\n        isAtStart: viewStartTime.getTime() === totalStartTime.getTime()\n      })\n      \n      return {\n        left: `${clampedPosition}%`,\n        width: `${clampedWidth}%`\n      }\n    }\n\n         // 处理滚动条轨道点击 - 重新设计：基于手术开始到手术结束的范围\n     const handleTrackClick = (event, surgery) => {\n       if (!surgery) return\n       \n       const track = event.currentTarget\n       const rect = track.getBoundingClientRect()\n       const clickX = event.clientX - rect.left\n       const trackWidth = rect.width\n       \n       // 计算点击位置占总宽度的百分比\n       const clickPercentage = clickX / trackWidth\n       \n       // 重新设计：计算总时间范围从手术开始到手术结束\n       const totalStartTime = new Date(surgery.surgery_start_time)\n       const totalEndTime = new Date(surgery.surgery_end_time)\n       const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n       \n       // 计算目标时间（考虑5分钟窗口的中心）\n       const targetTime = new Date(totalStartTime.getTime() + (clickPercentage * totalDuration))\n       \n       // 使用与图表完全相同的视图窗口计算\n       const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n       const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\n       const maxTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\n       \n       // 更新当前手术的图表状态\n       let surgeryState = surgeryChartStates[surgery.id]\n       if (!surgeryState) {\n         surgeryState = {\n           currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n           viewRange: chartViewRange.value\n         }\n         surgeryChartStates[surgery.id] = surgeryState\n       }\n       \n       // 重新设计：如果总时间范围小于视图窗口，允许在整个范围内移动\n       if (totalDuration <= viewWindowDuration) {\n         // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\n         const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), targetTime.getTime())))\n         surgeryState.currentTime = clampedTime\n       } else {\n         // 正常的时间范围限制\n         if (targetTime.getTime() < minTime.getTime()) {\n           surgeryState.currentTime = minTime\n         } else if (targetTime.getTime() > maxTime.getTime()) {\n           surgeryState.currentTime = maxTime\n         } else {\n           surgeryState.currentTime = targetTime\n         }\n       }\n       \n       console.log('滚动条点击 (重新设计):', {\n         surgeryId: surgery.surgery_id,\n         clickPercentage: clickPercentage.toFixed(2),\n         targetTime: targetTime.toISOString(),\n         newCurrentTime: surgeryState.currentTime.toISOString(),\n         totalStartTime: totalStartTime.toISOString(),\n         totalEndTime: totalEndTime.toISOString(),\n         totalDuration: totalDuration / (1000 * 60)\n       })\n       \n       // 触发滚动条重新渲染\n       scrollbarUpdateTrigger.value++\n       updateStateMachineChart(surgery)\n     }\n\n     // 开始滚动条拖拽\n     const startScrollbarDrag = (event, surgery) => {\n       if (!surgery) return\n       \n       event.preventDefault()\n       event.stopPropagation() // 防止触发轨道点击事件\n       \n       // 获取或创建当前手术的滚动条状态\n       let scrollbarState = surgeryScrollbarStates.get(surgery.id)\n       if (!scrollbarState) {\n         scrollbarState = {\n           isDragging: false,\n           dragStartX: 0,\n           dragStartTime: null\n         }\n         surgeryScrollbarStates.set(surgery.id, scrollbarState)\n       }\n       \n       scrollbarState.isDragging = true\n       scrollbarState.dragStartX = event.clientX\n       \n       // 获取当前手术的图表状态\n       let surgeryState = surgeryChartStates[surgery.id]\n       if (!surgeryState) {\n         surgeryState = {\n           currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n           viewRange: chartViewRange.value\n         }\n         surgeryChartStates[surgery.id] = surgeryState\n       }\n       scrollbarState.dragStartTime = surgeryState.currentTime ? new Date(surgeryState.currentTime) : null\n       \n       // 添加全局事件监听\n       document.addEventListener('mousemove', (e) => handleScrollbarDrag(e, surgery))\n       document.addEventListener('mouseup', () => stopScrollbarDrag(surgery))\n     }\n\n     // 处理滚动条拖拽 - 重新设计：基于手术开始到手术结束的范围\n     const handleScrollbarDrag = (event, surgery) => {\n       // 获取当前手术的滚动条状态\n       let scrollbarState = surgeryScrollbarStates.get(surgery.id)\n       if (!scrollbarState || !scrollbarState.isDragging || !scrollbarState.dragStartTime) return\n       \n       const deltaX = event.clientX - scrollbarState.dragStartX\n       \n       // 查找当前手术的滚动条轨道\n       // 通过手术ID查找对应的滚动条容器\n       const scrollbarContainer = document.querySelector(`[data-surgery-id=\"${surgery.id}\"] .chart-scrollbar-container`)\n       const scrollbarTrack = scrollbarContainer?.querySelector('.scrollbar-track')\n       if (!scrollbarTrack) {\n         console.warn('找不到滚动条轨道:', surgery.id)\n         return\n       }\n       \n       const trackWidth = scrollbarTrack.offsetWidth\n       // 重新设计：计算总时间范围从手术开始到手术结束\n       const totalStartTime = new Date(surgery.surgery_start_time)\n       const totalEndTime = new Date(surgery.surgery_end_time)\n       const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n       \n       // 计算拖拽对应的总时间变化\n       const dragTimeChange = (deltaX / trackWidth) * totalDuration\n       \n       // 计算新的中心时间\n       const newCenterTime = new Date(scrollbarState.dragStartTime.getTime() + dragTimeChange)\n       \n       // 使用与图表完全相同的视图窗口计算\n       const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n       const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\n       const maxTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\n       \n       // 更新当前手术的图表状态\n       let surgeryState = surgeryChartStates[surgery.id]\n       if (!surgeryState) {\n         surgeryState = {\n           currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n           viewRange: chartViewRange.value\n         }\n         surgeryChartStates[surgery.id] = surgeryState\n       }\n       \n       // 重新设计：如果总时间范围小于视图窗口，允许在整个范围内移动\n       if (totalDuration <= viewWindowDuration) {\n         // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\n         const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), newCenterTime.getTime())))\n         surgeryState.currentTime = clampedTime\n       } else {\n         // 正常的时间范围限制\n         if (newCenterTime.getTime() < minTime.getTime()) {\n           surgeryState.currentTime = minTime\n         } else if (newCenterTime.getTime() > maxTime.getTime()) {\n           surgeryState.currentTime = maxTime\n         } else {\n           surgeryState.currentTime = newCenterTime\n         }\n       }\n       \n       console.log('滚动条拖拽 (重新设计):', {\n         surgeryId: surgery.surgery_id,\n         deltaX: deltaX.toFixed(2),\n         dragTimeChange: dragTimeChange / (1000 * 60),\n         newCenterTime: newCenterTime.toISOString(),\n         newCurrentTime: surgeryState.currentTime.toISOString(),\n         totalStartTime: totalStartTime.toISOString(),\n         totalEndTime: totalEndTime.toISOString(),\n         totalDuration: totalDuration / (1000 * 60)\n       })\n       \n       // 触发滚动条重新渲染\n       scrollbarUpdateTrigger.value++\n       updateStateMachineChart(surgery)\n     }\n\n    // 停止滚动条拖拽\n    const stopScrollbarDrag = (surgery) => {\n      if (!surgery) return\n      \n      // 获取当前手术的滚动条状态\n      let scrollbarState = surgeryScrollbarStates.get(surgery.id)\n      if (scrollbarState) {\n        scrollbarState.isDragging = false\n        scrollbarState.dragStartX = 0\n        scrollbarState.dragStartTime = null\n      }\n      \n      // 移除全局事件监听\n      document.removeEventListener('mousemove', (e) => handleScrollbarDrag(e, surgery))\n      document.removeEventListener('mouseup', () => stopScrollbarDrag(surgery))\n    }\n\n    // 向左滚动图表 - 重新设计：基于手术开始到手术结束的范围\n    const scrollChartLeft = (surgery) => {\n      if (!surgery) return\n      \n      let surgeryState = surgeryChartStates[surgery.id]\n      if (!surgeryState) {\n        surgeryState = {\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n          viewRange: chartViewRange.value\n        }\n        surgeryChartStates[surgery.id] = surgeryState\n      }\n      \n      const scrollStep = 60 * 1000 // 1分钟\n      const newCurrentTime = new Date(surgeryState.currentTime.getTime() - scrollStep)\n      \n      // 重新设计：使用与图表完全相同的边界检查逻辑\n      const totalStartTime = new Date(surgery.surgery_start_time)\n      const totalEndTime = new Date(surgery.surgery_end_time)\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n      \n      // 重新设计：如果总时间范围小于等于视图窗口，允许在整个范围内移动\n      if (totalDuration <= viewWindowDuration) {\n        const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), newCurrentTime.getTime())))\n        surgeryState.currentTime = clampedTime\n      } else {\n        // 正常的时间范围限制\n        const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\n        \n        // 确保不超出左边界\n        if (newCurrentTime.getTime() >= minTime.getTime()) {\n          surgeryState.currentTime = newCurrentTime\n        } else {\n          surgeryState.currentTime = minTime\n        }\n      }\n      \n      console.log('向左滚动 (重新设计):', {\n        surgeryId: surgery.surgery_id,\n        oldTime: surgeryState.currentTime.toISOString(),\n        newTime: newCurrentTime.toISOString(),\n        totalStartTime: totalStartTime.toISOString(),\n        totalEndTime: totalEndTime.toISOString(),\n        totalDuration: totalDuration / (1000 * 60)\n      })\n      \n      // 触发滚动条重新渲染\n      scrollbarUpdateTrigger.value++\n      updateStateMachineChart(surgery)\n    }\n\n    // 向右滚动图表 - 重新设计：基于手术开始到手术结束的范围\n    const scrollChartRight = (surgery) => {\n      if (!surgery) return\n      \n      let surgeryState = surgeryChartStates[surgery.id]\n      if (!surgeryState) {\n        surgeryState = {\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n          viewRange: chartViewRange.value\n        }\n        surgeryChartStates[surgery.id] = surgeryState\n      }\n      \n      const scrollStep = 60 * 1000 // 1分钟\n      const newCurrentTime = new Date(surgeryState.currentTime.getTime() + scrollStep)\n      \n      // 重新设计：使用与图表完全相同的边界检查逻辑\n      const totalStartTime = new Date(surgery.surgery_start_time)\n      const totalEndTime = new Date(surgery.surgery_end_time)\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n      \n      // 重新设计：如果总时间范围小于等于视图窗口，允许在整个范围内移动\n      if (totalDuration <= viewWindowDuration) {\n        const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), newCurrentTime.getTime())))\n        surgeryState.currentTime = clampedTime\n        \n        console.log('向右滚动 (短手术 - 重新设计):', {\n          surgeryId: surgery.surgery_id,\n          oldTime: surgeryState.currentTime.toISOString(),\n          newTime: newCurrentTime.toISOString(),\n          clampedTime: clampedTime.toISOString(),\n          totalStartTime: totalStartTime.toISOString(),\n          totalEndTime: totalEndTime.toISOString(),\n          totalDuration: totalDuration / (1000 * 60)\n        })\n      } else {\n        // 正常的时间范围限制\n        const maxTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\n        \n        // 确保不超出右边界\n        if (newCurrentTime.getTime() <= maxTime.getTime()) {\n          surgeryState.currentTime = newCurrentTime\n        } else {\n          surgeryState.currentTime = maxTime\n        }\n        \n        console.log('向右滚动 (长手术 - 重新设计):', {\n          surgeryId: surgery.surgery_id,\n          oldTime: surgeryState.currentTime.toISOString(),\n          newTime: newCurrentTime.toISOString(),\n          maxTime: maxTime.toISOString(),\n          totalStartTime: totalStartTime.toISOString(),\n          totalEndTime: totalEndTime.toISOString(),\n          totalDuration: totalDuration / (1000 * 60)\n        })\n      }\n      \n      // 触发滚动条重新渲染\n      scrollbarUpdateTrigger.value++\n      updateStateMachineChart(surgery)\n    }\n\n    // 检查是否可以向左滚动 - 重新设计：基于手术开始到手术结束的范围\n    const canScrollLeft = (surgery) => {\n      if (!surgery) return false\n      \n      let surgeryState = surgeryChartStates[surgery.id]\n      if (!surgeryState) {\n        surgeryState = {\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n          viewRange: chartViewRange.value\n        }\n        surgeryChartStates[surgery.id] = surgeryState\n      }\n      \n      // 重新设计：使用与图表完全相同的边界检查逻辑\n      const totalStartTime = new Date(surgery.surgery_start_time)\n      const totalEndTime = new Date(surgery.surgery_end_time)\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n      \n      // 重新设计：如果总时间范围小于等于视图窗口，无法滚动\n      if (totalDuration <= viewWindowDuration) {\n        return false\n      }\n      \n      const minTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\n      \n      return surgeryState.currentTime.getTime() > minTime.getTime()\n    }\n\n    // 检查是否可以向右滚动 - 重新设计：基于手术开始到手术结束的范围\n    const canScrollRight = (surgery) => {\n      if (!surgery) return false\n      \n      let surgeryState = surgeryChartStates[surgery.id]\n      if (!surgeryState) {\n        surgeryState = {\n          currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n          viewRange: chartViewRange.value\n        }\n        surgeryChartStates[surgery.id] = surgeryState\n      }\n      \n      // 重新设计：使用与图表完全相同的边界检查逻辑\n      const totalStartTime = new Date(surgery.surgery_start_time)\n      const totalEndTime = new Date(surgery.surgery_end_time)\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n      \n      // 重新设计：如果总时间范围小于等于视图窗口，无法滚动\n      if (totalDuration <= viewWindowDuration) {\n        return false // 无法滚动，因为已经显示全部\n      }\n      \n      // 计算最大中心时间：当视图中心时间到达这个时间时，视图的结束时间正好是手术结束时间\n      const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\n      \n      console.log('向右滚动检查 (重新设计):', {\n        surgeryId: surgery.surgery_id,\n        currentTime: surgeryState.currentTime.toISOString(),\n        maxCenterTime: maxCenterTime.toISOString(),\n        totalStartTime: totalStartTime.toISOString(),\n        totalEndTime: totalEndTime.toISOString(),\n        totalDuration: totalDuration / (1000 * 60),\n        viewWindowDuration: (viewWindowDuration / (1000 * 60)).toFixed(1) + '分钟',\n        canScroll: surgeryState.currentTime.getTime() < maxCenterTime.getTime()\n      })\n      \n      return surgeryState.currentTime.getTime() < maxCenterTime.getTime()\n    }\n\n    // 检查所有组件的同步状态\n    const checkSynchronization = (surgery) => {\n      if (!surgery) return\n      \n      const chartData = getStateMachineChartData(surgery)\n      const scrollbarStyle = getScrollbarThumbStyle(surgery, scrollbarUpdateTrigger.value)\n      const scrollbarInfo = getScrollbarInfo(surgery, scrollbarUpdateTrigger.value)\n      \n      // 重新设计：计算总时间范围和视图窗口\n      const totalStartTime = new Date(surgery.surgery_start_time)\n      const totalEndTime = new Date(surgery.surgery_end_time)\n      const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n      const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n      \n      // 计算边界时间用于调试\n      const minCenterTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\n      const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\n      \n      console.log('同步状态检查 (重新设计):', {\n        surgeryId: surgery.surgery_id,\n        totalStartTime: totalStartTime.toISOString(),\n        totalEndTime: totalEndTime.toISOString(),\n        totalDuration: (totalDuration / (1000 * 60)).toFixed(1) + '分钟',\n        viewWindowDuration: (viewWindowDuration / (1000 * 60)).toFixed(1) + '分钟',\n        isShortSurgery: totalDuration <= viewWindowDuration,\n        minCenterTime: minCenterTime.toISOString(),\n        maxCenterTime: maxCenterTime.toISOString(),\n        chartDataExists: !!chartData,\n        chartLabels: chartData?.labels?.length || 0,\n        chartDataPoints: chartData?.data?.length || 0,\n        chartStartTime: chartData?.startTime?.toISOString() || 'N/A',\n        chartEndTime: chartData?.endTime?.toISOString() || 'N/A',\n        scrollbarLeft: scrollbarStyle.left,\n        scrollbarWidth: scrollbarStyle.width,\n        scrollbarInfo: scrollbarInfo,\n        canScrollLeft: canScrollLeft(surgery),\n        canScrollRight: canScrollRight(surgery),\n        // 添加调试信息\n        surgeryStartTime: surgery.surgery_start_time,\n        surgeryEndTime: surgery.surgery_end_time,\n        timelineRange: getTimelineRange(surgery),\n        powerOnTime: getPowerOnTime(surgery),\n        powerOffTime: getPowerOffTime(surgery)\n      })\n    }\n\n    // 获取滚动条信息 - 重新设计：基于手术开始到手术结束的范围\n    const getScrollbarInfo = (surgery, updateTrigger) => {\n      if (!surgery) return ''\n      \n      // 获取图表实际的时间范围\n      const chartData = getStateMachineChartData(surgery)\n      if (!chartData || !chartData.startTime || !chartData.endTime) {\n        // 如果没有图表数据，使用与图表相同的计算逻辑\n        let surgeryState = surgeryChartStates[surgery.id]\n        if (!surgeryState) {\n          surgeryState = {\n            currentTime: surgery.surgery_start_time ? new Date(surgery.surgery_start_time) : new Date(),\n            viewRange: chartViewRange.value\n          }\n          surgeryChartStates[surgery.id] = surgeryState\n        }\n        \n        // 重新设计：使用与图表完全相同的视图窗口计算\n        const totalStartTime = new Date(surgery.surgery_start_time)\n        const totalEndTime = new Date(surgery.surgery_end_time)\n        const totalDuration = totalEndTime.getTime() - totalStartTime.getTime()\n        const viewWindowDuration = chartViewRange.value * 60 * 1000 // 5分钟\n        let viewCenterTime = surgeryState.currentTime\n        \n        // 重新设计：确保视图中心时间在手术时间范围内\n          const minCenterTime = new Date(totalStartTime.getTime() + viewWindowDuration / 2)\n          const maxCenterTime = new Date(totalEndTime.getTime() - viewWindowDuration / 2)\n          \n        // 如果总时间范围小于视图窗口，允许在整个范围内移动\n        if (totalDuration <= viewWindowDuration) {\n          // 总时间范围太小，允许在整个范围内移动，但确保不超出边界\n          const clampedTime = new Date(Math.max(totalStartTime.getTime(), Math.min(totalEndTime.getTime(), viewCenterTime.getTime())))\n          viewCenterTime = clampedTime\n        } else {\n          // 正常的时间范围限制\n          if (viewCenterTime.getTime() < minCenterTime.getTime()) {\n            viewCenterTime = minCenterTime\n          } else if (viewCenterTime.getTime() > maxCenterTime.getTime()) {\n            viewCenterTime = maxCenterTime\n          }\n        }\n        \n        // 计算视图的开始和结束时间\n        const viewStartTime = new Date(viewCenterTime.getTime() - viewWindowDuration / 2)\n        const viewEndTime = new Date(viewCenterTime.getTime() + viewWindowDuration / 2)\n        \n        // 确保视图范围不超出手术总时间范围\n        let finalViewStartTime = viewStartTime\n        let finalViewEndTime = viewEndTime\n        \n        if (finalViewStartTime.getTime() < totalStartTime.getTime()) {\n          finalViewStartTime = totalStartTime\n          finalViewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\n        }\n        \n        if (finalViewEndTime.getTime() > totalEndTime.getTime()) {\n          finalViewEndTime = totalEndTime\n          finalViewStartTime = new Date(totalEndTime.getTime() - viewWindowDuration)\n          \n          // 确保调整后的开始时间不早于手术开始时间\n          if (finalViewStartTime.getTime() < totalStartTime.getTime()) {\n            finalViewStartTime = totalStartTime\n            finalViewEndTime = new Date(totalStartTime.getTime() + viewWindowDuration)\n          }\n        }\n        \n        const startTimeStr = finalViewStartTime.toLocaleTimeString('zh-CN', { \n          hour: '2-digit', \n          minute: '2-digit' \n        })\n        const endTimeStr = finalViewEndTime.toLocaleTimeString('zh-CN', { \n          hour: '2-digit', \n          minute: '2-digit' \n        })\n        \n        const durationMinutes = (finalViewEndTime.getTime() - finalViewStartTime.getTime()) / (1000 * 60)\n        \n        return `${startTimeStr} - ${endTimeStr} (${durationMinutes.toFixed(1)}分钟)`\n      }\n      \n      // 使用图表实际的时间范围\n      const actualStartTime = new Date(chartData.startTime)\n      const actualEndTime = new Date(chartData.endTime)\n      \n      const startTimeStr = actualStartTime.toLocaleTimeString('zh-CN', { \n        hour: '2-digit', \n        minute: '2-digit' \n      })\n      const endTimeStr = actualEndTime.toLocaleTimeString('zh-CN', { \n        hour: '2-digit', \n        minute: '2-digit' \n      })\n      \n      // 计算实际的时间范围（分钟）\n      const actualDurationMinutes = (actualEndTime.getTime() - actualStartTime.getTime()) / (1000 * 60)\n      \n      console.log('滚动条时间范围 (重新设计):', surgery.surgery_id, {\n        startTime: actualStartTime.toISOString(),\n        endTime: actualEndTime.toISOString(),\n        duration: actualDurationMinutes.toFixed(1) + '分钟',\n        totalStartTime: new Date(surgery.surgery_start_time).toISOString(),\n        totalEndTime: new Date(surgery.surgery_end_time).toISOString()\n      })\n      \n      return `${startTimeStr} - ${endTimeStr} (${actualDurationMinutes.toFixed(1)}分钟)`\n    }\n\n\n\n    // 监听手术数据变化，自动更新图表\n    watch(surgeries, (newSurgeries) => {\n      if (newSurgeries.length > 0 && activeTab.value) {\n        const currentSurgery = newSurgeries.find(s => s.id.toString() === activeTab.value)\n        if (currentSurgery) {\n          // 延迟更新图表，确保DOM已渲染\n          nextTick(() => {\n            // 检查canvas元素是否存在\n            const canvasId = `stateMachineChart_${currentSurgery.id}`\n            const canvas = document.getElementById(canvasId)\n            if (canvas) {\n            updateStateMachineChart(currentSurgery)\n            } else {\n              console.warn('Canvas元素不存在，等待DOM渲染:', canvasId)\n              // 如果canvas不存在，再等待一下\n              setTimeout(() => {\n                updateStateMachineChart(currentSurgery)\n              }, 100)\n            }\n          })\n        }\n      }\n    }, { deep: true })\n\n    // 监听活动标签页变化，更新图表\n    watch(activeTab, (newTab) => {\n      if (newTab && surgeries.value.length > 0) {\n        const currentSurgery = surgeries.value.find(s => s.id.toString() === newTab)\n        if (currentSurgery) {\n          // 延迟更新图表，确保DOM已渲染\n          nextTick(() => {\n            // 再次检查canvas元素是否存在\n            const canvasId = `stateMachineChart_${currentSurgery.id}`\n            const canvas = document.getElementById(canvasId)\n            if (canvas) {\n              console.log('切换到手术标签页:', currentSurgery.surgery_id)\n              \n              // 添加调试信息，特别关注第四场手术\n              if (currentSurgery.surgery_id === '4371-17') {\n                console.log('=== 第四场手术调试信息 ===')\n                console.log('手术开始时间:', currentSurgery.surgery_start_time)\n                console.log('手术结束时间:', currentSurgery.surgery_end_time)\n                console.log('时间轴范围:', getTimelineRange(currentSurgery))\n                console.log('开机时间:', getPowerOnTime(currentSurgery))\n                console.log('关机时间:', getPowerOffTime(currentSurgery))\n                console.log('状态机变化数据:', currentSurgery.state_machine_changes)\n                console.log('========================')\n              }\n              \n              updateStateMachineChart(currentSurgery)\n            } else {\n              console.warn('Canvas元素不存在，等待DOM渲染:', canvasId)\n              // 如果canvas不存在，再等待一下\n              setTimeout(() => {\n                updateStateMachineChart(currentSurgery)\n              }, 100)\n            }\n          })\n        }\n      }\n    })\n\n    // 生命周期\n    onMounted(async () => {\n      // 优先处理URL参数中的日志ID\n      const logIdsParam = route.query.logIds\n      if (logIdsParam) {\n        await loadBatchLogEntriesByIds()\n        return\n      }\n      \n      // 如果没有URL参数，检查是否有sessionStorage数据\n      if (logEntries.value.length > 0) {\n        // 检查是否有自动分析标志\n        const autoAnalyze = sessionStorage.getItem('autoAnalyze')\n        if (autoAnalyze === 'true') {\n          sessionStorage.removeItem('autoAnalyze')\n          await analyzeLogs()\n        }\n      }\n    })\n\n          return {\n        surgeries,\n        activeTab,\n        armDetailsVisible,\n        showAllAlarms,\n        analyzing,\n        logEntriesCount,\n        analyzeLogs,\n        exportReport,\n        toggleArmDetails,\n        toggleAlarms,\n        scrollToAlarmCard,\n        getArmUsages,\n        getInstrumentRows,\n        getArmTotalTime,\n        getArmTimelineStyle,\n              getArmTimelineSegments,\n      getSurgeryTimelineStyle,\n      getUsageTimelineStyle,\n        getEnergyTime,\n        getAlarmTypeTag,\n        getAlarmDetails,\n        formatTime,\n        formatSurgeryTime,\n        formatTimeShort,\n        getTimePosition,\n        getTimelineTicks,\n        handleTabClick,\n        getAnalysisButtonText,\n        getTimeRange,\n        loadBatchLogEntriesByIds,\n        pollTaskResult,\n        getPowerOnTime,\n        getPowerOffTime,\n        getAllPowerOnTimes,\n        getAllPowerOffTimes,\n        getSurgeryTimelineStyle,\n        getGroupedUsagesByUdi,\n        getGroupedUsageDuration,\n        getSegmentText,\n        getTimelineRange,\n        getProgressTimelineRange,\n        getSegmentInstrumentName,\n        getSortedTimelineEvents,\n        getStateChanges,\n        getStateName,\n        getStateBarHeight,\n        getStateBarPosition,\n        handleBeforeTabLeave,\n        \n        // 状态机图表相关方法\n        resetChartView,\n        updateStateMachineChart,\n        getStateMachineChartData,\n        getStateMachineChartOptions,\n\n                 // 滚动条相关方法\n         getScrollbarThumbStyle,\n         handleTrackClick,\n         startScrollbarDrag,\n         scrollChartLeft,\n         scrollChartRight,\n         canScrollLeft,\n         canScrollRight,\n         getScrollbarInfo,\n         checkSynchronization,\n\n\n\n      }\n  }\n}\n</script>\n\n<style scoped>\n.surgery-statistics-container {\n  padding: 20px;\n  min-height: calc(100vh - 40px);\n  box-sizing: border-box;\n}\n\n.action-bar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.analysis-section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  min-height: 400px;\n}\n\n.title-section {\n  display: flex;\n  flex-direction: column;\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.page-subtitle {\n  margin: 4px 0 0 0;\n  font-size: 14px;\n  color: #909399;\n}\n\n.empty-card {\n  text-align: center;\n  padding: 40px;\n  margin-top: 100px;\n}\n\n.empty-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  min-height: 300px;\n  justify-content: center;\n}\n\n.empty-icon {\n  font-size: 48px;\n  color: #C0C4CC;\n}\n\n.empty-content h3 {\n  margin: 0;\n  font-size: 18px;\n  color: #303133;\n}\n\n.empty-content p {\n  margin: 0;\n  color: #909399;\n}\n\n.log-entries-info {\n  width: 100%;\n  max-width: 600px;\n  margin: 20px 0;\n  text-align: left;\n}\n\n.entries-preview {\n  font-size: 12px;\n  color: #606266;\n  margin-top: 8px;\n}\n\n.analysis-info-card {\n  margin-bottom: 20px;\n}\n\n.tab-card {\n  border-radius: 8px;\n  min-height: 500px;\n  /* 优化ResizeObserver性能 */\n  contain: layout style paint;\n}\n\n/* 优化标签页性能 */\n.el-tabs__content {\n  contain: layout style paint;\n}\n\n.el-tab-pane {\n  contain: layout style paint;\n}\n\n/* 减少标签页切换时的重绘 */\n.el-tabs__item {\n  will-change: auto;\n}\n\n.el-tabs__content {\n  will-change: auto;\n}\n\n/* 禁用标签页切换动画，减少 ResizeObserver 错误 */\n.el-tabs__item {\n  transition: none !important;\n}\n\n.el-tabs__content {\n  transition: none !important;\n}\n\n.el-tab-pane {\n  transition: none !important;\n}\n\n/* 优化标签页内容渲染 */\n.el-tabs__content > .el-tab-pane {\n  contain: layout style paint;\n  will-change: auto;\n}\n\n/* 减少标签页切换时的布局计算 */\n.el-tabs__header {\n  contain: layout style paint;\n}\n\n.el-tabs__nav-wrap {\n  contain: layout style paint;\n}\n\n.el-tabs__nav {\n  contain: layout style paint;\n}\n\n.export-section {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 20px;\n}\n\n/* 手术信息布局 */\n.surgery-info-layout {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n  align-items: stretch;\n}\n\n.timeline-section {\n  width: 25%;\n  flex-shrink: 0;\n}\n\n.state-chart-section {\n  width: 75%;\n  flex-shrink: 0;\n}\n\n/* 第二行布局：器械卡片 + 手术统计卡片 */\n/* 删除外部分栏后的残留样式（不再使用） */\n\n/* 手术信息卡片样式 */\n.info-card {\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  /* 确保时间线内容不被遮挡 */\n  overflow: visible;\n}\n\n/* 状态图表卡片样式 */\n.state-chart-card {\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.info-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #E4E7ED;\n  flex-shrink: 0;\n}\n\n.info-header .time {\n  font-size: 16px;\n  font-weight: 500;\n  color: #1d2129;\n}\n\n.info-header .badges {\n  display: flex;\n  gap: 8px;\n}\n\n/* 故障手术标签样式 */\n.alarm-tag {\n  cursor: pointer;\n  transition: all 0.3s ease;\n  user-select: none;\n}\n\n.alarm-tag:hover {\n  transform: scale(1.05);\n  box-shadow: 0 2px 8px rgba(245, 108, 108, 0.3);\n}\n\n.alarm-tag:active {\n  transform: scale(0.95);\n}\n\n/* AntD Steps 时间线样式 */\n.surgery-steps {\n  padding-left: 2px;\n}\n\n:deep(.ant-steps-vertical) {\n  align-items: stretch;\n}\n\n:deep(.ant-steps-item) {\n  padding-bottom: 10px;\n}\n\n:deep(.ant-steps-item:last-child) {\n  padding-bottom: 0;\n}\n\n:deep(.ant-steps-item-container) {\n  align-items: flex-start;\n}\n\n:deep(.ant-steps-item-title) {\n  font-weight: 500;\n  font-size: 14px;\n}\n\n:deep(.ant-steps-item-description) {\n  color: #606266; /* 统一时间字体颜色，不按类型区分 */\n}\n:deep(.ant-steps-item-icon),\n:deep(.ant-steps-item-tail) {\n  color: #dcdfe6; /* 统一连接线/节点颜色 */\n}\n\n:deep(.ant-steps-item-finish) .ant-steps-item-icon,\n:deep(.ant-steps-item-process) .ant-steps-item-icon,\n:deep(.ant-steps-item-wait) .ant-steps-item-icon,\n:deep(.ant-steps-item-error) .ant-steps-item-icon {\n  color: #dcdfe6;\n}\n\n:deep(.ant-steps-item-finish) .ant-steps-item-title::after,\n:deep(.ant-steps-item-process) .ant-steps-item-title::after,\n:deep(.ant-steps-item-wait) .ant-steps-item-title::after,\n:deep(.ant-steps-item-error) .ant-steps-item-title::after {\n  background-color: #dcdfe6; /* 统一连接线颜色 */\n}\n\n.timeline-content {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 12px;\n  background-color: #f8f9fa;\n  border-radius: 6px;\n  border-left: 3px solid;\n  /* 移除悬停动画效果 */\n  transition: none;\n}\n\n/* 移除悬停时的动态效果 */\n.timeline-content:hover {\n  /* 移除 transform 和 box-shadow 效果 */\n  transform: none;\n  box-shadow: none;\n}\n\n.timeline-icon {\n  font-size: 16px;\n  color: #409EFF;\n}\n\n.timeline-text {\n  font-size: 14px;\n  font-weight: 500;\n  color: #303133;\n}\n\n/* 时间线项目颜色 - 根据事件类型设置 */\n.timeline-content {\n  border-left-color: #409EFF;\n  background-color: #f8f9fa;\n}\n\n/* 开机事件样式 */\n.timeline-content.timeline-powerOn {\n  border-left-color: #67C23A;\n  background-color: #f0f9ff;\n}\n\n/* 手术开始事件样式 */\n.timeline-content.timeline-surgeryStart {\n  border-left-color: #409EFF;\n  background-color: #f0f9ff;\n}\n\n/* 手术结束事件样式 */\n.timeline-content.timeline-surgeryEnd {\n  border-left-color: #E6A23C;\n  background-color: #fff7ed;\n}\n\n/* 关机事件样式 */\n.timeline-content.timeline-powerOff {\n  border-left-color: #F56C6C;\n  background-color: #fef0f0;\n}\n\n/* 时间线时间戳样式 */\n.el-timeline-item__timestamp {\n  font-size: 12px !important;\n  color: #909399 !important;\n  font-weight: 500 !important;\n}\n\n/* 状态图表样式 */\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #E4E7ED;\n  flex-shrink: 0;\n}\n\n.chart-title {\n  font-size: 16px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.chart-controls {\n  display: flex;\n  gap: 16px;\n  align-items: center;\n}\n\n.chart-legend {\n  display: flex;\n  gap: 16px;\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 12px;\n  color: #606266;\n}\n\n.legend-color {\n  width: 12px;\n  height: 12px;\n  border-radius: 2px;\n}\n\n.legend-color.state-normal {\n  background-color: #95D475; /* 浅绿色 - 正常状态 */\n}\n\n.legend-color.state-error {\n  background-color: #F56C6C; /* 红色 - 故障状态 */\n}\n\n.legend-color.state-shutdown {\n  background-color: #909399; /* 灰色 - 关机状态 */\n}\n\n.state-chart-container {\n  position: relative;\n  height: 380px;\n  background-color: #FAFAFA;\n  border-radius: 6px;\n  border: 1px solid #E4E7ED;\n  overflow: hidden;\n  flex: 1;\n  cursor: grab;\n  padding-left: 4px; /* 为图形左边界留出空间，避免截断 */\n  padding-right: 10px; /* 为Y轴标签留出空间 */\n}\n\n.state-chart-container:active {\n  cursor: grabbing;\n}\n\n/* 滚动条样式 */\n.chart-scrollbar-container {\n  margin-top: 10px;\n  padding: 0 10px;\n}\n\n.scrollbar-track {\n  position: relative;\n  height: 8px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n  border: 1px solid #E4E7ED;\n  cursor: pointer;\n  margin-bottom: 8px;\n}\n\n.scrollbar-thumb {\n  position: absolute;\n  height: 100%;\n  background-color: #409EFF;\n  border-radius: 4px;\n  cursor: grab;\n  transition: background-color 0.2s ease;\n  min-width: 20px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.scrollbar-thumb:hover {\n  background-color: #337ECC;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n}\n\n.scrollbar-thumb:active {\n  cursor: grabbing;\n  background-color: #2B5BA1;\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.4);\n}\n\n.scrollbar-controls {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n}\n\n.scrollbar-info {\n  font-size: 12px;\n  color: #606266;\n  min-width: 120px;\n  text-align: center;\n}\n\n\n\n.chart-bars {\n  position: relative;\n  height: 100%;\n  padding: 10px 40px;\n}\n\n.chart-bar {\n  position: absolute;\n  bottom: 0;\n  width: 30px;\n  border-radius: 2px 2px 0 0;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.chart-bar:hover {\n  transform: scaleY(1.1);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n}\n\n.chart-bar.state-surgery {\n  background-color: #95D475; /* 浅绿色 - 正常阶段 */\n}\n\n.chart-bar.state-error {\n  background-color: #F56C6C; /* 红色 - 故障阶段 */\n}\n\n.bar-tooltip {\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-size: 12px;\n  white-space: nowrap;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0.3s ease;\n  z-index: 1000;\n}\n\n.chart-bar:hover .bar-tooltip {\n  opacity: 1;\n}\n\n.tooltip-state {\n  font-weight: 600;\n  margin-bottom: 4px;\n}\n\n.tooltip-original {\n  color: #909399;\n  font-size: 11px;\n  margin-bottom: 2px;\n}\n\n.tooltip-time {\n  color: #E4E7ED;\n  margin-bottom: 2px;\n}\n\n.tooltip-duration {\n  color: #67C23A;\n  font-weight: 500;\n}\n\n.chart-timeline {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 30px;\n  border-top: 1px solid #E4E7ED;\n  background-color: #FFFFFF;\n}\n\n.time-tick {\n  position: absolute;\n  top: 0;\n  transform: translateX(-50%);\n}\n\n.tick-line {\n  width: 1px;\n  height: 8px;\n  background-color: #DCDFE6;\n  margin: 0 auto;\n}\n\n.tick-label {\n  font-size: 10px;\n  color: #909399;\n  text-align: center;\n  margin-top: 4px;\n  white-space: nowrap;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .surgery-info-layout {\n    flex-direction: column;\n    gap: 16px;\n  }\n  \n  .timeline-section,\n  .state-chart-section {\n    width: 100%;\n  }\n  \n  .info-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 8px;\n  }\n  \n  .timeline-content {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 4px;\n  }\n  \n  .chart-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 12px;\n  }\n  \n  .chart-legend {\n    flex-wrap: wrap;\n    gap: 12px;\n  }\n  \n  .state-chart-container {\n    height: 100px;\n  }\n}\n\n/* 器械使用分组样式 */\n.usage-group {\n  margin-bottom: 16px;\n  padding: 16px;\n  background-color: #FFFFFF;\n  border-radius: 6px;\n  border: 1px solid #E4E7ED;\n}\n\n.usage-group-header {\n  margin-bottom: 12px;\n}\n\n.usage-group-info {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.usage-group-name {\n  font-size: 14px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.usage-group-udi {\n  font-size: 12px;\n  color: #909399;\n}\n\n.usage-group-duration {\n  font-size: 12px;\n  color: #67C23A;\n  font-weight: 500;\n}\n\n.usage-group-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n}\n\n.usage-group-color.arm-1 { background-color: #409EFF; }\n.usage-group-color.arm-2 { background-color: #67C23A; }\n.usage-group-color.arm-3 { background-color: #E6A23C; }\n.usage-group-color.arm-4 { background-color: #F56C6C; }\n\n/* 工具提示样式 */\n.el-tooltip__popper {\n  z-index: 9999;\n}\n\n/* 自定义工具提示样式 */\n:deep(.usage-time-tooltip) {\n  background-color: rgba(0, 0, 0, 0.9) !important;\n  color: white !important;\n  border: none !important;\n  border-radius: 6px !important;\n  padding: 10px 12px !important;\n  font-size: 12px !important;\n  font-weight: 500 !important;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4) !important;\n  line-height: 1.4 !important;\n  max-width: 300px !important;\n  white-space: pre-line !important;\n}\n\n:deep(.usage-time-tooltip .el-tooltip__arrow) {\n  border-top-color: rgba(0, 0, 0, 0.9) !important;\n}\n\n/* 移除旧的样式 */\n.time-info-cards {\n  display: none;\n}\n\n.time-card {\n  display: none;\n}\n\n.time-card-content {\n  display: none;\n}\n\n.usage-item {\n  display: none;\n}\n\n.usage-label {\n  display: none;\n}\n\n.usage-name {\n  display: none;\n}\n\n.usage-udi {\n  display: none;\n}\n\n.usage-duration {\n  display: none;\n}\n\n.usage-timeline-container {\n  display: none;\n}\n\n.usage-timeline {\n  display: none;\n}\n\n.timeline-segment-sub {\n  display: none;\n}\n\n/* 移除旧的时间信息样式 */\n.time-info-section {\n  display: none;\n}\n\n.time-info-header {\n  display: none;\n}\n\n.time-info-title {\n  display: none;\n}\n\n.time-info-content {\n  display: none;\n}\n\n.time-info-item {\n  display: none;\n}\n\n.time-icon {\n  display: none;\n}\n\n.time-info {\n  display: none;\n}\n\n.time-label {\n  display: none;\n}\n\n.arm-usage-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.unified-timeline-view {\n  position: relative;\n  min-height: 120px;\n  margin-bottom: 30px;\n  /* 优化渲染性能 */\n  contain: layout style paint;\n  will-change: transform;\n}\n\n.surgery-progress-container {\n  margin-bottom: 30px;\n  padding: 16px;\n  background-color: #FAFAFA;\n  border-radius: 8px;\n  border: 1px solid #E4E7ED;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.surgery-timeline-wrapper {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.surgery-label {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  min-width: 120px;\n  flex-shrink: 0;\n}\n\n.surgery-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n  background: linear-gradient(90deg, #409EFF, #67C23A);\n}\n\n.surgery-name {\n  font-weight: 600;\n  color: #303133;\n}\n\n.progress-labels {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 8px;\n  padding-left: 132px; /* 120px标签宽度 + 12px间距 */\n}\n\n.time-label {\n  font-size: 14px;\n  color: #303133;\n  font-weight: 500;\n}\n\n.surgery-progress {\n  margin-bottom: 8px;\n}\n\n.surgery-timeline-container {\n  position: relative;\n  height: 20px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n  border: 1px solid #DCDFE6;\n  overflow: hidden;\n  flex: 1;\n  min-width: 0;\n  box-sizing: border-box;\n}\n\n.surgery-timeline-bar {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.surgery-timeline-segment {\n  position: absolute;\n  height: 100%;\n  background: linear-gradient(90deg, #409EFF, #67C23A);\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.surgery-segment-text {\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0 8px;\n}\n\n.surgery-duration-info {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  font-size: 12px;\n  color: #666;\n  min-width: 120px;\n  flex-shrink: 0;\n  align-items: flex-start;\n}\n\n.surgery-duration-info .duration-text {\n  font-weight: 500;\n  color: #409EFF;\n}\n\n.surgery-duration-info .time-range {\n  color: #909399;\n  font-size: 11px;\n}\n\n.surgery-duration-info .timeline-range {\n  color: #606266;\n  font-size: 11px;\n  font-style: italic;\n}\n\n\n\n/* 时间值样式（保留用于其他地方） */\n.time-value {\n  font-size: 14px;\n  font-weight: 600;\n  color: #303133;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n\n\n\n\n.arm-timeline {\n  display: flex;\n  flex-direction: column;\n  gap: 12px; /* 更紧凑 */\n  margin-top: 12px; /* 更紧凑 */\n  position: relative;\n  z-index: 2;\n  contain: layout style paint;\n}\n\n.arm-item {\n  border: 1px solid #E4E7ED;\n  border-radius: 6px; /* 更紧凑 */\n  padding: 10px; /* 更紧凑 */\n  background-color: #FAFAFA;\n  margin-bottom: 8px; /* 更紧凑 */\n}\n\n.arm-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px; /* 更紧凑 */\n}\n\n.arm-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.arm-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n}\n\n.arm-1 { background-color: #409EFF; }\n.arm-2 { background-color: #67C23A; }\n.arm-3 { background-color: #E6A23C; }\n.arm-4 { background-color: #F56C6C; }\n\n.arm-name {\n  font-weight: 600;\n  color: #303133;\n}\n\n.arm-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.arm-timeline-container {\n  display: flex;\n  align-items: center;\n  gap: 8px; /* 更紧凑 */\n  margin-bottom: 8px; /* 更紧凑 */\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0;\n  position: relative;\n}\n\n/* 当arm-timeline-container没有arm-label时的样式 */\n.arm-timeline-container.no-label {\n  gap: 0;\n}\n\n.arm-timeline-container.no-label .arm-timeline-bar {\n  flex: 1;\n  width: 100%;\n}\n\n.arm-label {\n  display: flex;\n  align-items: center;\n  gap: 6px; /* 更紧凑 */\n  min-width: 110px; /* 稍微收窄 */\n  flex-shrink: 0;\n  padding: 0;\n  margin: 0;\n  position: relative;\n}\n\n.arm-timeline-bar {\n  position: relative;\n  height: 16px; /* 更紧凑 */\n  background: #F5F7FA;\n  border-radius: 4px;\n  overflow: hidden;\n  flex: 1;\n  min-width: 0;\n  border: 1px solid #DCDFE6;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  left: 0;\n  right: 0;\n}\n\n\n\n.timeline-segment {\n  position: absolute;\n  height: 100%;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 12px;\n  font-weight: 500;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.timeline-segment.arm-1 { background-color: #409EFF; }\n.timeline-segment.arm-2 { background-color: #67C23A; }\n.timeline-segment.arm-3 { background-color: #E6A23C; }\n.timeline-segment.arm-4 { background-color: #F56C6C; }\n\n/* 确保segment-content占满整个进度条区域 */\n.segment-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.segment-text {\n  font-size: 10px; /* 更紧凑 */\n  font-weight: 500;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0 4px;\n  text-align: center;\n  color: white;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n  min-height: 16px; /* 与bar高度匹配 */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.arm-details {\n  margin-top: 16px;\n  padding-top: 0;\n  border-top: 1px solid #E4E7ED;\n}\n\n\n\n.energy-time {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #909399;\n  margin-top: 12px;\n}\n\n.energy-icon {\n  color: #E6A23C;\n}\n\n.alarm-card {\n  margin-bottom: 20px;\n}\n\n.alarm-summary {\n  margin-top: 16px;\n  text-align: center;\n}\n\n.alarm-toggle {\n  margin-top: 12px;\n  text-align: center;\n}\n\n.alarm-toggle .el-button {\n  color: #409EFF;\n  font-size: 14px;\n}\n\n.alarm-toggle .el-button:hover {\n  color: #66b1ff;\n}\n\n\n\n.stats-section {\n  margin-top: 20px;\n}\n\n.stats-card {\n  background-color: #F5F7FA;\n  border-radius: 8px;\n  padding: 16px;\n}\n\n.stats-card h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.stats-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.stats-list li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  font-size: 12px;\n  color: #606266;\n}\n\n.stats-list li:last-child {\n  margin-bottom: 0;\n}\n\n/* 多个时间显示样式 */\n.time-item {\n  margin-bottom: 4px;\n  padding: 2px 0;\n  font-size: 13px;\n  color: #606266;\n}\n\n.time-item:last-child {\n  margin-bottom: 0;\n}\n\n.time-item:not(:last-child) {\n  border-bottom: 1px solid #EBEEF5;\n  padding-bottom: 4px;\n}\n\n.time-value {\n  min-height: 20px;\n}\n\n/* 确保时间轴对齐的全局样式 */\n.arm-timeline-container {\n  display: flex !important;\n  align-items: center !important;\n  gap: 12px !important;\n  margin-bottom: 12px !important;\n  width: 100% !important;\n  box-sizing: border-box !important;\n  padding: 0 !important;\n  position: relative !important;\n}\n\n/* 额外的 ResizeObserver 优化 */\n.surgery-statistics-container {\n  contain: layout style paint;\n}\n\n.tab-card {\n  contain: layout style paint;\n}\n\n/* 减少标签页内容的重绘 */\n.el-tabs__content > .el-tab-pane {\n  contain: layout style paint;\n  will-change: auto;\n  transform: translateZ(0);\n}\n\n/* 优化复杂组件的渲染 */\n.surgery-info-layout {\n  contain: layout style paint;\n  will-change: auto;\n}\n\n.unified-timeline-view {\n  contain: layout style paint;\n  will-change: auto;\n}\n\n/* 禁用不必要的动画和过渡 */\n.el-collapse-transition {\n  transition: none !important;\n}\n\n.el-fade-in-linear-enter-active,\n.el-fade-in-linear-leave-active {\n  transition: none !important;\n}\n\n/* 优化表格渲染 */\n.el-table {\n  contain: layout style paint;\n}\n\n.el-table__body-wrapper {\n  contain: layout style paint;\n}\n\n.arm-label {\n  display: flex !important;\n  align-items: center !important;\n  gap: 8px !important;\n  min-width: 120px !important;\n  flex-shrink: 0 !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  position: relative !important;\n}\n\n.arm-timeline-bar {\n  position: relative !important;\n  height: 20px !important;\n  background: #F5F7FA !important;\n  border-radius: 4px !important;\n  overflow: hidden !important;\n  flex: 1 !important;\n  min-width: 0 !important;\n  border: 1px solid #DCDFE6 !important;\n  box-sizing: border-box !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  left: 0 !important;\n  right: 0 !important;\n}\n\n/* 确保所有时间轴进度条完全对齐，基于容器左边偏移相同距离 */\n.arm-item .arm-timeline-container .arm-timeline-bar,\n.usage-group .arm-timeline-container .arm-timeline-bar {\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n  width: 100% !important;\n  max-width: none !important;\n  position: relative !important;\n}\n\n/* 确保时间轴容器内的所有元素都基于相同的左边偏移 */\n.arm-timeline-container .arm-label {\n  position: relative !important;\n  left: 0 !important;\n}\n\n.arm-timeline-container .arm-timeline-bar {\n  position: relative !important;\n  left: 0 !important;\n}\n\n/* 器械使用时间段的特殊样式 */\n.arm-timeline-container .timeline-segment {\n  opacity: 0.7; /* 降低透明度 */\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.arm-timeline-container .timeline-segment:hover {\n  opacity: 1; /* 悬停时高亮显示 */\n  transform: scale(1.02);\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n  z-index: 10;\n}\n\n\n</style> ","import { render } from \"./SurgeryStatistics.vue?vue&type=template&id=026ed386&scoped=true\"\nimport script from \"./SurgeryStatistics.vue?vue&type=script&lang=js\"\nexport * from \"./SurgeryStatistics.vue?vue&type=script&lang=js\"\n\nimport \"./SurgeryStatistics.vue?vue&type=style&index=0&id=026ed386&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-026ed386\"]])\n\nexport default __exports__"],"names":["class","surgeries","length","analyzing","logEntriesCount","type","analyzeLogs","loading","disabled","getAnalysisButtonText","activeTab","handleTabClick","lazy","handleBeforeTabLeave","stretch","closable","addable","surgery","key","id","label","surgery_id","name","toString","exportReport","alarm_count","size","scrollToAlarmCard","style","direction","current","getSortedTimelineEvents","event","index","title","description","formatTime","time","header","total_duration","surgery_start_time","surgery_end_time","getSurgeryTimelineStyle","formatTimeShort","getProgressTimelineRange","start","end","getArmUsages","armUsage","plain","toggleArmDetails","getArmTimelineSegments","segment","segmentIndex","content","getSegmentInstrumentName","placement","getGroupedUsagesByUdi","groupedUsage","udiCode","instrumentName","getGroupedUsageDuration","usages","usage","usageIndex","getUsageTimelineStyle","startTime","endTime","Math","floor","Date","getSegmentText","getEnergyTime","armDetailsVisible","data","getInstrumentRows","prop","getAlarmDetails","slice","showAllAlarms","undefined","width","default","row","code","error_code","status","toggleAlarms","components","DataAnalysis","Download","SwitchButton","Close","VideoPlay","VideoPause","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Calendar","PowerOff","Lightning","Globe","Loading","setup","route","stateMachineCharts","Map","chartViewRange","chartCurrentTime","getStateToYPositionMap","logEntries","logIdsParam","query","logIds","surgeryData","sessionStorage","getItem","JSON","parse","entries","dataAge","now","timestamp","console","log","removeItem","compressed","decompressedEntries","map","entry","t","e","param1","p1","param2","p2","param3","p3","param4","p4","explanation","exp","log_name","ln","error","value","loadBatchLogEntriesByIds","async","split","parseInt","response","api","surgeryStatistics","analyzeByLogIds","success","taskId","pollTaskResult","forEach","message","maxAttempts","attempts","poll","getAnalysisTaskStatus","task","result","Promise","resolve","setTimeout","getTimeRange","timestamps","minTime","min","maxTime","max","dataSize","stringify","maxSize","analysisData","warning","toFixed","sampleSize","step","i","push","analyzeSortedEntries","surgeryId","armIndex","alarmCard","document","querySelector","scrollIntoView","behavior","block","boxShadow","transition","arm1_usage","arm2_usage","arm3_usage","arm4_usage","grouped","allArms","u","udi","has","set","segments","get","rows","Array","from","values","item","sort","a","b","merged","seg","last","lastEnd","getTime","curStart","curEnd","getArmTotalTime","totalMinutes","filter","reduce","total","duration","getAlarmTypeTag","alarm_details","details","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatSurgeryTime","toLocaleString","getTimelineRange","warn","getEventTimelineRange","events","powerOnTime","getPowerOnTime","powerOffTime","getPowerOffTime","surgeryEndTime","getTimePosition","isNaN","position","getTimelineTicks","interval","ticks","mergeOverlappingTimeRanges","timeRanges","next","getArmTimelineStyle","left","completeUsages","mergedTimeRanges","totalWidth","timelineRange","range","startPosition","endPosition","surgeryStartTime","timelineStart","timelineEnd","totalSeconds","power_on_times","power_on_time","shutdown_times","power_off_time","getAllPowerOnTimes","getAllPowerOffTimes","powerOnTimes","is_consecutive_surgery","previous_surgery_end_time","color","icon","powerOffTimes","getStateChanges","stateMachineChanges","state_machine_changes","stateChanges","currentChange","nextChange","currentState","state","stateCategory","nextState","originalState","stateName","getStateName","stateMap","getStateBarHeight","heightMap","height","getStateBarPosition","clampedPosition","totalDuration","widthPercent","parseFloat","minWidthPerChar","padding","requiredWidth","maxChars","substring","startPercent","endPercent","instrumentsInSegment","usageStart","usageEnd","tab","newTabName","oldTabName","then","resetChartView","chart","dispose","clear","Object","keys","surgeryChartStates","surgeryScrollbarStates","getStateMachineChartData","changes","xMin","xMax","points","rawData","positionMap","changesWithin","lastBefore","ch","startState","y","lastState","getStateMachineChartOptions","surgeryState","currentTime","viewRange","responsive","maintainAspectRatio","interaction","mode","intersect","plugins","legend","display","tooltip","callbacks","context","dataIndex","isCrossDay","toLocaleDateString","toLocaleTimeString","getStateMachineStateName","parsed","scales","x","text","maxTicksLimit","callback","this","hour","minute","beginAtZero","stepSize","animation","updateStateMachineChart","container","getElementById","existing","_","delete","innerHTML","echarts","reverseMap","k","fiveMinutesMs","initialEnd","setOption","grid","right","top","bottom","containLabel","toolbox","feature","dataZoom","yAxisIndex","restore","saveAsImage","trigger","axisPointer","formatter","params","p","yMapped","xAxisIndex","filterMode","zoomOnMouseWheel","moveOnMouseWheel","moveOnMouseMove","startValue","endValue","showDataShadow","brushSelect","xAxis","axisLabel","second","yAxis","val","original","axisTick","show","splitNumber","series","showSymbol","lineStyle","areaStyle","offset","scrollbarUpdateTrigger","getScrollbarThumbStyle","updateTrigger","totalStartTime","totalEndTime","chartData","viewStartTime","viewEndTime","viewWindowDuration","viewCenterTime","minCenterTime","maxCenterTime","clampedTime","viewDuration","thumbPosition","thumbWidth","clampedWidth","toISOString","isAtEnd","isAtStart","handleTrackClick","track","currentTarget","rect","getBoundingClientRect","clickX","clientX","trackWidth","clickPercentage","targetTime","newCurrentTime","startScrollbarDrag","preventDefault","stopPropagation","scrollbarState","isDragging","dragStartX","dragStartTime","addEventListener","handleScrollbarDrag","stopScrollbarDrag","deltaX","scrollbarContainer","scrollbarTrack","offsetWidth","dragTimeChange","newCenterTime","removeEventListener","scrollChartLeft","scrollStep","oldTime","newTime","scrollChartRight","canScrollLeft","canScrollRight","canScroll","checkSynchronization","scrollbarStyle","scrollbarInfo","getScrollbarInfo","isShortSurgery","chartDataExists","chartLabels","labels","chartDataPoints","chartStartTime","chartEndTime","scrollbarLeft","scrollbarWidth","finalViewStartTime","finalViewEndTime","startTimeStr","endTimeStr","durationMinutes","actualStartTime","actualEndTime","actualDurationMinutes","newSurgeries","currentSurgery","find","s","canvasId","canvas","deep","newTab","autoAnalyze","__exports__","render"],"sourceRoot":""}