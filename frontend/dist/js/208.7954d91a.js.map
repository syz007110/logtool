{"version":3,"file":"js/208.7954d91a.js","mappings":"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","sources":["webpack://logtool-frontend/./src/utils/timeFormatter.js","webpack://logtool-frontend/./src/utils/visualizationConfig.js","webpack://logtool-frontend/./src/views/SurgeryVisualization.vue","webpack://logtool-frontend/./src/views/SurgeryVisualization.vue?33d9","webpack://logtool-frontend/./src/components/TimeSeriesChart.vue","webpack://logtool-frontend/./src/components/TimeSeriesChart.vue?8000"],"sourcesContent":["/**\r\n * 修复后的时间格式化工具\r\n * 处理UTC时间到本地时间的转换，确保所有页面显示一致\r\n */\r\n\r\n// 服务器时区偏移量（分钟）\r\nlet serverOffsetMinutes = null\r\n\r\n/**\r\n * 加载服务器时区信息\r\n */\r\nexport const loadServerTimezone = async () => {\r\n  try {\r\n    const resp = await fetch('/api/timezone')\r\n    const json = await resp.json()\r\n    if (typeof json.offsetMinutes === 'number') {\r\n      serverOffsetMinutes = json.offsetMinutes\r\n    }\r\n  } catch (error) {\r\n    console.warn('加载服务器时区信息失败:', error)\r\n    serverOffsetMinutes = null\r\n  }\r\n}\r\n\r\n/**\r\n * 统一的时间格式化函数\r\n * 将UTC时间转换为服务器时区时间显示\r\n * @param {string|Date|number} timestamp - 时间戳\r\n * @param {boolean} useServerTimezone - 是否使用服务器时区转换，默认为true\r\n * @param {boolean} isUtcTime - 输入时间是否为UTC时间，默认为true（数据库时间）\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport const formatTime = (timestamp, useServerTimezone = true, isUtcTime = true) => {\r\n  if (!timestamp) return '-'\r\n\r\n  // 如果明确指定为本地时间且是本地时间格式，直接返回\r\n  if (!isUtcTime && typeof timestamp === 'string' && /^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(timestamp)) {\r\n    return timestamp\r\n  }\r\n\r\n  let date\r\n\r\n  // 处理不同的时间格式\r\n  if (typeof timestamp === 'string') {\r\n    // 如果是UTC格式 YYYY-MM-DD HH:mm:ss，需要添加UTC标识符\r\n    if (/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(timestamp)) {\r\n      // 这是数据库中的UTC格式，需要添加Z标识符\r\n      const utcTimeStr = timestamp.replace(' ', 'T') + 'Z'\r\n      date = new Date(utcTimeStr)\r\n    } else if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/.test(timestamp)) {\r\n      // 如果是ISO格式的UTC时间 YYYY-MM-DDTHH:mm:ss.fffZ\r\n      date = new Date(timestamp)\r\n    } else {\r\n      date = new Date(timestamp)\r\n    }\r\n  } else {\r\n    date = new Date(timestamp)\r\n  }\r\n\r\n  if (isNaN(date.getTime())) return '-'\r\n\r\n  // 如果启用服务器时区转换\r\n  if (useServerTimezone) {\r\n    if (serverOffsetMinutes !== null) {\r\n      // 以服务端时区为准：将UTC时间转换为服务器时区时间\r\n      const localOffset = -date.getTimezoneOffset()\r\n      const delta = (serverOffsetMinutes - localOffset) * 60 * 1000\r\n      date.setTime(date.getTime() + delta)\r\n    }\r\n    // 注意：JavaScript的Date对象会自动处理时区转换\r\n    // 如果输入是UTC时间，Date对象会自动转换为本地时间显示\r\n    // 我们不需要手动加减8小时\r\n  }\r\n\r\n  const year = date.getFullYear()\r\n  const month = String(date.getMonth() + 1).padStart(2, '0')\r\n  const day = String(date.getDate()).padStart(2, '0')\r\n  const hours = String(date.getHours()).padStart(2, '0')\r\n  const minutes = String(date.getMinutes()).padStart(2, '0')\r\n  const seconds = String(date.getSeconds()).padStart(2, '0')\r\n\r\n  const result = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * 格式化短时间（只显示时分）\r\n * @param {string|Date|number} timestamp - 时间戳\r\n * @param {boolean} useServerTimezone - 是否使用服务器时区转换，默认为true\r\n * @param {boolean} isUtcTime - 输入时间是否为UTC时间，默认为true（数据库时间）\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport const formatTimeShort = (timestamp, useServerTimezone = true, isUtcTime = true) => {\r\n  if (!timestamp) return '-'\r\n\r\n  const date = new Date(timestamp)\r\n  if (isNaN(date.getTime())) return '-'\r\n\r\n  // 如果启用服务器时区转换\r\n  if (useServerTimezone) {\r\n    if (serverOffsetMinutes !== null) {\r\n      const localOffset = -date.getTimezoneOffset()\r\n      const delta = (serverOffsetMinutes - localOffset) * 60 * 1000\r\n      date.setTime(date.getTime() + delta)\r\n    }\r\n    // 注意：JavaScript的Date对象会自动处理时区转换\r\n    // 如果输入是UTC时间，Date对象会自动转换为本地时间显示\r\n    // 我们不需要手动加减8小时\r\n  }\r\n\r\n  const hours = String(date.getHours()).padStart(2, '0')\r\n  const minutes = String(date.getMinutes()).padStart(2, '0')\r\n\r\n  return `${hours}:${minutes}`\r\n}\r\n\r\n/**\r\n * 格式化手术时间范围\r\n * @param {Object} surgery - 手术对象\r\n * @param {boolean} useServerTimezone - 是否使用服务器时区转换，默认为true\r\n * @returns {string} 格式化后的时间范围字符串\r\n */\r\nexport const formatSurgeryTime = (surgery, useServerTimezone = true) => {\r\n  if (!surgery.surgery_start_time || !surgery.surgery_end_time) {\r\n    return '手术时间未确定'\r\n  }\r\n\r\n  const start = formatTime(surgery.surgery_start_time, useServerTimezone, true) // 数据库时间默认为UTC\r\n  const end = formatTime(surgery.surgery_end_time, useServerTimezone, true) // 数据库时间默认为UTC\r\n\r\n  return `${start} ~ ${end}`\r\n}\r\n\r\n/**\r\n * 获取服务器时区信息\r\n * @returns {Object|null} 服务器时区信息\r\n */\r\nexport const getServerTimezone = () => {\r\n  return serverOffsetMinutes !== null ? { offsetMinutes: serverOffsetMinutes } : null\r\n}\r\n\r\n/**\r\n * 格式化系统时间（用于显示创建时间、更新时间等）\r\n * 使用24小时制，格式：YYYY-MM-DD HH:mm:ss\r\n * @param {string|Date|number} timestamp - 时间戳\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport const formatSystemTime = (timestamp) => {\r\n  if (!timestamp) return '-'\r\n\r\n  const date = new Date(timestamp)\r\n  if (isNaN(date.getTime())) return '-'\r\n\r\n  const year = date.getFullYear()\r\n  const month = String(date.getMonth() + 1).padStart(2, '0')\r\n  const day = String(date.getDate()).padStart(2, '0')\r\n  const hours = String(date.getHours()).padStart(2, '0')\r\n  const minutes = String(date.getMinutes()).padStart(2, '0')\r\n  const seconds = String(date.getSeconds()).padStart(2, '0')\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n}\r\n\r\n/**\r\n * 检查是否已加载服务器时区信息\r\n * @returns {boolean} 是否已加载\r\n */\r\nexport const isServerTimezoneLoaded = () => {\r\n  return serverOffsetMinutes !== null\r\n}\r\n","// 共享的可视化配置文件\r\n// 用于 SurgeryVisualization.vue 和 ExplanationTester.vue\r\n\r\n// 甘特图可配置样式参数\r\nexport const GANTT_STYLE = {\r\n  // 每个臂行上下的预留留白（像素）\r\n  ROW_GAP_PX: 2,\r\n  // 条的最大厚度（像素上限）\r\n  BAR_MAX_PX: 40,\r\n  // 条厚度占可用行高（去除留白后）的比例 0~1\r\n  BAR_RATIO: 0.8\r\n}\r\n\r\n// 颜色配置：可按器械类型固定颜色，也可按臂分配基础色\r\nexport const GANTT_COLORS = {\r\n  // 器械类型 → 颜色\r\n  TOOL_TYPE_COLORS: {\r\n    '无器械': '#EBBA66',       // 浅橙 - 空白状态\r\n    '持针钳': '#D9EB66',       // 浅黄绿\r\n    '电钩': '#96EB66',         // 青绿\r\n    '双极鸭嘴电凝钳': '#66EB77', // 深绿\r\n    '直剪': '#FFB366',         // 橙色\r\n    '单极弧剪': '#FF9966',     // 橙红\r\n    '双极弧形电凝钳': '#FF6666', // 红色\r\n    '波茨剪': '#FF6666',       // 红色\r\n    '无损伤镊': '#66CCFF',     // 浅蓝\r\n    '-30度内窥镜': '#3399FF',   // 蓝色\r\n    '0度内窥镜': '#0066FF',    // 深蓝\r\n    '30度内窥镜': '#6699FF',   // 中蓝\r\n    '大持针钳': '#99CC66',     // 黄绿色\r\n    '鸭嘴抓钳': '#33CC99',     // 青色\r\n    '鼠齿抓钳': '#00CC99'      // 青色\r\n  },\r\n  // 不同臂的基础颜色（作为 fallback）\r\n  ARM_BASE_COLORS: ['#E28A6A', '#E2C66A', '#C2E26A', '#86E26A']\r\n}\r\n\r\n// 最小化数据转换：保留原始结构，只添加必要的计算字段\r\nexport function normalizeSurgeryData(raw) {\r\n  if (!raw || typeof raw !== 'object') {\r\n    return { \r\n      timeline: {}, \r\n      arms: [], \r\n      state_machine: [], \r\n      is_remote: false, \r\n      surgery_id: null, \r\n      start_time: null, \r\n      end_time: null, \r\n      network_latency_data: [],\r\n      structured_data: null\r\n    }\r\n  }\r\n\r\n  // 如果已经是期望结构，直接返回（保留所有原始字段）\r\n  if (raw.timeline && Array.isArray(raw.arms)) {\r\n    return {\r\n      ...raw,  // 保留所有原始字段\r\n      is_remote: !!raw.is_remote,\r\n      surgery_id: raw.surgery_id || null,\r\n      start_time: raw.start_time || null,\r\n      end_time: raw.end_time || null,\r\n      network_latency_data: Array.isArray(raw.network_latency_data) ? raw.network_latency_data : []\r\n    }\r\n  }\r\n\r\n  // 最小化转换：保留所有原始数据，只添加必要的计算字段\r\n  const hasStructured = !!raw.structured_data\r\n  const source = hasStructured ? raw.structured_data : raw\r\n\r\n  // 只计算时间轴映射（这是可视化必需的）\r\n  const powerOn = source.power_cycles?.[0]?.on_time || raw.start_time || source.start_time\r\n  const powerOffCandidate = source.power_cycles?.[source.power_cycles?.length - 1]?.off_time\r\n  const surgeryStart = raw.start_time || source.start_time\r\n  const surgeryEnd = raw.end_time || source.end_time\r\n  const powerOff = powerOffCandidate ?? null\r\n  const previousSurgeryEnd = raw.previous_end_time || raw.previous_surgery_end_time ||\r\n    source.previous_end_time || source.prev_surgery_end_time || source.last_surgery_end_time\r\n\r\n  // 只计算arms数据（这是可视化必需的）\r\n  const arms = Array.isArray(source.arms)\r\n    ? source.arms.map((a, idx) => {\r\n        const name = a.name || `${a.arm_id ?? idx + 1}号臂`.trim()\r\n        const segments = Array.isArray(a.instrument_usage)\r\n          ? a.instrument_usage\r\n              .filter(u => u && u.start_time && u.end_time)\r\n              .map((u) => ({\r\n                start: u.start_time,\r\n                end: u.end_time,\r\n                udi: u.udi,\r\n                tool_type: u.tool_type\r\n              }))\r\n          : []\r\n        return { name, segments }\r\n      })\r\n    : []\r\n\r\n  const stateMachine = Array.isArray(source.state_machine_changes)\r\n    ? source.state_machine_changes.map(ch => ({ time: ch.time, state: ch.stateName || String(ch.state) }))\r\n    : Array.isArray(source.state_machine) ? source.state_machine : []\r\n  const networkLatency = Array.isArray(source.network_latency_data) ? source.network_latency_data : []\r\n\r\n  // 返回：保留所有原始数据 + 添加必要的计算字段\r\n  return {\r\n    ...raw,  // 保留所有原始字段\r\n    timeline: { powerOn, surgeryStart, surgeryEnd, powerOff, previousSurgeryEnd },\r\n    arms,\r\n    state_machine: stateMachine,\r\n    network_latency_data: networkLatency,\r\n    // 确保关键字段存在\r\n    is_remote: !!(raw.is_remote || source.is_remote_surgery || raw.is_remote_surgery),\r\n    surgery_id: raw.surgery_id || source.surgery_id || null,\r\n    start_time: raw.start_time || source.start_time || null,\r\n    end_time: raw.end_time || source.end_time || null\r\n  }\r\n}\r\n\r\n// 时间转换工具函数\r\nexport function toMs(v) {\r\n  if (v === null || v === undefined || v === '') return NaN\r\n  if (typeof v === 'number' && Number.isFinite(v)) return v\r\n  const t = new Date(v).getTime()\r\n  return Number.isFinite(t) ? t : NaN\r\n}\r\n","\n<template>\n  <div class=\"viz-page\">\n    <!-- 顶部标题卡片 -->\n    <el-card class=\"title-card\">\n          <div class=\"surgery-info\">\n        <span class=\"surgery-id\">{{ meta.surgery_id || '-' }}</span>\n        <el-tag v-if=\"meta.is_remote\" color=\"green\" size=\"small\" class=\"surgery-tag remote-tag\">远程手术</el-tag>\n        <el-tag v-if=\"meta.is_fault\" color=\"red\" size=\"small\" class=\"surgery-tag fault-tag\">故障手术</el-tag>\n          </div>\n    </el-card>\n\n    <!-- 手术概况卡片 -->\n    <el-card class=\"overview-card\">\n      <div class=\"section-header\">\n        手术概况\n        <div class=\"zoom-controls\">\n          <button @click=\"resetZoom\" class=\"zoom-reset-btn\">重置缩放</button>\n          <span class=\"zoom-level\">{{ Math.round(zoomLevel * 100) }}%</span>\n        </div>\n      </div>\n        <div \n          class=\"timeline-container\"\n          @wheel.prevent=\"handleWheel\"\n        >\n        <!-- 表格头部 -->\n        <div class=\"timeline-header\">\n          <div class=\"arm-column\">活动名称</div>\n          <div class=\"time-columns\" :style=\"getTimeColumnsStyle()\">\n            <div \n              v-for=\"(_, index) in Array(getTotalHours()).fill(0)\" \n              :key=\"index\" \n              class=\"time-column\"\n              :style=\"getTimeColumnStyle()\"\n            >\n              {{ getTimeColumnText(index) }}\n            </div>\n          </div>\n        </div>\n        \n        <!-- SVG覆盖层 -->\n        <svg \n          class=\"timeline-overlay\" \n          :style=\"getOverlayStyle()\"\n          @click=\"handleOverlayClick\"\n        >\n          \n          <!-- 器械使用颜色条 -->\n          <g v-for=\"arm in armsData\" :key=\"`arm-${arm.arm_id}`\">\n            <g v-for=\"segment in getAllSegmentsForArm(arm)\" :key=\"`segment-${segment.udi}-${segment.start}`\">\n              <!-- 器械段矩形 -->\n            <rect \n              :x=\"getSegmentX(segment)\"\n              :y=\"getSegmentY(arm, segment)\"\n              :width=\"getSegmentWidth(segment)\"\n              :height=\"getSegmentHeight()\"\n                :fill=\"getArmColor(arm.arm_id)\"\n                :stroke=\"getStrokeColor(arm.arm_id)\"\n              stroke-width=\"2\"\n              rx=\"3\"\n              ry=\"3\"\n              class=\"instrument-segment-svg\"\n              @click=\"handleSegmentClick(segment, $event)\"\n              @mouseenter=\"handleSegmentHover(segment, $event)\"\n              @mousemove=\"handleMouseMove($event)\"\n              @mouseleave=\"handleSegmentLeave(segment, $event)\"\n            />\n              <!-- 器械类型文本 -->\n              <text \n                v-if=\"shouldShowInstrumentText(segment)\"\n                :x=\"getSegmentTextX(segment)\"\n                :y=\"getSegmentTextY(arm, segment)\"\n                text-anchor=\"middle\"\n                class=\"instrument-text\"\n                :fill=\"getTextColor(arm.arm_id)\"\n                @click=\"handleSegmentClick(segment, $event)\"\n                @mouseenter=\"handleSegmentHover(segment, $event)\"\n                @mousemove=\"handleMouseMove($event)\"\n                @mouseleave=\"handleSegmentLeave(segment, $event)\"\n              >\n                {{ getInstrumentDisplayName(segment) }}\n              </text>\n            </g>\n          </g>\n          \n        </svg>\n        \n        <!-- 表格主体 -->\n        <div class=\"timeline-body\">\n          <div \n            v-for=\"arm in armsData\" \n            :key=\"arm.arm_id\" \n            class=\"timeline-row\"\n          >\n            <div class=\"arm-cell\">{{ arm.name }}</div>\n            <div class=\"time-cells\" :style=\"getTimeCellsStyle()\">\n              <div \n                v-for=\"(_, index) in Array(getTotalHours()).fill(0)\" \n                :key=\"index\" \n                class=\"time-grid\"\n                :class=\"{ 'has-instrument': hasInstrumentInHour(arm, index) }\"\n                :style=\"getTimeGridStyle()\"\n              >\n                <!-- 时间线事件标记 -->\n                <div \n                  v-if=\"arm.arm_id === 0 && hasEventInHour(index)\"\n                  class=\"timeline-event-container\"\n                  :style=\"getEventStyle(index)\"\n                >\n                  <!-- 事件符号和标签 -->\n                  <div \n                    v-for=\"(event, eventIndex) in getEventsInHour(index)\"\n                    :key=\"`${event.type}-${eventIndex}`\"\n                    class=\"timeline-event\"\n                    :class=\"getEventClass(event.type)\"\n                    :style=\"getSingleEventStyle(event, index)\"\n                    :data-merged=\"event.isMerged\"\n                    @mouseenter=\"handleEventHover(event, $event)\"\n                    @mousemove=\"handleMouseMove($event)\"\n                    @mouseleave=\"handleEventLeave\"\n                  >\n                    <!-- 事件符号 -->\n                    <div class=\"event-symbol\" :class=\"getSymbolClass(event.symbol)\">\n                      <div v-if=\"event.symbol === 'circle'\" class=\"circle-shape\"></div>\n                      <div v-else class=\"square-shape\"></div>\n                    </div>\n                    <!-- 事件名称标签 -->\n                    <div class=\"event-label\">{{ event.name }}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 图表区域：手术状态机变化和网络延迟情况 -->\n    <div class=\"charts-row\" v-if=\"showCharts && (hasStateMachineData || hasNetworkLatencyData)\">\n      <!-- 手术状态机变化卡片 -->\n      <el-card class=\"state-machine-card\" v-if=\"hasStateMachineData\">\n        <div class=\"section-header\">\n          手术状态机变化\n        </div>\n        <div class=\"chart-container\">\n          <TimeSeriesChart\n            :series-data=\"stateMachineChartData\"\n            :series-name=\"'状态机'\"\n            :height=\"300\"\n            :width=\"600\"\n            :y-axis-format=\"'integer'\"\n            :show-range-labels=\"true\"\n          />\n        </div>\n      </el-card>\n\n      <!-- 网络延迟情况卡片 -->\n      <el-card class=\"network-latency-card\" v-if=\"meta.is_remote && hasNetworkLatencyData\">\n        <div class=\"section-header\">\n          网络延迟情况\n        </div>\n        <div class=\"chart-container\">\n          <TimeSeriesChart\n            :series-data=\"networkLatencyChartData\"\n            :series-name=\"'网络延迟(ms)'\"\n            :height=\"300\"\n            :width=\"600\"\n            :y-axis-format=\"'decimal'\"\n            :show-range-labels=\"true\"\n          />\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 安全报警记录卡片 -->\n    <el-card class=\"faults-card\" v-if=\"showCharts && meta.is_fault && faultRecords.length > 0\">\n      <div class=\"section-header\">\n        安全报警记录\n      </div>\n      <div class=\"faults-container\">\n        <el-table \n          :data=\"faultRecords\" \n          stripe \n          border \n          size=\"small\"\n          :max-height=\"400\"\n          class=\"faults-table\"\n        >\n          <el-table-column prop=\"timestamp\" label=\"故障发生时间\" width=\"180\" align=\"center\">\n            <template #default=\"{ row }\">\n              <span class=\"fault-time\">{{ formatFaultTime(row.timestamp) }}</span>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"error_code\" label=\"故障码\" width=\"120\" align=\"center\">\n            <template #default=\"{ row }\">\n              <el-tag :type=\"getFaultType(row.error_code)\" size=\"small\">\n                {{ row.error_code }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"explanation\" label=\"故障释义\" min-width=\"200\">\n            <template #default=\"{ row }\">\n              <span class=\"fault-explanation\">{{ row.explanation || '无详细说明' }}</span>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\" align=\"center\">\n            <template #default=\"{ row }\">\n              <el-tag \n                :type=\"row.status === '已处理' ? 'success' : 'danger'\" \n                size=\"small\"\n                effect=\"dark\"\n              >\n                {{ row.status }}\n              </el-tag>\n            </template>\n          </el-table-column>\n        </el-table>\n        \n        <div class=\"faults-summary\" v-if=\"faultRecords.length > 0\">\n          <el-alert\n            :title=\"`共发现 ${faultRecords.length} 个故障，其中 ${getProcessedCount()} 个已处理，${getUnprocessedCount()} 个未处理`\"\n            type=\"info\"\n            :closable=\"false\"\n            show-icon\n          />\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 全局Tooltip，放在页面根级别避免被容器裁剪 -->\n    <div \n      v-if=\"hoveredSegment\"\n      class=\"custom-tooltip\"\n      :style=\"getTooltipStyle()\"\n    >\n      <div class=\"tooltip-title\">{{ getSegmentTooltipTitle(hoveredSegment) }}</div>\n      <div class=\"tooltip-content\">\n        <div>UDI码: {{ hoveredSegment.udi || '无UDI' }}</div>\n        <div>使用时长: {{ getSegmentDuration(hoveredSegment) }}分钟</div>\n        <div>安装时刻: {{ formatSegmentTime(hoveredSegment.install_time || hoveredSegment.start_time) }}</div>\n        <div>拔下时刻: {{ formatSegmentTime(hoveredSegment.remove_time || hoveredSegment.end_time) }}</div>\n      </div>\n    </div>\n    \n    <!-- 手术事件Tooltip，与器械一致样式 -->\n    <div \n      v-if=\"hoveredEvent\" \n      class=\"custom-tooltip\" \n      :style=\"getTooltipStyle()\"\n    >\n      <div class=\"tooltip-title\">{{ hoveredEvent.isMerged ? `合并事件 (${hoveredEvent.allEvents.length}个)` : hoveredEvent.name }}</div>\n      <div class=\"tooltip-content\">\n        <div v-if=\"hoveredEvent.isMerged && hoveredEvent.allEvents\">\n          <div v-for=\"event in hoveredEvent.allEvents\" :key=\"event.time\" class=\"event-item\">\n            <div class=\"event-name\">{{ event.name }}</div>\n            <div class=\"event-time\">{{ formatEventTime(event) }}</div>\n          </div>\n        </div>\n        <div v-else>\n          <div>时间: {{ formatEventTime(hoveredEvent) }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, onMounted, onBeforeUnmount, nextTick } from 'vue'\nimport { useRoute } from 'vue-router'\nimport api from '../api'\nimport { normalizeSurgeryData as normalize } from '../utils/visualizationConfig'\nimport { formatTime, loadServerTimezone } from '../utils/timeFormatter'\nimport TimeSeriesChart from '../components/TimeSeriesChart.vue'\n\nexport default {\n  name: 'SurgeryVisualization',\n  components: {\n    TimeSeriesChart\n  },\n  setup() {\n    // 移除不需要的图表引用\n\n    const loading = ref(false)\n    const surgeryIdInput = ref('')\n    const route = useRoute()\n\n    const meta = reactive({ surgery_id: null, start_time: null, end_time: null, is_remote: false, is_fault: false })\n    const alertRows = ref([])\n    const showAllAlerts = ref(false)\n    const currentData = ref(null)\n    const armsData = ref([\n      { name: '手术时间线', arm_id: 0, segments: [] },\n      { name: '1号臂', arm_id: 1, segments: [] },\n      { name: '2号臂', arm_id: 2, segments: [] },\n      { name: '3号臂', arm_id: 3, segments: [] },\n      { name: '4号臂', arm_id: 4, segments: [] }\n    ])\n    \n    // 时间线事件数据\n    const timelineEvents = ref([])\n    \n    // 时间基准：第一次开机时间往前推1小时\n    const timelineBaseTime = ref(null)\n    \n    // 当前悬停的器械段\n    const hoveredSegment = ref(null)\n    const hoveredEvent = ref(null)\n    const tooltipPosition = ref({ x: 0, y: 0 })\n    \n    // 缩放控制\n    const zoomLevel = ref(1) // 缩放级别，1为正常大小（撑满容器）\n    const minZoom = 1 // 最小缩放（默认视图，撑满容器）\n    const maxZoom = 5 // 最大缩放\n    \n    // 图表相关\n    const showCharts = ref(false)\n    const hasStateMachineData = ref(false)\n    const hasNetworkLatencyData = ref(false)\n    const stateMachineChartData = ref([])\n    const networkLatencyChartData = ref([])\n    \n    // 故障记录相关\n    const faultRecords = ref([])\n    \n    // 计算需要显示的小时数（基于所有事件的实际小时数范围）\n    const getTotalHours = () => {\n      if (timelineEvents.value.length === 0) return 24 // 默认24小时\n      \n      let minHour = Infinity\n      let maxHour = -Infinity\n      \n      // 遍历所有事件，找到最小和最大小时数\n      timelineEvents.value.forEach(event => {\n        const eventHour = getHourFromTime(event.time)\n        if (eventHour !== null && eventHour !== undefined) {\n          minHour = Math.min(minHour, eventHour)\n          maxHour = Math.max(maxHour, eventHour)\n        }\n      })\n      \n      // 如果没有有效事件，返回默认值\n      if (minHour === Infinity || maxHour === -Infinity) return 24\n      \n      // 前后各扩展1小时：(最早事件-1h) 到 (最晚事件+1h)\n      const startHour = minHour - 1\n      const endHour = maxHour + 1\n      const totalHours = endHour - startHour + 1\n      \n      // 最多显示48小时，不设置最小限制\n      return Math.min(48, totalHours)\n    }\n    \n    // 获取表头起始小时（最早事件-1）\n    const getTableStartHour = () => {\n      if (timelineEvents.value.length === 0) return 0\n      \n      let minHour = Infinity\n      timelineEvents.value.forEach(event => {\n        const eventHour = getHourFromTime(event.time)\n        if (eventHour !== null && eventHour !== undefined) {\n          minHour = Math.min(minHour, eventHour)\n        }\n      })\n      \n      return minHour === Infinity ? 0 : minHour - 1\n    }\n    \n    // 获取实际的小时数范围（用于调试）\n    const getHourRange = () => {\n      if (timelineEvents.value.length === 0) return { start: 0, end: 23 }\n      \n      let minHour = Infinity\n      let maxHour = -Infinity\n      \n      timelineEvents.value.forEach(event => {\n        const eventHour = getHourFromTime(event.time)\n        if (eventHour !== null && eventHour !== undefined) {\n          minHour = Math.min(minHour, eventHour)\n          maxHour = Math.max(maxHour, eventHour)\n        }\n      })\n      \n      if (minHour === Infinity || maxHour === -Infinity) return { start: 0, end: 23 }\n      \n      return {\n        start: minHour - 1,\n        end: maxHour + 1\n      }\n    }\n    \n    // 获取小时数偏移量（用于表头显示）\n    const getHourOffset = () => {\n      if (timelineEvents.value.length === 0) return 0\n      \n      let minHour = Infinity\n      timelineEvents.value.forEach(event => {\n        const eventHour = getHourFromTime(event.time)\n        if (eventHour !== null && eventHour !== undefined) {\n          minHour = Math.min(minHour, eventHour)\n        }\n      })\n      \n      // 返回最早事件前1小时\n      return minHour === Infinity ? 0 : minHour - 1\n    }\n\n    // 检查某个小时是否有器械使用\n    const hasInstrumentInHour = (arm, hour) => {\n      if (arm.arm_id === 0) return false // 手术时间线不显示器械\n      \n      // 获取表头起始小时\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hour\n      \n      const hasInstrument = arm.segments.some(segment => {\n        const startHour = getHourFromTime(segment.start_time || segment.start || segment.install_time)\n        const endHour = getHourFromTime(segment.end_time || segment.end || segment.remove_time)\n        return actualHour >= startHour && actualHour <= endHour\n      })\n      \n      \n      return hasInstrument\n    }\n    \n    // 获取某个小时内的器械使用段\n    const getSegmentsInHour = (arm, hour) => {\n      if (arm.arm_id === 0) return []\n      \n      // 获取表头起始小时\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hour\n      \n      const segments = arm.segments.filter(segment => {\n        const startHour = getHourFromTime(segment.start_time || segment.start || segment.install_time)\n        const endHour = getHourFromTime(segment.end_time || segment.end || segment.remove_time)\n        \n        \n        return actualHour >= startHour && actualHour <= endHour\n      })\n      \n      \n      return segments\n    }\n    \n    // 获取器械区块样式\n    const getSegmentStyle = (segment, hour) => {\n      // 获取表头起始小时\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hour\n      \n      // 计算在小时内的位置和宽度\n      const hourStart = actualHour * 60 // 分钟\n      const hourEnd = (actualHour + 1) * 60\n      const segmentStart = getMinutesFromTime(segment.start_time || segment.start || segment.install_time)\n      const segmentEnd = getMinutesFromTime(segment.end_time || segment.end || segment.remove_time)\n      \n      const left = Math.max(0, (segmentStart - hourStart) / 60 * 100)\n      const right = Math.max(0, (hourEnd - segmentEnd) / 60 * 100)\n      \n      \n      return {\n        left: `${left}%`,\n        right: `${right}%`,\n        backgroundColor: getInstrumentColor(segment.tool_type || segment.instrument_type || ''),\n        zIndex: 10 // 确保器械使用区块在时间线事件之上\n      }\n    }\n    \n    // 获取器械区块提示信息\n    const getSegmentTooltip = (segment) => {\n      const duration = calculateDuration(segment.start || segment.install_time || segment.start_time, \n                                       segment.end || segment.remove_time || segment.end_time)\n      const toolType = segment.tool_type || segment.instrument_type || '未知器械'\n      const udi = segment.udi || '无UDI'\n      \n      // 转换UTC时间为本地时间显示\n      const installTime = segment.install_time || segment.start_time\n      const removeTime = segment.remove_time || segment.end_time\n      \n      const formatTime = (timeStr) => {\n        if (!timeStr) return '未知'\n        const localTime = getLocalTime(timeStr)\n        if (!localTime) return '未知'\n        return localTime.toLocaleString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        })\n      }\n      \n      return `${toolType}\\n\\nUDI码: ${udi}\\n使用时长: ${duration}分钟\\n安装时刻: ${formatTime(installTime)}\\n拔下时刻: ${formatTime(removeTime)}`\n    }\n    \n    // ========== SVG覆盖层相关函数 ==========\n    \n    // 获取SVG覆盖层样式\n    const getOverlayStyle = () => {\n      if (zoomLevel.value === 1) {\n        // 默认视图：撑满容器宽度\n      return {\n        position: 'absolute',\n        top: '0',\n        left: '120px', // 偏移arm-column的宽度\n        width: 'calc(100% - 120px)', // 减去arm-column宽度\n        height: '100%',\n        pointerEvents: 'auto',\n          zIndex: '20'\n        }\n      } else {\n        // 缩放视图：与HTML表格缩放保持一致\n        const totalHours = getTotalHours()\n        const containerWidth = window.innerWidth - 120\n        const baseColumnWidth = containerWidth / totalHours\n        const scaledColumnWidth = baseColumnWidth * zoomLevel.value\n        const scaledWidth = scaledColumnWidth * totalHours\n        \n        return {\n          position: 'absolute',\n          top: '0',\n          left: '120px',\n          width: `${scaledWidth}px`,\n          height: '100%',\n          pointerEvents: 'auto',\n          zIndex: '20'\n        }\n      }\n    }\n    \n    // 获取所有器械使用段（用于SVG显示）\n    const getAllSegmentsForArm = (arm) => {\n      if (arm.arm_id === 0) return [] // 手术时间线不显示器械\n      \n      \n      return arm.segments || []\n    }\n    \n    // 获取器械段的X坐标（使用百分比定位，支持跨天）\n    const getSegmentX = (segment) => {\n      const startTime = segment.start_time || segment.start || segment.install_time\n      const localTime = getLocalTime(startTime)\n      if (!localTime) return 0\n      \n      \n      // 使用本地时间计算位置\n      const localHour = getHourFromTime(startTime)\n      const localMinute = getMinutesFromTime(startTime)\n      \n      // 获取表格起始小时\n      const tableStartHour = getTableStartHour()\n      \n      // 计算器械在时间轴中的位置（相对于单元格）\n      const hourIndex = localHour - tableStartHour\n      const minuteOffset = localMinute / 60 // 分钟偏移量（0-1之间）\n      \n      // 计算总的小时数\n      const totalHours = getTotalHours()\n      \n      // 计算器械位置：基于SVG实际宽度\n      // 器械时间16:32 -> 在16点单元格内，距离16:00有32分钟\n      // 位置 = 单元格索引 + 单元格内偏移\n      const timelineContainer = document.querySelector('.timeline-container')\n      let containerWidth\n      \n      if (zoomLevel.value === 1) {\n        // 默认视图：使用容器实际宽度\n        containerWidth = timelineContainer ? timelineContainer.offsetWidth - 120 : window.innerWidth - 120\n      } else {\n        // 缩放视图：使用缩放后的宽度\n        const baseContainerWidth = window.innerWidth - 120\n        const baseColumnWidth = baseContainerWidth / totalHours\n        const scaledColumnWidth = baseColumnWidth * zoomLevel.value\n        containerWidth = scaledColumnWidth * totalHours\n      }\n      \n      // 计算在时间轴中的百分比位置\n      const totalPosition = (hourIndex + minuteOffset) / totalHours\n      const percentagePosition = totalPosition * 100\n      \n      // 将百分比转换为像素位置\n      const x = (percentagePosition / 100) * containerWidth\n      \n      return Math.max(0, x)\n    }\n    \n    // 获取器械段的Y坐标\n    const getSegmentY = (arm, segment) => {\n      // 计算臂的行索引\n      const armIndex = armsData.value.findIndex(a => a.arm_id === arm.arm_id)\n      const rowHeight = 60 // 每行高度（从80调整为60）\n      const headerHeight = 50 // 表头高度\n      \n      return headerHeight + (armIndex * rowHeight) + (rowHeight - 32) / 2 // 垂直居中\n    }\n    \n    // 获取器械段的宽度\n    const getSegmentWidth = (segment) => {\n      const startTime = segment.start_time || segment.start || segment.install_time\n      const endTime = segment.end_time || segment.end || segment.remove_time\n      \n      const startLocalTime = getLocalTime(startTime)\n      const endLocalTime = getLocalTime(endTime)\n      \n      if (!startLocalTime || !endLocalTime) return 10\n      \n      // 计算时间跨度（分钟）\n      const durationMs = endLocalTime.getTime() - startLocalTime.getTime()\n      const durationMinutes = durationMs / (1000 * 60)\n      \n      // 对于极短的器械使用时间（小于1分钟），设置最小可见宽度\n      if (durationMinutes < 1) {\n        return Math.max(1, 2) // 最小宽度\n      }\n      \n      // 基于时间跨度计算宽度\n      // 获取容器宽度和总小时数来计算每分钟的像素宽度\n      const totalHours = getTotalHours()\n      let containerWidth\n      \n      if (zoomLevel.value === 1) {\n        // 默认视图：使用容器实际宽度\n        const timelineContainer = document.querySelector('.timeline-container')\n        containerWidth = timelineContainer ? timelineContainer.offsetWidth - 120 : window.innerWidth - 120\n      } else {\n        // 缩放视图：使用缩放后的宽度\n        const baseContainerWidth = window.innerWidth - 120\n        const baseColumnWidth = baseContainerWidth / totalHours\n        const scaledColumnWidth = baseColumnWidth * zoomLevel.value\n        containerWidth = scaledColumnWidth * totalHours\n      }\n      \n      const hourWidth = containerWidth / totalHours\n      const minuteWidth = hourWidth / 60 // 每分钟的像素宽度\n      \n      // 宽度 = 时间跨度（分钟） * 每分钟像素宽度\n      const width = durationMinutes * minuteWidth\n      \n      return Math.max(3, width)\n    }\n    \n    // 获取器械段的结束X坐标（使用百分比定位，支持跨天）\n    const getSegmentEndX = (segment) => {\n      const endTime = segment.end_time || segment.end || segment.remove_time\n      const localTime = getLocalTime(endTime)\n      if (!localTime) return 0\n      \n      // 使用本地时间计算位置\n      const localHour = getHourFromTime(endTime)\n      const localMinute = getMinutesFromTime(endTime)\n      \n      // 获取表格起始小时\n      const tableStartHour = getTableStartHour()\n      \n      // 计算器械结束在时间轴中的位置（相对于单元格）\n      const hourIndex = localHour - tableStartHour\n      const minuteOffset = localMinute / 60 // 分钟偏移量（0-1之间）\n      \n      // 计算总的小时数\n      const totalHours = getTotalHours()\n      \n      // 计算器械结束位置：基于SVG实际宽度\n      // 器械结束时间18:17 -> 在18点单元格内，距离18:00有17分钟\n      // 位置 = 单元格索引 + 单元格内偏移\n      const timelineContainer = document.querySelector('.timeline-container')\n      let containerWidth\n      \n      if (zoomLevel.value === 1) {\n        // 默认视图：使用容器实际宽度\n        containerWidth = timelineContainer ? timelineContainer.offsetWidth - 120 : window.innerWidth - 120\n      } else {\n        // 缩放视图：使用缩放后的宽度\n        const baseContainerWidth = window.innerWidth - 120\n        const baseColumnWidth = baseContainerWidth / totalHours\n        const scaledColumnWidth = baseColumnWidth * zoomLevel.value\n        containerWidth = scaledColumnWidth * totalHours\n      }\n      \n      // 计算在时间轴中的百分比位置\n      const totalPosition = (hourIndex + minuteOffset) / totalHours\n      const percentagePosition = totalPosition * 100\n      \n      // 将百分比转换为像素位置\n      const x = (percentagePosition / 100) * containerWidth\n      \n      return Math.max(0, x)\n    }\n    \n    // 获取器械段的高度\n    const getSegmentHeight = () => {\n      return 25// 固定高度\n    }\n    \n    \n    // 处理器械段点击\n    const handleSegmentClick = (segment, event) => {\n      event.stopPropagation()\n      // TODO: 显示抽屉\n    }\n    \n    // 处理器械段悬停\n    const handleSegmentHover = (segment, event) => {\n      hoveredSegment.value = segment\n      tooltipPosition.value = { x: event.clientX + 5, y: event.clientY - 5 }\n    }\n    \n    // 处理器械段离开\n    const handleSegmentLeave = (segment, event) => {\n      hoveredSegment.value = null\n    }\n\n    // 统一的鼠标移动处理，确保tooltip跟随鼠标\n    const handleMouseMove = (event) => {\n      tooltipPosition.value = { x: event.clientX + 5, y: event.clientY - 5 }\n    }\n\n    // 事件悬停进入/离开\n    const handleEventHover = (eventObj, event) => {\n      hoveredEvent.value = eventObj\n      tooltipPosition.value = { x: event.clientX + 5, y: event.clientY - 5 }\n    }\n    const handleEventLeave = () => { hoveredEvent.value = null }\n    \n    // 获取tooltip样式\n    const getTooltipStyle = () => {\n      return {\n        position: 'fixed',\n        left: `${tooltipPosition.value.x}px`,\n        top: `${tooltipPosition.value.y}px`,\n        zIndex: 9999\n      }\n    }\n    // 事件时间与星期格式化（与器械tooltip一致）\n    const formatEventTime = (ev) => {\n      const localTime = getLocalTime(ev?.time)\n      if (!localTime) return '未知'\n      return localTime.toLocaleString('zh-CN', {\n        year: 'numeric', month: '2-digit', day: '2-digit',\n        hour: '2-digit', minute: '2-digit', second: '2-digit'\n      })\n    }\n    const getEventWeekday = (ev) => {\n      const localTime = getLocalTime(ev?.time)\n      if (!localTime) return ''\n      return localTime.toLocaleDateString('zh-CN', { weekday: 'long' })\n    }\n    \n    // 获取器械段tooltip标题\n    const getSegmentTooltipTitle = (segment) => {\n      return segment.tool_type || segment.instrument_type || '未知器械'\n    }\n    \n    // 获取器械段使用时长\n    const getSegmentDuration = (segment) => {\n      return calculateDuration(\n        segment.start || segment.install_time || segment.start_time, \n        segment.end || segment.remove_time || segment.end_time\n      )\n    }\n    \n    // 格式化器械段时间\n    const formatSegmentTime = (timeStr) => {\n      if (!timeStr) return '未知'\n      const localTime = getLocalTime(timeStr)\n      if (!localTime) return '未知'\n      return localTime.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      })\n    }\n    \n    \n    // 处理覆盖层点击\n    const handleOverlayClick = (event) => {\n      // 如果点击的是空白区域，可以执行其他操作\n    }\n    \n    // 检查某个小时是否有时间线事件\n    const hasEventInHour = (hour) => {\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hour\n      return timelineEvents.value.some(event => {\n        const eventHour = getHourFromTime(event.time)\n        return eventHour === actualHour\n      })\n    }\n    \n    // 获取事件文本\n    const getEventText = (hour) => {\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hour\n      const events = timelineEvents.value.filter(event => {\n        const eventHour = getHourFromTime(event.time)\n        return eventHour === actualHour\n      })\n      \n      if (events.length === 1) {\n        return events[0].name\n      } else if (events.length > 1) {\n        return `${events[0].name}+${events.length - 1}`\n      }\n      return ''\n    }\n    \n    // 获取事件样式类\n    const getEventClass = (eventType) => {\n      if (eventType === 'power_on' || eventType === 'power_off') return 'timeline-event-power'\n      if (eventType === 'surgery_start' || eventType === 'surgery_end' || eventType === 'previous_end') return 'timeline-event-surgery'\n      return ''\n    }\n    \n    // 获取事件类型\n    const getEventType = (hour) => {\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hour\n      const events = timelineEvents.value.filter(event => {\n        const eventHour = getHourFromTime(event.time)\n        return eventHour === actualHour\n      })\n      \n      if (events.length > 0) {\n        return events[0].type\n      }\n      return ''\n    }\n    \n    // 获取某个小时内的所有事件\n    const getEventsInHour = (hour) => {\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hour\n      const events = timelineEvents.value.filter(event => {\n        const eventHour = getHourFromTime(event.time)\n        return eventHour === actualHour\n      })\n      \n      if (events.length === 0) return []\n      \n      // 按时间排序\n      events.sort((a, b) => {\n        const timeA = getLocalTime(a.time)?.getTime() || 0\n        const timeB = getLocalTime(b.time)?.getTime() || 0\n        return timeA - timeB\n      })\n      \n      // 基于视觉重合检测合并事件（响应缩放变化）\n      return mergeEventsByVisualOverlap(events, hour)\n    }\n    \n    // 基于视觉重合检测合并事件\n    const mergeEventsByVisualOverlap = (events, hourIndex) => {\n      if (events.length <= 1) return events\n      \n      // 获取当前容器宽度（考虑缩放）\n      const armColumnWidth = 120\n      const baseContainerWidth = window.innerWidth - armColumnWidth\n      const scaledContainerWidth = baseContainerWidth * zoomLevel.value\n      \n      // 计算每个事件的视觉位置\n      const eventPositions = events.map(event => {\n        const eventTime = getLocalTime(event.time)\n        if (!eventTime) return { event, left: 50, right: 50 }\n        \n        const eventMinute = eventTime.getMinutes()\n        const positionInHour = (eventMinute / 60) * 100\n        const leftPosition = Math.max(0, Math.min(100, positionInHour))\n        \n        // 估算标签宽度（基于显示名称长度）\n        const displayName = event.isMerged ? `+${event.allEvents.length}` : event.name\n        const baseWidth = Math.max(40, displayName.length * 8 + 16) // 每个字符约8px + 边距\n        const scaledWidth = baseWidth * zoomLevel.value\n        \n        // 计算在缩放后容器中的位置\n        const left = leftPosition\n        const right = leftPosition + (scaledWidth / scaledContainerWidth * 100)\n        \n        return { event, left, right, displayName }\n      })\n      \n      // 检测重合并合并（30px间距检测）\n      const mergedGroups = []\n      let currentGroup = [eventPositions[0]]\n      \n      for (let i = 1; i < eventPositions.length; i++) {\n        const current = eventPositions[i]\n        const lastInGroup = currentGroup[currentGroup.length - 1]\n        \n        // 计算时间差（分钟）\n        const currentTime = getLocalTime(current.event.time)\n        const lastTime = getLocalTime(lastInGroup.event.time)\n        const timeDiffMinutes = (currentTime.getTime() - lastTime.getTime()) / (1000 * 60)\n        \n        // 将时间差转换为像素间距\n        const totalHours = getTotalHours()\n        const hourCellWidth = scaledContainerWidth / totalHours\n        const minuteWidth = hourCellWidth / 60 // 每分钟的像素宽度\n        const pixelSpacing = timeDiffMinutes * minuteWidth\n        \n        // 打印调试信息\n        console.log(`🔍 事件间距检测:`, {\n          event1: lastInGroup.event.name,\n          event2: current.event.name,\n          timeDiffMinutes: timeDiffMinutes.toFixed(2) + '分钟',\n          pixelSpacing: pixelSpacing.toFixed(2) + 'px',\n          zoomLevel: zoomLevel.value.toFixed(2),\n          scaledContainerWidth: scaledContainerWidth.toFixed(2) + 'px',\n          hourCellWidth: hourCellWidth.toFixed(2) + 'px',\n          minuteWidth: minuteWidth.toFixed(2) + 'px/分钟',\n          shouldMerge: pixelSpacing < 30 ? '是' : '否'\n        })\n        \n        // 如果间距小于30px，则合并\n        if (pixelSpacing < 20) {\n          currentGroup.push(current)\n        } else {\n          // 不重合，处理当前组并开始新组\n          mergedGroups.push(processEventGroup(currentGroup))\n          currentGroup = [current]\n        }\n      }\n      \n      // 处理最后一组\n      if (currentGroup.length > 0) {\n        mergedGroups.push(processEventGroup(currentGroup))\n      }\n      \n      const result = mergedGroups.flat()\n      \n      // 打印最终合并结果\n      console.log(`📊 事件合并结果 (缩放级别: ${zoomLevel.value.toFixed(2)}):`, {\n        originalEvents: events.length,\n        finalEvents: result.length,\n        mergedEvents: result.filter(e => e.isMerged).length,\n        mergedDetails: result.filter(e => e.isMerged).map(e => ({\n          name: e.name,\n          count: e.allEvents.length,\n          events: e.allEvents.map(ev => ev.name)\n        }))\n      })\n      \n      return result\n    }\n    \n    // 处理事件组，决定是否合并显示\n    const processEventGroup = (eventGroup) => {\n      if (eventGroup.length === 1) {\n        return [eventGroup[0].event]\n      }\n      \n      // 多个事件重合，合并显示为\"+X\"格式\n      const firstEvent = eventGroup[0].event\n      return [{\n        ...firstEvent,\n        name: `+${eventGroup.length}`,\n        isMerged: true,\n        allEvents: eventGroup.map(item => item.event)\n      }]\n    }\n    \n    // 获取事件工具提示\n    const getEventTooltip = (event) => {\n      // 调试：确保事件对象存在\n      if (!event) return '事件数据不存在'\n      \n      if (event.isMerged && event.allEvents) {\n        // 合并事件的工具提示\n        const eventDetails = event.allEvents.map(e => {\n          const localTime = getLocalTime(e.time)\n          if (!localTime) return e.name\n          \n          const timeStr = localTime.toLocaleString('zh-CN', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          })\n          \n          return `${e.name}\\n时间: ${timeStr}`\n        }).join('\\n\\n')\n        \n        return `合并事件 (${event.allEvents.length}个):\\n\\n${eventDetails}`\n      }\n      \n      // 单个事件的工具提示\n      const localTime = getLocalTime(event.time)\n      if (!localTime) return `${event.name}\\n时间: 解析失败`\n      \n      const timeStr = localTime.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      })\n      \n      const weekDay = localTime.toLocaleDateString('zh-CN', { weekday: 'long' })\n      \n      return `${event.name}\\n时间: ${timeStr}\\n星期: ${weekDay}`\n    }\n    \n    // 获取符号样式类\n    const getSymbolClass = (symbol) => {\n      return symbol === 'circle' ? 'symbol-circle' : 'symbol-square'\n    }\n    \n    // 获取事件容器样式（为整个小时容器设置基础样式）\n    const getEventStyle = (hour) => {\n      return {\n        position: 'relative',\n        height: '100%',\n        width: '100%'\n      }\n    }\n    \n    // 获取单个事件的样式（精确定位，考虑时区）\n    const getSingleEventStyle = (event, hourIndex) => {\n      const startHour = getTableStartHour()\n      const actualHour = startHour + hourIndex\n      const eventHour = getHourFromTime(event.time)\n      \n      if (eventHour !== actualHour) {\n        return { display: 'none' }\n      }\n      \n      const eventTime = getLocalTime(event.time)\n      \n      if (!eventTime) {\n        return { left: '50%', transform: 'translate(-50%, -50%)' }\n      }\n      \n      // 直接使用事件时间的小时和分钟计算位置\n      const eventHourTime = eventTime.getHours()\n      const eventMinute = eventTime.getMinutes()\n      \n      // 计算在小时内的位置百分比\n      const positionInHour = (eventMinute / 60) * 100\n      const leftPosition = Math.max(0, Math.min(100, positionInHour))\n      \n      \n      return {\n        position: 'absolute',\n        left: `${leftPosition}%`,\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        zIndex: 10\n      }\n    }\n    \n    // 从时间字符串获取小时数（本地时间，支持跨天）\n    const getHourFromTime = (timeStr) => {\n      if (!timeStr) return 0\n      const localTime = getLocalTime(timeStr)\n      if (!localTime) return 0\n      \n      // 检查是否跨天\n      if (timelineBaseTime.value) {\n        const baseTime = getLocalTime(timelineBaseTime.value)\n        if (baseTime) {\n          const baseDate = baseTime.getDate()\n          const currentDate = localTime.getDate()\n          \n          // 如果日期不同，需要调整小时数\n          if (currentDate > baseDate) {\n            return localTime.getHours() + 24 // 跨天时+24小时\n          }\n        }\n      }\n      \n      return localTime.getHours()\n    }\n    \n    // 从时间字符串获取分钟数（本地时间，支持跨天）\n    const getMinutesFromTime = (timeStr) => {\n      if (!timeStr) return 0\n      const localTime = getLocalTime(timeStr)\n      if (!localTime) return 0\n      \n      // 检查是否跨天\n      if (timelineBaseTime.value) {\n        const baseTime = getLocalTime(timelineBaseTime.value)\n        if (baseTime) {\n          const baseDate = baseTime.getDate()\n          const currentDate = localTime.getDate()\n          \n          // 如果日期不同，需要调整分钟数\n          if (currentDate > baseDate) {\n            return localTime.getMinutes() + (24 * 60) // 跨天时+24小时=1440分钟\n          }\n        }\n      }\n      \n      return localTime.getMinutes()\n    }\n    \n    // 计算持续时间（分钟）\n    const calculateDuration = (startTime, endTime) => {\n      const start = toMs(startTime)\n      const end = toMs(endTime)\n      if (!Number.isFinite(start) || !Number.isFinite(end)) return 0\n      return Math.round((end - start) / 1000 / 60)\n    }\n    \n    // 获取工具臂颜色\n    const getArmColor = (armId) => {\n      switch (armId) {\n        case 1: return '#2752F1E5'  // 1号臂 - 蓝色\n        case 2: return '#30B33B'  // 2号臂 - 绿色\n        case 3: return '#FEBB0F99'  // 3号臂 - 金色\n        case 4: return '#FF6347'  // 4号臂 - 橙红色\n        default: return '#722ed1' // 默认颜色\n      }\n    }\n    \n    // 获取文本颜色（与背景色形成对比）\n    const getTextColor = (armId) => {\n      switch (armId) {\n        case 1: return '#FFFFFF'  // 1号臂 - 白色文字\n        case 2: return '#FFFFFF'  // 2号臂 - 白色文字\n        case 3: return '#000000'  // 3号臂 - 黑色文字（金色背景）\n        case 4: return '#FFFFFF'  // 4号臂 - 白色文字\n        default: return '#FFFFFF' // 默认白色\n      }\n    }\n    \n    // 获取线框颜色（比背景色更深的颜色）\n    const getStrokeColor = (armId) => {\n      switch (armId) {\n        case 1: return '#0000001A'  // 1号臂 - 深蓝色线框\n        case 2: return '#0000001A'  // 2号臂 - 深绿色线框\n        case 3: return '#0000001A'  // 3号臂 - 深金色线框\n        case 4: return '#0000001A'  // 4号臂 - 深橙红色线框\n        default: return '#4A148C' // 默认深紫色线框\n      }\n    }\n    \n    // 判断是否应该显示器械文本\n    const shouldShowInstrumentText = (segment) => {\n      const width = getSegmentWidth(segment)\n      // 只有当宽度大于60像素时才显示文本\n      return width > 60\n    }\n    \n    // 获取器械段文本的X坐标\n    const getSegmentTextX = (segment) => {\n      const startX = getSegmentX(segment)\n      const width = getSegmentWidth(segment)\n      return startX + width / 2 // 文本居中\n    }\n    \n    // 获取器械段文本的Y坐标\n    const getSegmentTextY = (arm, segment) => {\n      const segmentY = getSegmentY(arm, segment)\n      const height = getSegmentHeight()\n      return segmentY + height / 2 + 4 // 文本垂直居中，稍微向下偏移\n    }\n    \n    // 获取器械显示名称\n    const getInstrumentDisplayName = (segment) => {\n      const toolType = segment.tool_type || segment.instrument_type || ''\n      if (!toolType) return '未知器械'\n      \n      // 显示完整的器械名称，不进行简写\n      return toolType\n    }\n    \n    // 获取器械颜色（保留原函数，用于其他用途）\n    const getInstrumentColor = (toolType) => {\n      if (!toolType) return '#722ed1'\n      if (toolType.includes('刀具') || toolType.includes('剪刀')) return '#ff4d4f'\n      if (toolType.includes('摄像头') || toolType.includes('内窥镜')) return '#1890ff'\n      if (toolType.includes('镊子') || toolType.includes('钳子')) return '#52c41a'\n      if (toolType.includes('缝合器')) return '#fa8c16'\n      if (toolType.includes('持针')) return '#13c2c2'\n      if (toolType.includes('抓钳')) return '#eb2f96'\n      return '#722ed1'\n    }\n    \n    // 获取时间列显示文本（显示实际小时数，支持跨天显示）\n    const getTimeColumnText = (hour) => {\n      if (!timelineBaseTime.value) return '00:00'\n      \n      // 计算相对于时间基准的小时数\n      const baseTime = getLocalTime(timelineBaseTime.value)\n      if (!baseTime) return '00:00'\n      \n      // 计算当前小时的实际时间\n      const currentTime = new Date(baseTime.getTime() + hour * 60 * 60 * 1000)\n      const actualHour = currentTime.getHours()\n      \n      // 检查是否跨天\n      const baseDate = baseTime.getDate()\n      const currentDate = currentTime.getDate()\n      \n      if (currentDate > baseDate) {\n        // 跨天了，显示 (xx:00+1) 格式\n        return `(${String(actualHour).padStart(2, '0')}:00+1)`\n      } else {\n        // 同一天，显示正常格式\n      return `${String(actualHour).padStart(2, '0')}:00`\n      }\n    }\n\n    // 移除旧的 ECharts 初始化代码，现在使用纯 CSS 表格布局\n\n    const toMs = (v) => {\n      if (v === null || v === undefined || v === '') return NaN\n      if (typeof v === 'number' && Number.isFinite(v)) return v\n      if (typeof v === 'string') {\n        let s = v.trim()\n        // 处理UTC时间格式，确保正确解析\n        if (/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(s)) {\n          // 如果字符串没有时区信息，假设为UTC时间\n          if (!s.includes('Z') && !s.includes('+') && !s.includes('-', 10)) {\n            s = s.replace(' ', 'T') + 'Z' // 添加UTC标识\n          } else {\n          s = s.replace(' ', 'T')\n          }\n        }\n        const tParsed = Date.parse(s)\n        return Number.isFinite(tParsed) ? tParsed : NaN\n      }\n      const t = new Date(v).getTime()\n      return Number.isFinite(t) ? t : NaN\n    }\n    \n    // 获取本地时间（考虑时区转换）\n    const getLocalTime = (utcTimeStr) => {\n      if (!utcTimeStr) return null\n      const utcTime = toMs(utcTimeStr)\n      if (!Number.isFinite(utcTime)) return null\n      \n      // 创建本地时间对象（自动处理时区转换）\n      const localDate = new Date(utcTime)\n      return localDate\n    }\n\n    const renderTimeline = (data) => {\n      \n      // 直接从data中读取arms数据\n      const arms = Array.isArray(data?.arms) ? data.arms : []\n      \n      \n      // 处理arms数据，确保每个arm有正确的segments\n      const processedArms = arms.map((arm, index) => {\n        const armId = arm.arm_id || (index + 1)\n        const armName = arm.name || `${armId}号臂`\n        const segments = Array.isArray(arm.instrument_usage) ? arm.instrument_usage : []\n        \n        \n        return {\n          name: armName,\n          arm_id: armId,\n          segments: segments\n        }\n      })\n      \n      // 确保至少有4个工具臂，即使没有数据\n      const allArms = []\n      for (let i = 1; i <= 4; i++) {\n        const existingArm = processedArms.find(arm => arm.arm_id === i)\n        if (existingArm) {\n          allArms.push(existingArm)\n      } else {\n          allArms.push({\n            name: `${i}号臂`,\n            arm_id: i,\n            segments: []\n          })\n        }\n      }\n      \n      // 更新armsData，手术时间线在最前面\n      armsData.value = [\n        { name: '手术时间线', arm_id: 0, segments: [] },\n        ...allArms\n      ]\n      \n      \n      \n      // 处理时间线事件\n      const events = []\n      const powerCycles = data?.power_cycles || []\n      \n      // 处理所有开机和关机事件\n      powerCycles.forEach((cycle, index) => {\n        if (cycle.on_time) {\n          events.push({ \n            time: cycle.on_time, \n            name: `开机${index + 1}`, \n            type: 'power_on', \n            symbol: 'square' \n          })\n        }\n        if (cycle.off_time) {\n          events.push({ \n            time: cycle.off_time, \n            name: `关机${index + 1}`, \n            type: 'power_off', \n            symbol: 'square' \n          })\n        }\n      })\n      \n      // 获取第一次开机时间（用于设置时间基准）\n      const powerOnTime = powerCycles.length > 0 ? powerCycles[0]?.on_time : null\n      \n      const surgeryStart = data?.surgeryStart || data?.start_time\n      const surgeryEnd = data?.surgeryEnd || data?.end_time\n      const previousSurgeryEnd = data?.previousSurgeryEnd || data?.timeline?.previousSurgeryEnd\n      \n      // 设置时间基准：第一次开机时间往前推1小时（使用解析后的本地时间）\n      if (powerOnTime) {\n        const powerOnDate = getLocalTime(powerOnTime)\n        if (powerOnDate) {\n          const baseTime = new Date(powerOnDate.getTime() - 60 * 60 * 1000) // 往前推1小时\n          timelineBaseTime.value = baseTime.toISOString()\n        }\n      } else {\n        // 如果没有开机时间，使用手术开始时间作为基准\n        const fallbackTime = surgeryStart || new Date()\n        const baseTime = getLocalTime(fallbackTime) || new Date(fallbackTime)\n        timelineBaseTime.value = baseTime.toISOString()\n      }\n      \n      // 添加其他重要事件\n      if (previousSurgeryEnd) {\n        events.push({ time: previousSurgeryEnd, name: '上一台手术结束', type: 'previous_end', symbol: 'circle' })\n      }\n      if (surgeryStart) {\n        events.push({ time: surgeryStart, name: '手术开始', type: 'surgery_start', symbol: 'circle' })\n      }\n      if (surgeryEnd) {\n        events.push({ time: surgeryEnd, name: '手术结束', type: 'surgery_end', symbol: 'circle' })\n      }\n      \n      timelineEvents.value = events\n      \n      \n    }\n\n    // 移除旧的 ECharts 相关代码，现在使用纯 CSS 表格布局\n\n    // 移除不需要的renderState和renderLatency函数\n\n    // 移除不需要的renderTable函数\n\n    const renderAll = (data) => {\n      // 直接使用数据库原始字段\n      meta.surgery_id = data.surgery_id || null\n      meta.start_time = data.start_time || null\n      meta.end_time = data.end_time || null\n      \n      // 使用根级别的标签状态字段，如果不存在则使用默认值\n      meta.is_remote = data.is_remote === true\n      meta.is_fault = data.has_fault === true || false // 如果has_fault不存在，默认为false\n      \n      currentData.value = data\n      renderTimeline(data)\n      renderAlerts(data)\n      \n      // 检查是否有图表数据\n      const surgeryStatsForCharts = data.surgery_stats || {}\n      hasStateMachineData.value = !!(surgeryStatsForCharts.state_machine)\n      hasNetworkLatencyData.value = !!(surgeryStatsForCharts.network_latency_ms && meta.is_remote)\n      showCharts.value = hasStateMachineData.value || hasNetworkLatencyData.value\n      \n      // 初始化图表\n      if (showCharts.value) {\n        nextTick(() => {\n          initCharts(data)\n        })\n      }\n    }\n\n    const loadFromStorage = () => {\n      try {\n        const text = sessionStorage.getItem('surgeryVizData')\n        if (!text) {\n          return\n        }\n        \n        const data = JSON.parse(text)\n        \n        console.log('🔧 获取到的手术数据:', data)\n        \n        // 数据已经通过适配器处理，直接使用\n        renderAll(data)\n      } catch (error) {\n        // 解析失败，静默处理\n      }\n    }\n\n    const loadById = async () => {\n      if (!surgeryIdInput.value) return\n      loading.value = true\n      try {\n        const resp = await api.surgeries.get(surgeryIdInput.value)\n        const item = resp.data?.data || resp.data\n        \n        console.log('🔧 获取到的手术数据:', item)\n        \n        // 数据库数据也需要通过适配器处理\n        const { adaptSurgeryData, validateAdaptedData } = await import('../utils/surgeryDataAdapter')\n        const adaptedData = adaptSurgeryData(item)\n        \n        if (!adaptedData || !validateAdaptedData(adaptedData)) {\n          throw new Error('数据适配或验证失败')\n        }\n        \n        adaptedData._dataSource = 'database_record'\n        adaptedData._originalData = item\n        \n        renderAll(adaptedData)\n      } catch (e) {\n        // API获取失败，静默处理\n      } finally {\n        loading.value = false\n      }\n    }\n\n    const handleResize = () => {\n      // 图表大小调整现在由TimeSeriesChart组件内部处理\n    }\n    \n    // 初始化图表\n    const initCharts = (data) => {\n      const surgeryStats = data.surgery_stats || {}\n      \n      // 处理状态机数据\n      if (surgeryStats.state_machine && Array.isArray(surgeryStats.state_machine)) {\n        stateMachineChartData.value = processStateMachineData(surgeryStats.state_machine)\n      }\n      \n      // 处理网络延迟数据（仅远程手术）\n      if (surgeryStats.network_latency_ms && Array.isArray(surgeryStats.network_latency_ms) && meta.is_remote) {\n        networkLatencyChartData.value = processNetworkLatencyData(surgeryStats.network_latency_ms)\n      }\n      \n      // 处理故障数据\n      if (surgeryStats.faults && Array.isArray(surgeryStats.faults)) {\n        faultRecords.value = processFaultData(surgeryStats.faults)\n      }\n    }\n    \n    \n    \n    // 处理状态机数据\n    const processStateMachineData = (stateMachineData) => {\n      if (!Array.isArray(stateMachineData)) {\n        return []\n      }\n      \n      try {\n        const processedData = stateMachineData.map(item => {\n          // 处理UTC时间转换 - 使用与手术时间线相同的时区转换逻辑\n          const timeValue = item.time || item.timestamp\n          if (!timeValue) {\n            return [Date.now(), 0]\n          }\n          \n          // 使用 getLocalTime 函数进行时区转换\n          const localTime = getLocalTime(timeValue)\n          if (!localTime) {\n            return [Date.now(), 0]\n          }\n          \n          // 提取状态值（括号内的数字部分）\n          const stateValue = item.state || ''\n          const stateNumber = extractStateNumber(stateValue)\n          \n          return [localTime.getTime(), stateNumber]\n        })\n        \n        return processedData\n      } catch (error) {\n        return []\n      }\n    }\n    \n    // 提取状态值中的数字部分\n    const extractStateNumber = (stateString) => {\n      if (!stateString) return 0\n      \n      // 匹配括号内的数字，如 \"状态1(5)\" -> 5\n      const match = stateString.match(/\\((\\d+)\\)/)\n      if (match) {\n        return parseInt(match[1], 10)\n      }\n      \n      // 如果没有括号，尝试提取纯数字\n      const numberMatch = stateString.match(/\\d+/)\n      if (numberMatch) {\n        return parseInt(numberMatch[0], 10)\n      }\n      \n      return 0\n    }\n    \n    // 处理网络延迟数据\n    const processNetworkLatencyData = (latencyData) => {\n      if (!Array.isArray(latencyData)) {\n        return []\n      }\n      \n      try {\n        return latencyData.map(item => {\n          // 处理UTC时间转换 - 使用与手术时间线相同的时区转换逻辑\n          const timeValue = item.time || item.timestamp\n          if (!timeValue) {\n            return [Date.now(), 0]\n          }\n          \n          // 使用 getLocalTime 函数进行时区转换\n          const localTime = getLocalTime(timeValue)\n          if (!localTime) {\n            return [Date.now(), 0]\n          }\n          \n          // 使用新的latency字段\n          const latencyValue = item.latency || item.value || 0\n          return [localTime.getTime(), latencyValue]\n        })\n      } catch (error) {\n        return []\n      }\n    }\n    \n    // 处理故障数据\n    const processFaultData = (faultsData) => {\n      if (!Array.isArray(faultsData)) {\n        return []\n      }\n      \n      try {\n        // 对故障码进行去重处理（基于故障码）\n        const faultMap = new Map()\n        \n        faultsData.forEach(fault => {\n          const errorCode = fault.error_code\n          if (!errorCode) return\n          \n          // 如果故障码已存在，保留最新的记录\n          if (!faultMap.has(errorCode) || new Date(fault.timestamp) > new Date(faultMap.get(errorCode).timestamp)) {\n            faultMap.set(errorCode, {\n              timestamp: fault.timestamp,\n              error_code: fault.error_code,\n              explanation: fault.explanation || '无详细说明',\n              status: fault.status || '未处理'\n            })\n          }\n        })\n        \n        // 转换为数组并按时间排序\n        return Array.from(faultMap.values()).sort((a, b) => \n          new Date(a.timestamp) - new Date(b.timestamp)\n        )\n      } catch (error) {\n        return []\n      }\n    }\n    \n    // 格式化故障时间\n    const formatFaultTime = (timestamp) => {\n      if (!timestamp) return '未知时间'\n      try {\n        const date = new Date(timestamp)\n        return date.toLocaleString('zh-CN', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        })\n      } catch (error) {\n        return timestamp\n      }\n    }\n    \n    // 获取故障类型（根据故障码后缀判断）\n    const getFaultType = (errorCode) => {\n      if (!errorCode) return 'info'\n      const suffix = errorCode.slice(-1).toUpperCase()\n      switch (suffix) {\n        case 'A': return 'danger'  // A类故障\n        case 'B': return 'warning' // B类故障\n        case 'C': return 'info'    // C类故障\n        case 'D': return 'success' // D类提示\n        case 'E': return ''        // E类日志\n        default: return 'info'\n      }\n    }\n    \n    // 获取已处理故障数量\n    const getProcessedCount = () => {\n      return faultRecords.value.filter(fault => fault.status === '已处理').length\n    }\n    \n    // 获取未处理故障数量\n    const getUnprocessedCount = () => {\n      return faultRecords.value.filter(fault => fault.status === '未处理').length\n    }\n    \n    // 处理鼠标滚轮缩放\n    const handleWheel = (event) => {\n      // 检查是否在时间线容器内\n      const container = event.currentTarget\n      if (!container || !container.classList.contains('timeline-container')) {\n        return\n      }\n      \n      // 阻止默认滚动行为，但只在必要时\n      if (event.cancelable !== false) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n      \n      const armColumnWidth = 120\n      const rect = container.getBoundingClientRect()\n      const mouseXInContainer = event.clientX - rect.left\n      // 鼠标在时间区域内的相对位置（去除左侧活动名称列）\n      const mouseXInTime = Math.max(0, mouseXInContainer - armColumnWidth)\n      const viewportTimeWidth = Math.max(1, container.clientWidth - armColumnWidth)\n      \n      // 基础内容宽度（未缩放的时间区域宽度）\n      const baseWidth = viewportTimeWidth\n      const oldContentWidth = baseWidth * zoomLevel.value\n      \n      // 计算鼠标锚点在内容中的比例位置（0~1）\n      const anchorRatio = (container.scrollLeft + mouseXInTime) / Math.max(1, oldContentWidth)\n      \n      // 计算新的缩放级别\n      const delta = event.deltaY\n      const zoomFactor = delta > 0 ? 0.9 : 1.1 // 向下滚动缩小，向上滚动放大\n      const newZoom = Math.max(minZoom, Math.min(maxZoom, zoomLevel.value * zoomFactor))\n      \n      if (newZoom === zoomLevel.value) {\n        return\n      }\n      \n      zoomLevel.value = newZoom\n      const newContentWidth = baseWidth * newZoom\n      \n      // 期望保持鼠标所在的时间点不动，计算新的scrollLeft\n      let newScrollLeft = anchorRatio * newContentWidth - mouseXInTime\n      const maxScrollLeft = Math.max(0, newContentWidth - viewportTimeWidth)\n      newScrollLeft = Math.max(0, Math.min(maxScrollLeft, newScrollLeft))\n      \n      // 在下一帧应用滚动与强制刷新\n      nextTick(() => {\n        container.scrollLeft = newScrollLeft\n        \n        // 强制更新SVG内容，避免滞后\n        const svg = document.querySelector('.timeline-overlay')\n        if (svg) {\n          svg.style.display = 'none'\n          svg.offsetHeight // 触发重排\n          svg.style.display = ''\n        }\n        \n        // 强制重新计算事件合并状态\n        timelineEvents.value = [...timelineEvents.value]\n      })\n    }\n    \n    // 重置缩放\n    const resetZoom = () => {\n      zoomLevel.value = 1\n    }\n    \n    // 获取时间列容器样式\n    const getTimeColumnsStyle = () => {\n      if (zoomLevel.value === 1) {\n        // 默认视图：撑满容器宽度\n        return { flex: 1 }\n      } else {\n        // 缩放视图：基于默认视图的实际宽度进行缩放\n        const baseWidth = 100 - (120 / window.innerWidth * 100) // 减去arm-column占用的百分比\n        const scaledWidth = baseWidth * zoomLevel.value\n        return { width: `${scaledWidth}%` }\n      }\n    }\n    \n    // 获取时间单元格容器样式\n    const getTimeCellsStyle = () => {\n      if (zoomLevel.value === 1) {\n        // 默认视图：撑满容器宽度\n        return { flex: 1 }\n      } else {\n        // 缩放视图：基于默认视图的实际宽度进行缩放\n        const baseWidth = 100 - (120 / window.innerWidth * 100)\n        const scaledWidth = baseWidth * zoomLevel.value\n        return { width: `${scaledWidth}%` }\n      }\n    }\n    \n    // 获取时间列样式\n    const getTimeColumnStyle = () => {\n      if (zoomLevel.value === 1) {\n        // 默认视图：均布撑满容器\n        return { flex: 1, flexShrink: 0 }\n      } else {\n        // 缩放视图：基于默认视图的实际宽度进行缩放\n        const totalHours = getTotalHours()\n        const containerWidth = window.innerWidth\n        const armColumnWidth = 120\n        const availableWidth = containerWidth - armColumnWidth\n        const baseColumnWidth = availableWidth / totalHours\n        const scaledColumnWidth = baseColumnWidth * zoomLevel.value\n        return { width: `${scaledColumnWidth}px`, flexShrink: 0 }\n      }\n    }\n    \n    // 获取时间网格样式\n    const getTimeGridStyle = () => {\n      if (zoomLevel.value === 1) {\n        // 默认视图：均布撑满容器\n        return { flex: 1, flexShrink: 0 }\n      } else {\n        // 缩放视图：基于默认视图的实际宽度进行缩放\n        const totalHours = getTotalHours()\n        const containerWidth = window.innerWidth\n        const armColumnWidth = 120\n        const availableWidth = containerWidth - armColumnWidth\n        const baseColumnWidth = availableWidth / totalHours\n        const scaledColumnWidth = baseColumnWidth * zoomLevel.value\n        return { width: `${scaledColumnWidth}px`, flexShrink: 0 }\n      }\n    }\n\n    // 调试函数：查看SessionStorage中的所有手术相关数据\n    const debugSessionStorage = () => {\n      const surgeryData = sessionStorage.getItem('surgeryVizData')\n      if (surgeryData) {\n        try {\n          const parsed = JSON.parse(surgeryData)\n          console.log('🔧 获取到的手术数据:', parsed)\n        } catch (e) {\n          // 解析失败，静默处理\n        }\n      }\n    }\n\n    onMounted(async () => {\n      // 加载服务器时区信息\n      await loadServerTimezone()\n      \n      window.addEventListener('resize', handleResize)\n      \n      // 调试SessionStorage - 移除重复调用\n      // debugSessionStorage()\n      \n      // 将调试函数暴露到全局，方便在控制台调用\n      window.debugSurgeryData = () => {\n        debugSessionStorage()\n      }\n      \n      // 初始化时间线（现在使用纯CSS布局，不需要ECharts）\n      nextTick(() => {\n        // Timeline initialized with CSS layout\n      })\n      \n      const qid = route?.query?.id || route?.params?.id\n      if (qid) {\n        surgeryIdInput.value = String(qid)\n        loadById()\n      } else {\n      loadFromStorage()\n      }\n    })\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('resize', handleResize)\n      // 图表实例现在由TimeSeriesChart组件内部管理\n    })\n\n    // 使用统一的时间格式化函数\n    const fmtTime = (v) => formatTime(v)\n    const timelineDisplay = reactive({ powerOn: '-', previousSurgeryEnd: '-', surgeryStart: '-', surgeryEnd: '-', powerOff: '-' })\n\n    const renderAlerts = (data) => {\n      const list = Array.isArray(data?.security_alerts) ? data.security_alerts : (Array.isArray(data?.error_codes) ? data.error_codes : [])\n      const rows = list.map(it => ({\n        time: fmtTime(it.time || it.timestamp),\n        code: it.code || it.errCode || '-',\n        message: it.message || it.explanation || '-',\n        status: (it.status !== undefined && it.status !== null)\n          ? String(it.status)\n          : ((it.resolved === true || it.is_resolved === true) ? '已处理' : '未处理')\n      }))\n      alertRows.value = rows\n      // 更新时间卡片\n      const t = data?.timeline || {}\n      timelineDisplay.powerOn = fmtTime(t.powerOn)\n      timelineDisplay.previousSurgeryEnd = fmtTime(t.previousSurgeryEnd)\n      timelineDisplay.surgeryStart = fmtTime(t.surgeryStart || meta.start_time)\n      timelineDisplay.surgeryEnd = fmtTime(t.surgeryEnd || meta.end_time)\n      timelineDisplay.powerOff = fmtTime(t.powerOff)\n    }\n\n    const visibleAlertRows = computed(() => {\n      const arr = alertRows.value || []\n      if (showAllAlerts.value) return arr\n      return arr.slice(0, 5)\n    })\n\n    const exportStructured = () => {\n      try {\n        const data = currentData.value || {}\n        const text = JSON.stringify(data, null, 2)\n        const blob = new Blob([text], { type: 'application/json;charset=utf-8' })\n        const url = URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        const id = meta.surgery_id || 'unknown'\n        a.download = `surgery_${id}_structured.json`\n        a.click()\n        URL.revokeObjectURL(url)\n      } catch (_) {}\n    }\n\n    return { \n      loadFromStorage, \n      loadById, \n      loading, \n      surgeryIdInput, \n      meta, \n      exportStructured, \n      visibleAlertRows, \n      showAllAlerts, \n      timelineDisplay, \n      armsData, \n      timelineEvents,\n      hoveredSegment,\n      hoveredEvent,\n      hasInstrumentInHour,\n      getSegmentsInHour,\n      getSegmentStyle,\n      getSegmentTooltip,\n      hasEventInHour,\n      getEventText,\n      getEventClass,\n      getEventType,\n      getEventStyle,\n      getSingleEventStyle,\n      getEventsInHour,\n      getEventTooltip,\n      getSymbolClass,\n      getTimeColumnText,\n      getTotalHours,\n      getTableStartHour,\n      getHourRange,\n      zoomLevel,\n      handleWheel,\n      resetZoom,\n      getTimeColumnsStyle,\n      getTimeCellsStyle,\n      getTimeColumnStyle,\n      getTimeGridStyle,\n      // SVG覆盖层相关函数\n      getOverlayStyle,\n      getAllSegmentsForArm,\n      getSegmentX,\n      getSegmentY,\n      getSegmentWidth,\n      getSegmentHeight,\n      getSegmentEndX,\n      getInstrumentColor,\n      handleSegmentClick,\n      handleSegmentHover,\n      handleSegmentLeave,\n      handleMouseMove,\n      handleEventHover,\n      handleEventLeave,\n      handleOverlayClick,\n      getTooltipStyle,\n      getSegmentTooltipTitle,\n      formatEventTime,\n      getEventWeekday,\n      processEventGroup,\n      getSegmentDuration,\n      formatSegmentTime,\n      getArmColor,\n      getTextColor,\n      getStrokeColor,\n      shouldShowInstrumentText,\n      getSegmentTextX,\n      getSegmentTextY,\n      getInstrumentDisplayName,\n      // 图表相关\n      showCharts,\n      hasStateMachineData,\n      hasNetworkLatencyData,\n      stateMachineChartData,\n      networkLatencyChartData,\n      // 故障记录相关\n      faultRecords,\n      formatFaultTime,\n      getFaultType,\n      getProcessedCount,\n      getUnprocessedCount\n    }\n  }\n}\n</script>\n\n<style scoped>\n.viz-page { \n  padding: 16px; \n  display: flex; \n  flex-direction: column; \n  gap: 16px; \n}\n\n/* 标题卡片样式 */\n.title-card {\n  margin-bottom: 0;\n  width: fit-content;\n  min-width: auto;\n  height: auto;\n  min-height: auto;\n}\n\n/* 通过CSS变量控制Element Plus卡片内边距 */\n.title-card {\n  --el-card-padding: 8px 12px;\n}\n\n/* 移除对el-card__body的直接控制，让Element Plus自己管理 */\n\n.surgery-info { \n  display: flex; \n  align-items: center; \n  gap: 8px; /* 减少元素间距 */\n  flex-wrap: wrap;\n  margin: 0; /* 移除容器边距 */\n  padding: 0; /* 移除容器内边距 */\n}\n\n.surgery-id {\n  font-size: 12px;\n  font-weight: 600;\n  color: #000;\n  margin: 0; /* 移除所有外边距 */\n  padding: 2px 4px; /* 减少内边距 */\n}\n\n.surgery-tag { \n  margin: 0 4px; /* 上下边距为0，左右边距为4px */\n}\n\n/* 故障手术标签样式 */\n.surgery-tag[color=\"red\"] {\n  background-color: #f48d8f !important;\n  color: white !important;\n  border: none !important;\n}\n\n/* 更具体的选择器来覆盖Element Plus默认样式 */\n.title-card .surgery-tag[color=\"red\"] {\n  background-color: #f48d8f !important;\n  color: white !important;\n  border: none !important;\n}\n\n/* 使用类名选择器 */\n.surgery-tag.fault-tag {\n  background-color: #f48d8f !important;\n  color: white !important;\n  border: none !important;\n}\n\n/* 强制覆盖Element Plus的默认样式 */\n.title-card .el-tag.fault-tag {\n  background-color: #f48d8f !important;\n  color: white !important;\n  border: none !important;\n}\n\n.title-card .el-tag.fault-tag .el-tag__content {\n  color: white !important;\n}\n\n/* 远程手术标签样式 */\n.surgery-tag[color=\"green\"] {\n  background-color: #bfbfbf !important;\n  color: white !important;\n  border: none !important;\n}\n\n/* 更具体的选择器来覆盖Element Plus默认样式 */\n.title-card .surgery-tag[color=\"green\"] {\n  background-color: #bfbfbf !important;\n  color: white !important;\n  border: none !important;\n}\n\n/* 使用类名选择器 */\n.surgery-tag.remote-tag {\n  background-color: #bfbfbf !important;\n  color: white !important;\n  border: none !important;\n}\n\n/* 强制覆盖Element Plus的默认样式 */\n.title-card .el-tag.remote-tag {\n  background-color: #bfbfbf !important;\n  color: white !important;\n  border: none !important;\n}\n\n.title-card .el-tag.remote-tag .el-tag__content {\n  color: white !important;\n}\n\n/* 手术概况卡片样式 */\n.overview-card {\n  margin-bottom: 0;\n}\n\n.section-header { \n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 600; \n  margin-bottom: 16px; \n  font-size: 16px;\n  color: #333;\n}\n\n.zoom-controls {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.zoom-reset-btn {\n  padding: 4px 12px;\n  background: #f0f0f0;\n  border: 1px solid #d9d9d9;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  transition: all 0.2s ease;\n}\n\n.zoom-reset-btn:hover {\n  background: #e6f7ff;\n  border-color: #1890ff;\n  color: #1890ff;\n}\n\n.zoom-level {\n  font-size: 12px;\n  color: #666;\n  min-width: 40px;\n  text-align: center;\n}\n\n.timeline-chart {\n  width: 100%;\n  height: 400px;\n}\n.chart { width: 100%; height: 360px; }\n.alerts-toggle { text-align: center; padding-top: 6px; }\n\n/* 时间轴容器样式 */\n.timeline-container {\n  border: 1px solid #d9d9d9;\n  border-radius: 6px;\n  overflow-x: auto; /* 横向滚动条 */\n  background: #fff;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n  position: relative; /* 为SVG覆盖层提供定位基准 */\n}\n\n.timeline-header {\n  display: flex;\n  background: #fafafa;\n  border-bottom: 2px solid #d9d9d9;\n  min-width: max-content; /* 确保容器宽度不小于内容宽度 */\n}\n\n.arm-column {\n  width: 120px;\n  flex-shrink: 0; /* 防止收缩，保持固定宽度 */\n  padding: 16px 12px;\n  font-weight: 600;\n  border-right: 1px solid #d9d9d9;\n  background: #fafafa;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  color: #262626;\n  position: sticky; /* 冻结活动名称列 */\n  left: 0;\n  z-index: 30;\n  box-shadow: 1px 0 0 0 #d9d9d9; /* 分隔线阴影，保证缩放时可见 */\n}\n\n.time-columns {\n  display: flex;\n  /* 移除 flex: 1，使用固定宽度 */\n  /* 移除 overflow-x: auto，使用外层容器的滚动条 */\n  min-width: 0; /* 允许收缩 */\n}\n\n.time-column {\n  flex-shrink: 0; /* 防止收缩，使用动态宽度 */\n  padding: 16px 4px;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 600;\n  border-right: 1px solid #f0f0f0;\n  background: #fafafa;\n  color: #595959;\n  min-width: 30px; /* 最小宽度 */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n}\n\n.timeline-body {\n  display: flex;\n  flex-direction: column;\n}\n\n.timeline-row {\n  display: flex;\n  border-bottom: 1px solid #f0f0f0;\n  min-height: 60px;\n  transition: background-color 0.2s ease;\n}\n\n.timeline-row:hover {\n  background-color: #fafafa;\n}\n\n.timeline-row:last-child {\n  border-bottom: none;\n}\n\n.arm-cell {\n  width: 120px;\n  flex-shrink: 0; /* 防止收缩，保持固定宽度 */\n  padding: 16px 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-right: 1px solid #f0f0f0;\n  background: #fff;\n  font-weight: 500;\n  font-size: 14px;\n  color: #262626;\n  position: sticky; /* 冻结活动名称列 */\n  left: 0;\n  z-index: 28;\n  box-shadow: 1px 0 0 0 #f0f0f0; /* 分隔线阴影，保证缩放时可见 */\n}\n\n.time-cells {\n  position: relative;\n  min-height: 60px;\n  background: #fff;\n  display: flex;\n  /* 移除 flex: 1，使用固定宽度 */\n  min-width: 0; /* 允许收缩 */\n  /* 移除 overflow-x: auto，使用外层容器的滚动条 */\n}\n\n/* 小时栅格背景 */\n.time-grid {\n  position: relative;\n  flex-shrink: 0; /* 防止收缩，使用动态宽度 */\n  height: 100%;\n  border-right: 1px solid #f0f0f0;\n  background: #fff;\n  transition: background-color 0.2s ease;\n  min-width: 30px; /* 最小宽度 */\n}\n\n.time-grid:hover {\n  background-color: #f5f5f5;\n}\n\n\n/* 时间线事件容器 */\n.timeline-event-container {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 25;  /* 提高z-index，确保在SVG覆盖层之上 */\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n}\n\n/* 单个事件样式 */\n.timeline-event {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n  position: relative;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: background-color 0.2s ease;\n}\n\n.timeline-event:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n/* 事件符号容器 */\n.event-symbol {\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: transform 0.2s ease;\n}\n\n.event-symbol:hover {\n  transform: scale(1.2);\n}\n\n/* 圆形符号（手术相关事件） */\n.circle-shape {\n  width: 12px;\n  height: 12px;\n  border: 2px solid #ff4d4f;\n  border-radius: 50%;\n  background: transparent;\n}\n\n/* 方形符号（开机/关机事件） */\n.square-shape {\n  width: 12px;\n  height: 12px;\n  border: 2px solid #1890ff;\n  background: transparent;\n  border-radius: 2px;\n}\n\n/* 事件标签 */\n.event-label {\n  font-size: 10px;\n  font-weight: 500;\n  color: #333;\n  background: transparent;  /* 改为透明背景 */\n  padding: 2px 6px;\n  border-radius: 4px;\n  white-space: nowrap;\n  text-align: center;\n  border: none;  /* 去掉边框 */\n}\n\n/* 合并事件标签样式 */\n.timeline-event[data-merged=\"true\"] .event-label {\n  background: transparent;  /* 改为透明背景 */\n  color: #856404;\n  font-weight: 600;\n  border: none;  /* 去掉边框 */\n}\n\n/* 事件类型样式 */\n.timeline-event-power .circle-shape,\n.timeline-event-power .square-shape {\n  border-color: #1890ff;\n}\n\n.timeline-event-surgery .circle-shape,\n.timeline-event-surgery .square-shape {\n  border-color: #ff4d4f;\n}\n\n/* 事件文本样式 */\n.event-text {\n  font-size: 11px;\n  font-weight: 600;\n  white-space: nowrap;\n  text-align: center;\n}\n\n/* timeline-event-power 现在没有背景色，与手术事件样式保持一致 */\n\n.timeline-event-start {\n  background: linear-gradient(135deg, #1890ff, #40a9ff);\n}\n\n.timeline-event-end {\n  background: linear-gradient(135deg, #fa8c16, #ffa940);\n}\n\n.timeline-event-previous {\n  background: linear-gradient(135deg, #8c8c8c, #a6a6a6);\n}\n\n/* 器械使用区块样式 */\n.instrument-segment {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  height: 32px;\n  border-radius: 6px;\n  color: white;\n  font-size: 11px;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 8px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.12);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  border: 1px solid rgba(255,255,255,0.3);\n  min-width: 40px;\n}\n\n.instrument-segment:hover {\n  transform: translateY(-50%) scale(1.05);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n  z-index: 15;\n  border-color: rgba(255,255,255,0.6);\n}\n\n/* 器械类型颜色 */\n.instrument-segment[style*=\"ff4d4f\"] {\n  background: linear-gradient(135deg, #ff4d4f, #ff7875);\n}\n\n.instrument-segment[style*=\"1890ff\"] {\n  background: linear-gradient(135deg, #1890ff, #40a9ff);\n}\n\n.instrument-segment[style*=\"52c41a\"] {\n  background: linear-gradient(135deg, #52c41a, #73d13d);\n}\n\n.instrument-segment[style*=\"fa8c16\"] {\n  background: linear-gradient(135deg, #fa8c16, #ffa940);\n}\n\n.instrument-segment[style*=\"13c2c2\"] {\n  background: linear-gradient(135deg, #13c2c2, #36cfc9);\n}\n\n.instrument-segment[style*=\"eb2f96\"] {\n  background: linear-gradient(135deg, #eb2f96, #f759ab);\n}\n\n.instrument-segment[style*=\"722ed1\"] {\n  background: linear-gradient(135deg, #722ed1, #9254de);\n}\n\n/* SVG覆盖层样式 */\n.timeline-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;  /* 默认不响应事件，让事件穿透到下层 */\n  z-index: 20;\n}\n\n/* SVG器械段样式 */\n.instrument-segment-svg {\n  cursor: pointer;\n  transition: all 0.3s ease;\n  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.12));\n  stroke-dasharray: none;\n  pointer-events: auto;  /* 确保器械段可以响应事件 */\n}\n\n.instrument-segment-svg:hover {\n  filter: drop-shadow(0 4px 8px rgba(0,0,0,0.2));\n  stroke-width: 3;\n  stroke-dasharray: 5,5;\n  animation: dash 1s linear infinite;\n}\n\n/* 线框动画效果 */\n@keyframes dash {\n  to {\n    stroke-dashoffset: -10;\n  }\n}\n\n/* 器械文本样式 */\n.instrument-text {\n  font-size: 11px;\n  font-weight: normal;\n  pointer-events: none;\n  user-select: none;\n  text-shadow: 0 1px 2px rgba(0,0,0,0.3);\n  cursor: pointer;\n}\n\n/* 自定义Tooltip样式 */\n.custom-tooltip {\n  background: white;\n  color: #333;\n  padding: 12px 16px;\n  border-radius: 8px;\n  font-size: 12px;\n  line-height: 1.4;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  border: 1px solid #e0e0e0;\n  pointer-events: none;\n  max-width: 300px;\n  white-space: nowrap;\n  position: fixed;\n  z-index: 9999;\n}\n\n.tooltip-title {\n  font-weight: 600;\n  font-size: 14px;\n  margin-bottom: 8px;\n  color: #333;\n  border-bottom: 1px solid #e0e0e0;\n  padding-bottom: 4px;\n}\n\n.tooltip-content div {\n  margin-bottom: 4px;\n  color: #666;\n}\n\n.tooltip-content div:last-child {\n  margin-bottom: 0;\n}\n\n/* 合并事件样式 */\n.event-item {\n  margin-bottom: 8px;\n  padding-bottom: 4px;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.event-item:last-child {\n  margin-bottom: 0;\n  padding-bottom: 0;\n  border-bottom: none;\n}\n\n.event-name {\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 2px;\n}\n\n.event-time {\n  font-size: 11px;\n  color: #666;\n  font-family: 'Courier New', monospace;\n}\n\n/* 图表行容器样式 */\n.charts-row {\n  display: flex;\n  gap: 16px;\n  margin-top: 0;\n}\n\n/* 手术状态机变化卡片样式 */\n.state-machine-card {\n  flex: 0 0 50%; /* 固定占用50%宽度，不伸缩 */\n  min-width: 0;\n}\n\n/* 网络延迟情况卡片样式 */\n.network-latency-card {\n  flex: 1;\n  min-width: 0;\n}\n\n/* 图表容器样式 */\n.chart-container {\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 300px;\n}\n\n.chart {\n  width: 100%;\n  height: 300px;\n  border: 1px solid #e8e8e8;\n  border-radius: 6px;\n  background: #fff;\n}\n\n/* 故障记录样式 */\n.faults-card {\n  margin-top: 16px;\n}\n\n.faults-container {\n  padding: 16px 0;\n}\n\n.faults-table {\n  margin-bottom: 16px;\n}\n\n.faults-table .el-table__header {\n  background-color: #f5f7fa;\n}\n\n.faults-table .el-table__header th {\n  background-color: #f5f7fa !important;\n  color: #606266;\n  font-weight: 600;\n}\n\n.fault-time {\n  font-family: 'Courier New', monospace;\n  font-size: 12px;\n  color: #606266;\n}\n\n.fault-explanation {\n  font-size: 13px;\n  line-height: 1.4;\n  color: #303133;\n}\n\n.faults-summary {\n  margin-top: 16px;\n}\n\n.faults-summary .el-alert {\n  border-radius: 6px;\n}\n\n/* 故障码标签样式 */\n.faults-table .el-tag {\n  font-weight: 600;\n  font-size: 11px;\n  padding: 2px 8px;\n}\n\n/* 状态标签样式 */\n.faults-table .el-tag[type=\"success\"] {\n  background-color: #f0f9ff;\n  border-color: #67c23a;\n  color: #67c23a;\n}\n\n.faults-table .el-tag[type=\"danger\"] {\n  background-color: #fef0f0;\n  border-color: #f56c6c;\n  color: #f56c6c;\n}\n\n/* 响应式布局 */\n@media (max-width: 1200px) {\n  .charts-row {\n    flex-direction: column;\n  }\n  \n  .state-machine-card,\n  .network-latency-card {\n    min-width: 100%;\n  }\n  \n  .faults-table {\n    font-size: 12px;\n  }\n  \n  .faults-table .el-table__cell {\n    padding: 8px 4px;\n  }\n}\n\n</style>\n\n\n\n\n","import { render } from \"./SurgeryVisualization.vue?vue&type=template&id=42c68784&scoped=true\"\nimport script from \"./SurgeryVisualization.vue?vue&type=script&lang=js\"\nexport * from \"./SurgeryVisualization.vue?vue&type=script&lang=js\"\n\nimport \"./SurgeryVisualization.vue?vue&type=style&index=0&id=42c68784&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-42c68784\"]])\n\nexport default __exports__","<template>\r\n  <div ref=\"chartContainer\" :style=\"{ width: width ? width + 'px' : '100%', height: height + 'px' }\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount, watch, nextTick } from 'vue'\r\nimport * as echarts from 'echarts'\r\n\r\nexport default {\r\n  name: 'TimeSeriesChart',\r\n  props: {\r\n    seriesData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    seriesName: {\r\n      type: String,\r\n      default: '数据'\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 300\r\n    },\r\n    width: {\r\n      type: Number,\r\n      default: 600\r\n    },\r\n    yAxisFormat: {\r\n      type: String,\r\n      default: 'decimal'\r\n    },\r\n    showRangeLabels: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  setup(props) {\r\n    const chartContainer = ref(null)\r\n    let chartInstance = null\r\n\r\n    const createChart = () => {\r\n      if (!chartContainer.value || !props.seriesData || props.seriesData.length === 0) {\r\n        return\r\n      }\r\n\r\n      // 清理现有实例\r\n      if (chartInstance) {\r\n        chartInstance.dispose()\r\n      }\r\n\r\n      // 创建新实例\r\n      chartInstance = echarts.init(chartContainer.value)\r\n\r\n      // 数据验证\r\n      const validData = props.seriesData.filter(item => \r\n        Array.isArray(item) && \r\n        item.length >= 2 && \r\n        typeof item[0] === 'number' && \r\n        typeof item[1] === 'number' &&\r\n        !isNaN(item[0]) && \r\n        !isNaN(item[1]) &&\r\n        isFinite(item[0]) && \r\n        isFinite(item[1])\r\n      )\r\n\r\n      if (validData.length === 0) {\r\n        chartInstance.dispose()\r\n        chartInstance = null\r\n        return\r\n      }\r\n\r\n      // 配置选项\r\n      const option = {\r\n        title: undefined,\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          position: (pt) => [pt[0], '10%']\r\n        },\r\n        legend: undefined,\r\n        toolbox: {\r\n          feature: {\r\n            dataZoom: {\r\n              yAxisIndex: 'none'\r\n            },\r\n            restore: {},\r\n            saveAsImage: {}\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'time',\r\n          boundaryGap: false,\r\n          min: Math.min(...validData.map(d => d[0])),\r\n          max: Math.max(...validData.map(d => d[0]))\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          boundaryGap: [0, '100%'],\r\n          axisLabel: {\r\n            width: 40, // 固定Y轴标签宽度\r\n            overflow: 'truncate', // 超出部分截断\r\n            formatter: (value) => {\r\n              if (props.yAxisFormat === 'integer') {\r\n                return Math.round(value).toString()\r\n              } else if (props.yAxisFormat === 'decimal') {\r\n                return value.toFixed(1)\r\n              }\r\n              return value.toString()\r\n            }\r\n          }\r\n        },\r\n        dataZoom: [\r\n          {\r\n            type: 'inside',\r\n            start: 0,\r\n            end: 100,\r\n            realtime: true,\r\n            throttle: 100,\r\n            zoomLock: false,\r\n            xAxisIndex: 0,\r\n            filterMode: 'filter',\r\n            preventDefaultMouseMove: true\r\n          },\r\n          {\r\n            type: 'slider',\r\n            start: 0,\r\n            end: 100,\r\n            realtime: true,\r\n            throttle: 100,\r\n            zoomLock: false,\r\n            showDetail: true,\r\n            showDataShadow: true,\r\n            xAxisIndex: 0,\r\n            bottom: 10,\r\n            filterMode: 'filter',\r\n            moveHandleSize: 8,\r\n            preventDefaultMouseMove: true\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: props.seriesName,\r\n            type: 'line',\r\n            symbol: 'none',\r\n            sampling: false,\r\n            data: validData,\r\n            lineStyle: {\r\n              width: 2\r\n            },\r\n            areaStyle: {\r\n              opacity: 0.3\r\n            }\r\n          }\r\n        ]\r\n      }\r\n\r\n      chartInstance.setOption(option, true)\r\n    }\r\n\r\n    const resizeChart = () => {\r\n      if (chartInstance) {\r\n        chartInstance.resize()\r\n      }\r\n    }\r\n\r\n    // 监听数据变化\r\n    watch(() => props.seriesData, () => {\r\n      nextTick(() => {\r\n        createChart()\r\n      })\r\n    }, { deep: true })\r\n\r\n    // 监听高度变化\r\n    watch(() => props.height, () => {\r\n      nextTick(() => {\r\n        resizeChart()\r\n      })\r\n    })\r\n\r\n    // 监听宽度变化\r\n    watch(() => props.width, () => {\r\n      nextTick(() => {\r\n        resizeChart()\r\n      })\r\n    })\r\n\r\n    onMounted(() => {\r\n      nextTick(() => {\r\n        createChart()\r\n      })\r\n      \r\n      // 监听窗口大小变化\r\n      window.addEventListener('resize', resizeChart)\r\n    })\r\n\r\n    onBeforeUnmount(() => {\r\n      if (chartInstance) {\r\n        chartInstance.dispose()\r\n        chartInstance = null\r\n      }\r\n      window.removeEventListener('resize', resizeChart)\r\n    })\r\n\r\n    return {\r\n      chartContainer\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 图表容器样式 */\r\n</style>\r\n","import { render } from \"./TimeSeriesChart.vue?vue&type=template&id=59aa7af9&scoped=true\"\nimport script from \"./TimeSeriesChart.vue?vue&type=script&lang=js\"\nexport * from \"./TimeSeriesChart.vue?vue&type=script&lang=js\"\n\nimport \"./TimeSeriesChart.vue?vue&type=style&index=0&id=59aa7af9&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-59aa7af9\"]])\n\nexport default __exports__"],"names":["serverOffsetMinutes","loadServerTimezone","async","resp","fetch","json","offsetMinutes","error","console","warn","formatTime","timestamp","useServerTimezone","isUtcTime","test","date","utcTimeStr","replace","Date","isNaN","getTime","localOffset","getTimezoneOffset","delta","setTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","result","formatTimeShort","formatSurgeryTime","surgery","surgery_start_time","surgery_end_time","start","end","GANTT_STYLE","ROW_GAP_PX","BAR_MAX_PX","BAR_RATIO","GANTT_COLORS","TOOL_TYPE_COLORS","ARM_BASE_COLORS","toMs","v","undefined","NaN","Number","isFinite","t","class","meta","surgery_id","color","size","resetZoom","Math","round","zoomLevel","handleWheel","style","getTimeColumnsStyle","Array","getTotalHours","fill","_","index","key","getTimeColumnStyle","getTimeColumnText","getOverlayStyle","handleOverlayClick","armsData","arm","arm_id","getAllSegmentsForArm","segment","udi","x","getSegmentX","y","getSegmentY","width","getSegmentWidth","height","getSegmentHeight","getArmColor","stroke","getStrokeColor","rx","ry","handleSegmentClick","$event","handleSegmentHover","handleMouseMove","handleSegmentLeave","shouldShowInstrumentText","getSegmentTextX","getSegmentTextY","getTextColor","getInstrumentDisplayName","name","getTimeCellsStyle","hasInstrumentInHour","getTimeGridStyle","hasEventInHour","getEventStyle","getEventsInHour","event","eventIndex","type","getEventClass","getSingleEventStyle","isMerged","handleEventHover","handleEventLeave","getSymbolClass","symbol","showCharts","hasStateMachineData","hasNetworkLatencyData","stateMachineChartData","is_remote","networkLatencyChartData","is_fault","faultRecords","length","data","stripe","border","prop","label","align","default","row","formatFaultTime","getFaultType","error_code","explanation","status","effect","title","getProcessedCount","getUnprocessedCount","closable","getTooltipStyle","getSegmentTooltipTitle","hoveredSegment","getSegmentDuration","formatSegmentTime","install_time","start_time","remove_time","end_time","hoveredEvent","allEvents","time","formatEventTime","components","TimeSeriesChart","setup","loading","surgeryIdInput","route","alertRows","showAllAlerts","currentData","segments","timelineEvents","timelineBaseTime","tooltipPosition","minZoom","maxZoom","value","minHour","Infinity","maxHour","forEach","eventHour","getHourFromTime","min","max","startHour","endHour","totalHours","getTableStartHour","getHourRange","hour","actualHour","hasInstrument","some","getSegmentsInHour","filter","getSegmentStyle","hourStart","hourEnd","segmentStart","getMinutesFromTime","segmentEnd","left","right","backgroundColor","getInstrumentColor","tool_type","instrument_type","zIndex","getSegmentTooltip","duration","calculateDuration","toolType","installTime","removeTime","timeStr","localTime","getLocalTime","toLocaleString","minute","second","position","top","pointerEvents","containerWidth","window","innerWidth","baseColumnWidth","scaledColumnWidth","scaledWidth","startTime","localHour","localMinute","tableStartHour","hourIndex","minuteOffset","timelineContainer","document","querySelector","offsetWidth","baseContainerWidth","totalPosition","percentagePosition","armIndex","findIndex","a","rowHeight","headerHeight","endTime","startLocalTime","endLocalTime","durationMs","durationMinutes","hourWidth","minuteWidth","getSegmentEndX","stopPropagation","clientX","clientY","eventObj","ev","getEventWeekday","toLocaleDateString","weekday","getEventText","events","eventType","getEventType","sort","b","timeA","timeB","mergeEventsByVisualOverlap","armColumnWidth","scaledContainerWidth","eventPositions","map","eventTime","eventMinute","positionInHour","leftPosition","displayName","baseWidth","mergedGroups","currentGroup","i","current","lastInGroup","currentTime","lastTime","timeDiffMinutes","hourCellWidth","pixelSpacing","log","event1","event2","toFixed","shouldMerge","push","processEventGroup","flat","originalEvents","finalEvents","mergedEvents","e","mergedDetails","count","eventGroup","firstEvent","item","getEventTooltip","eventDetails","join","weekDay","display","transform","baseTime","baseDate","currentDate","armId","startX","segmentY","includes","s","trim","tParsed","parse","utcTime","localDate","renderTimeline","arms","isArray","processedArms","armName","instrument_usage","allArms","existingArm","find","powerCycles","power_cycles","cycle","on_time","off_time","powerOnTime","surgeryStart","surgeryEnd","previousSurgeryEnd","timeline","powerOnDate","toISOString","fallbackTime","renderAll","has_fault","renderAlerts","surgeryStatsForCharts","surgery_stats","network_latency_ms","initCharts","loadFromStorage","text","sessionStorage","getItem","JSON","loadById","api","surgeries","get","adaptSurgeryData","validateAdaptedData","adaptedData","Error","_dataSource","_originalData","handleResize","surgeryStats","state_machine","processStateMachineData","processNetworkLatencyData","faults","processFaultData","stateMachineData","processedData","timeValue","now","stateValue","state","stateNumber","extractStateNumber","stateString","match","parseInt","numberMatch","latencyData","latencyValue","latency","faultsData","faultMap","Map","fault","errorCode","has","set","from","values","suffix","slice","toUpperCase","container","currentTarget","classList","contains","cancelable","preventDefault","rect","getBoundingClientRect","mouseXInContainer","mouseXInTime","viewportTimeWidth","clientWidth","oldContentWidth","anchorRatio","scrollLeft","deltaY","zoomFactor","newZoom","newContentWidth","newScrollLeft","maxScrollLeft","svg","offsetHeight","flex","flexShrink","availableWidth","debugSessionStorage","surgeryData","parsed","addEventListener","debugSurgeryData","qid","query","id","params","removeEventListener","fmtTime","timelineDisplay","powerOn","powerOff","list","security_alerts","error_codes","rows","it","code","errCode","message","resolved","is_resolved","visibleAlertRows","arr","exportStructured","stringify","blob","Blob","url","URL","createObjectURL","createElement","href","download","click","revokeObjectURL","__exports__","render","ref","props","seriesData","seriesName","yAxisFormat","showRangeLabels","Boolean","chartContainer","chartInstance","createChart","dispose","echarts","validData","option","tooltip","trigger","pt","legend","toolbox","feature","dataZoom","yAxisIndex","restore","saveAsImage","xAxis","boundaryGap","d","yAxis","axisLabel","overflow","formatter","toString","realtime","throttle","zoomLock","xAxisIndex","filterMode","preventDefaultMouseMove","showDetail","showDataShadow","bottom","moveHandleSize","series","sampling","lineStyle","areaStyle","opacity","setOption","resizeChart","resize","deep"],"sourceRoot":""}