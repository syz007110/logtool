{"version":3,"file":"js/201.0e674daf.js","mappings":"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","sources":["webpack://logtool-frontend/./src/views/SurgeryStatistics.vue","webpack://logtool-frontend/./src/views/SurgeryStatistics.vue?30b3"],"sourcesContent":["<template>\n  <div class=\"surgery-statistics-container\">\n    <!-- 页面标题和操作栏 -->\n    <div class=\"action-bar\">\n      <div class=\"title-section\">\n        <h2 class=\"page-title\">手术统计</h2>\n        <p class=\"page-subtitle\">查看和分析各场手术的详细统计数据</p>\n      </div>\n    </div>\n    \n    <!-- 分析按钮 -->\n    <div class=\"analysis-section\" v-if=\"!surgeries.length && !analyzing\">\n      <el-card class=\"empty-card\">\n        <div class=\"empty-content\">\n          <el-icon class=\"empty-icon\"><Calendar /></el-icon>\n          <h3>手术数据分析</h3>\n          <p v-if=\"logEntriesCount > 0\">\n            检测到 {{ logEntriesCount }} 条日志条目数据，点击按钮开始分析\n          </p>\n          <p v-else>\n            暂无日志条目数据，请先在批量分析或日志分析页面加载日志数据\n          </p>\n          \n          <el-button \n            type=\"primary\" \n            @click=\"analyzeLogs\" \n            :loading=\"analyzing\"\n            :disabled=\"logEntriesCount === 0\"\n          >\n            <el-icon><DataAnalysis /></el-icon>\n            {{ getAnalysisButtonText() }}\n          </el-button>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 分析中状态 -->\n    <div class=\"analysis-section\" v-if=\"!surgeries.length && analyzing\">\n      <el-card class=\"empty-card\">\n        <div class=\"empty-content\">\n          <el-icon class=\"empty-icon\"><Loading /></el-icon>\n          <h3>正在分析手术数据...</h3>\n          <p>请稍候，系统正在处理日志条目数据</p>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 手术统计内容 -->\n    <div v-else>\n      \n      \n      <!-- 标签页导航 -->\n      <el-card class=\"tab-card\">\n        <el-tabs \n          v-model=\"activeTab\" \n          type=\"card\" \n          @tab-click=\"handleTabClick\"\n          :lazy=\"true\"\n          :before-leave=\"handleBeforeTabLeave\"\n          :stretch=\"false\"\n          :closable=\"false\"\n          :addable=\"false\"\n        >\n          <el-tab-pane \n            v-for=\"surgery in surgeries\" \n            :key=\"surgery.id\"\n            :label=\"surgery.surgery_id\"\n            :name=\"surgery.id.toString()\"\n          >\n            <!-- 导出按钮 -->\n            <div class=\"export-section\">\n              <el-button type=\"primary\" @click=\"exportReport(surgery.id)\">\n                <el-icon><Download /></el-icon>\n                导出手术报告 PDF\n              </el-button>\n              <el-button type=\"info\" @click=\"debugSurgeryTimeData(surgery)\" style=\"margin-left: 10px;\">\n                <el-icon><InfoFilled /></el-icon>\n                调试时间数据\n              </el-button>\n            </div>\n            \n                        <!-- 手术信息布局 -->\n            <div class=\"surgery-info-layout\">\n              <!-- 手术时间线 - 30%宽度 -->\n              <div class=\"timeline-section\">\n                <el-card class=\"info-card\">\n                  <div class=\"info-header\">\n                    <div class=\"time\">手术时间线</div>\n                    <div class=\"badges\">\n                      <el-tag v-if=\"surgery.alarm_count > 0\" type=\"danger\" size=\"small\">故障手术</el-tag>\n                    </div>\n                  </div>\n\n                  <!-- 按时间顺序排序的时间线 -->\n                  <el-timeline>\n                    <el-timeline-item\n                      v-for=\"(event, index) in getSortedTimelineEvents(surgery)\"\n                      :key=\"`event-${index}`\"\n                      :timestamp=\"formatTime(event.time)\"\n                      :color=\"event.color\"\n                      size=\"large\"\n                    >\n                      <div class=\"timeline-content\" :class=\"`timeline-${event.type}`\">\n                        <el-icon class=\"timeline-icon\"><component :is=\"event.icon\" /></el-icon>\n                        <span class=\"timeline-text\">{{ event.label }}</span>\n                      </div>\n                    </el-timeline-item>\n                  </el-timeline>\n                </el-card>\n              </div>\n\n              <!-- 手术状态变化图 - 70%宽度 -->\n              <div class=\"state-chart-section\">\n                <el-card class=\"state-chart-card\">\n                  <div class=\"chart-header\">\n                    <div class=\"chart-title\">手术状态机变化图</div>\n                    <div class=\"chart-legend\">\n                      <div class=\"legend-item\">\n                        <div class=\"legend-color state-normal\"></div>\n                        <span>正常状态</span>\n                      </div>\n                      <div class=\"legend-item\">\n                        <div class=\"legend-color state-error\"></div>\n                        <span>故障状态</span>\n                      </div>\n                      <div class=\"legend-item\">\n                        <div class=\"legend-color state-shutdown\"></div>\n                        <span>关机状态</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n\n                </el-card>\n              </div>\n            </div>\n                        \n            <!-- 手术时长统计 -->\n            <el-card class=\"arm-usage-card\">\n              <template #header>\n                <div class=\"card-header\">\n                  <span>手术统计</span>\n                  <el-tag type=\"info\">总手术时长: {{ surgery.total_duration }} 分钟</el-tag>\n                </div>\n              </template>\n              \n              <!-- 统一时间轴视图 - 结合手术时长和工具臂使用 -->\n              <div class=\"unified-timeline-view\">\n                <!-- \n                  设计理念：\n                  1. 顶部：主时间轴坐标轴 - 显示手术全程时间刻度\n                  2. 底部：工具臂时间线 - 显示各工具臂的激活时间段\n                  \n                  优势：\n                  - 统一的时间基准，便于对比分析\n                  - 直观显示工具臂使用与手术进程的对应关系\n                  - 多层信息叠加，节省空间\n                -->\n                \n                <!-- 手术时长进度条 - 参照 operationTIme.vue 样式 -->\n                <div class=\"surgery-progress-container\">\n                  <!-- 手术时长信息 - 移动到前侧 -->\n                  <div class=\"surgery-duration-info\">\n                    <span class=\"duration-text\">手术时长：{{ surgery.total_duration }} 分钟</span>\n                    <span class=\"time-range\">手术时间：{{ formatTime(surgery.surgery_start_time) }} - {{ formatTime(surgery.surgery_end_time) }}</span>\n                  </div>\n                  \n                  <!-- 手术时间轴容器 -->\n                  <div class=\"surgery-timeline-wrapper\">\n                    <!-- 手术标签 -->\n                    <div class=\"surgery-label\">\n                      <div class=\"surgery-color\"></div>\n                      <span class=\"surgery-name\">手术时间段</span>\n                    </div>\n                    \n                    <!-- 手术进度条 -->\n                    <div class=\"surgery-timeline-container\">\n                      <div class=\"surgery-timeline-bar\">\n                        <div \n                          class=\"surgery-timeline-segment\"\n                          :style=\"getSurgeryTimelineStyle(surgery)\"\n                        >\n                          <span class=\"surgery-segment-text\">手术时间段</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <!-- 时间刻度标签 -->\n                  <div class=\"progress-labels\">\n                    <span class=\"time-label\">{{ formatTimeShort(getTimelineRange(surgery).start) }}</span>\n                    <span class=\"time-label\">{{ formatTimeShort(getTimelineRange(surgery).end) }}</span>\n                  </div>\n                </div>\n                \n                <!-- 工具臂时间线 -->\n                <div class=\"arm-timeline\">\n                  <div \n                    v-for=\"(armUsage, index) in getArmUsages(surgery)\" \n                    :key=\"index\"\n                    class=\"arm-item\"\n                  >\n                    <div class=\"arm-header\">\n                      <div class=\"arm-actions\">\n                        <el-button \n                          size=\"small\" \n                          type=\"primary\" \n                          plain\n                          @click=\"toggleArmDetails(surgery.id, index)\"\n                        >\n                          <el-icon><ArrowDown /></el-icon>\n                          详情\n                        </el-button>\n                       \n                      </div>\n                    </div>\n                    \n                    <!-- 工具臂总激活时间 -->\n                    <div class=\"arm-timeline-container\">\n                      <div class=\"arm-label\">\n                        <div class=\"arm-color\" :class=\"`arm-${index + 1}`\"></div>\n                        <span class=\"arm-name\">工具臂 {{ index + 1 }}</span>\n                      </div>\n                      <div class=\"arm-timeline-bar\">\n                        <div \n                          v-for=\"(segment, segmentIndex) in getArmTimelineSegments(armUsage, surgery)\" \n                          :key=\"segmentIndex\"\n                          class=\"timeline-segment\" \n                          :class=\"`arm-${index + 1}`\" \n                          :style=\"segment\"\n                        >\n                          <el-tooltip \n                            :content=\"`${getSegmentInstrumentName(segment, armUsage, surgery)}`\"\n                            placement=\"top\"\n                            :show-arrow=\"true\"\n                            :popper-class=\"'usage-time-tooltip'\"\n                          >\n                            <div class=\"segment-content\">\n                              <span class=\"segment-text\"> </span>\n                            </div>\n                          </el-tooltip>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <!-- 工具臂详细器械使用时间 -->\n                    <el-collapse-transition>\n                      <div v-show=\"armDetailsVisible[surgery.id + '_' + index]\" class=\"arm-details\">\n                        <!-- 按UID码分组的器械使用 -->\n                        <div \n                          v-for=\"(groupedUsage, udiCode) in getGroupedUsagesByUdi(armUsage)\" \n                          :key=\"udiCode\"\n                          class=\"usage-group\"\n                        >\n                          <div class=\"usage-group-header\">\n                            <div class=\"usage-group-info\">\n                              <div class=\"usage-group-name\">{{ groupedUsage.instrumentName }}</div>\n                              <div class=\"usage-group-udi\">UDI: {{ udiCode }}</div>\n                              <div class=\"usage-group-duration\">总使用时长: {{ getGroupedUsageDuration(groupedUsage) }}</div>\n                            </div>\n                          </div>\n                          \n                          <!-- 使用与arm-timeline-container相同的容器结构，确保基于容器左边偏移相同距离 -->\n                          <div class=\"arm-timeline-container\">\n                         \n                            <div class=\"arm-timeline-bar\">\n                              <div \n                                v-for=\"(usage, usageIndex) in groupedUsage.usages\" \n                                :key=\"usageIndex\"\n                                class=\"timeline-segment\" \n                                :class=\"`arm-${index + 1}`\" \n                                :style=\"getUsageTimelineStyle(usage, surgery)\"\n                              >\n                                <el-tooltip \n                                  :content=\"`器械：${usage.instrumentName}\\n时间：${formatTime(usage.startTime)} - ${formatTime(usage.endTime)}\\n时长：${Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)}分钟`\"\n                                  placement=\"top\"\n                                  :show-arrow=\"true\"\n                                  :popper-class=\"'usage-time-tooltip'\"\n                                >\n                                  <div class=\"segment-content\">\n                                    <span class=\"segment-text\">{{ getSegmentText(usage, surgery) }}</span>\n                                  </div>\n                                </el-tooltip>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <!-- 能量激发时间 -->\n                        <div class=\"energy-time\">\n                          <el-icon class=\"energy-icon\"><Lightning /></el-icon>\n                          器械总使用时间: {{ getEnergyTime(armUsage) }}\n                        </div>\n                      </div>\n                    </el-collapse-transition>\n                  </div>\n                </div>\n              </div>\n            </el-card>\n            \n            <!-- 安全报警信息 -->\n            <el-card class=\"alarm-card\">\n              <template #header>\n                <span>安全报警记录</span>\n              </template>\n              \n              <el-table :data=\"getAlarmDetails(surgery).slice(0, showAllAlarms[surgery.id] ? undefined : 5)\" style=\"width: 100%\">\n                <el-table-column prop=\"time\" label=\"时间\" width=\"180\">\n                  <template #default=\"{ row }\">\n                    {{ formatTime(row.time) }}\n                  </template>\n                </el-table-column>\n                <el-table-column prop=\"code\" label=\"故障码\" width=\"120\">\n                  <template #default=\"{ row }\">\n                    {{ row.code || row.error_code || '无' }}\n                  </template>\n                </el-table-column>\n                <el-table-column prop=\"message\" label=\"报警信息\" />\n                <el-table-column prop=\"status\" label=\"处理状态\" width=\"120\">\n                  <template #default=\"{ row }\">\n                    <el-tag :type=\"row.status === '已恢复' ? 'success' : row.status === '未处理' ? 'danger' : 'warning'\">\n                      {{ row.status }}\n                    </el-tag>\n                  </template>\n                </el-table-column>\n              </el-table>\n              \n              <!-- 展开/折叠按钮 -->\n              <div v-if=\"getAlarmDetails(surgery).length > 5\" class=\"alarm-toggle\">\n                <el-button \n                  type=\"text\" \n                  @click=\"toggleAlarms(surgery.id)\"\n                  size=\"small\"\n                >\n                  <el-icon>\n                    <ArrowDown v-if=\"!showAllAlarms[surgery.id]\" />\n                    <ArrowUp v-else />\n                  </el-icon>\n                  {{ showAllAlarms[surgery.id] ? '收起' : `展开更多 (${getAlarmDetails(surgery).length - 5}条)` }}\n                </el-button>\n              </div>\n              \n              <div class=\"alarm-summary\">\n                <el-tag type=\"danger\">报警总数: {{ surgery.alarm_count || 0 }}</el-tag>\n              </div>\n            </el-card>\n          </el-tab-pane>\n        </el-tabs>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted, nextTick, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter, useRoute } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { \n  DataAnalysis, \n  Download, \n  SwitchButton, \n  Close, \n  VideoPlay, \n  VideoPause, \n  ArrowUp, \n  ArrowDown,\n  ArrowLeft,\n  Calendar,\n  PowerOff,\n  Lightning,\n  Globe,\n  InfoFilled,\n  Loading\n} from '@element-plus/icons-vue'\nimport { debounce, safeNextTick } from '@/utils/resizeObserverFix'\n\nimport api from '@/api'\n\nexport default {\n  name: 'SurgeryStatistics',\n  components: {\n    DataAnalysis,\n    Download,\n    SwitchButton,\n    Close,\n    VideoPlay,\n    VideoPause,\n    ArrowUp,\n    ArrowDown,\n    ArrowLeft,\n    Calendar,\n    PowerOff,\n    Lightning,\n    Globe,\n    InfoFilled,\n    Loading\n  },\n  setup() {\n    const store = useStore()\n    const router = useRouter()\n    const route = useRoute()\n    \n    // ResizeObserver 错误处理已在全局初始化，这里不需要重复处理\n    \n    // 响应式数据\n    const surgeries = ref([])\n    const activeTab = ref('')\n    const armDetailsVisible = reactive({})\n    const showAllAlarms = reactive({})\n    const analyzing = ref(false)\n\n    \n\n\n    // 计算属性 - 获取日志条目数据\n    const logEntries = computed(() => {\n      // 优先从sessionStorage获取手术分析专用数据\n      try {\n        const surgeryData = sessionStorage.getItem('surgeryAnalysisData')\n        if (surgeryData) {\n          const data = JSON.parse(surgeryData)\n          if (data && data.entries && data.entries.length > 0) {\n            // 检查数据是否过期（1小时）\n            const dataAge = Date.now() - (data.timestamp || 0)\n            if (dataAge > 60 * 60 * 1000) {\n              console.log('手术分析数据已过期，清除缓存')\n              sessionStorage.removeItem('surgeryAnalysisData')\n              return []\n            }\n            \n            // 检查是否是压缩格式的数据\n            if (data.compressed) {\n              // 解压缩数据\n              const decompressedEntries = data.entries.map(entry => ({\n                timestamp: entry.t,\n                error_code: entry.e,\n                param1: entry.p1,\n                param2: entry.p2,\n                param3: entry.p3,\n                param4: entry.p4,\n                explanation: entry.exp,\n                log_name: entry.ln\n              }))\n              \n              return decompressedEntries\n            } else {\n              return data.entries\n            }\n          }\n        }\n      } catch (error) {\n        console.error('解析手术分析数据失败:', error)\n        sessionStorage.removeItem('surgeryAnalysisData')\n      }\n      \n      // 如果没有手术分析数据，尝试获取批量分析的日志条目数据\n      try {\n        const batchEntries = sessionStorage.getItem('batchLogEntries')\n        if (batchEntries) {\n          const entries = JSON.parse(batchEntries)\n          if (entries && entries.length > 0) {\n            // 检查是否是压缩格式的数据\n            const isCompressed = sessionStorage.getItem('batchLogEntriesCompressed') === 'true'\n            \n            if (isCompressed) {\n              // 解压缩数据\n              const decompressedEntries = entries.map(entry => ({\n                timestamp: entry.t,\n                error_code: entry.e,\n                param1: entry.p1,\n                param2: entry.p2,\n                param3: entry.p3,\n                param4: entry.p4,\n                explanation: entry.exp,\n                log_name: entry.ln\n              }))\n              \n              return decompressedEntries\n            } else {\n              return entries\n            }\n          }\n        }\n      } catch (error) {\n        console.error('解析批量分析数据失败:', error)\n      }\n      \n      // 如果没有批量分析数据，尝试获取单个日志数据\n      try {\n        const singleEntries = sessionStorage.getItem('logEntries')\n        if (singleEntries) {\n          const entries = JSON.parse(singleEntries)\n          if (entries && entries.length > 0) {\n            return entries\n          }\n        }\n      } catch (error) {\n        console.error('解析单个日志数据失败:', error)\n      }\n      \n      return []\n    })\n    \n    const logEntriesCount = computed(() => logEntries.value.length)\n    \n    // 通过URL参数中的日志ID直接分析手术数据\n    const loadBatchLogEntriesByIds = async () => {\n      try {\n        // 从URL参数获取日志ID\n        const logIdsParam = route.query.logIds\n        if (!logIdsParam) return\n        \n        const logIds = logIdsParam.split(',').map(id => parseInt(id))\n        if (!logIds || logIds.length === 0) return\n        \n        // 设置分析状态\n        analyzing.value = true\n        \n        // 直接调用后端API进行分析，不需要前端加载所有数据\n        const response = await api.surgeryStatistics.analyzeByLogIds(logIds)\n        \n        if (response.data.success) {\n          surgeries.value = response.data.data || []\n          \n          if (surgeries.value.length > 0) {\n            activeTab.value = surgeries.value[0].id.toString()\n            surgeries.value.forEach(surgery => {\n              armDetailsVisible[surgery.id] = false\n              showAllAlarms[surgery.id] = false\n            })\n\n          }\n          \n          ElMessage.success(response.data.message || `成功分析出 ${surgeries.value.length} 场手术`)\n        } else {\n          ElMessage.error(response.data.message || '分析失败')\n        }\n        \n      } catch (error) {\n        ElMessage.error('分析批量日志数据失败: ' + (error.response?.data?.message || error.message))\n      } finally {\n        analyzing.value = false\n      }\n    }\n    \n    // 获取时间范围\n    const getTimeRange = () => {\n      if (logEntries.value.length === 0) return '无数据'\n      \n      const timestamps = logEntries.value.map(entry => new Date(entry.timestamp))\n      const minTime = new Date(Math.min(...timestamps))\n      const maxTime = new Date(Math.max(...timestamps))\n      \n      return `${formatTimeShort(minTime)} 至 ${formatTimeShort(maxTime)}`\n    }\n\n    // 获取分析按钮文本\n    const getAnalysisButtonText = () => {\n      if (logEntriesCount.value === 0) {\n        return '请先加载日志条目数据'\n      }\n      return `分析日志条目 (${logEntriesCount.value})`\n    }\n\n    // 分析日志数据\n    const analyzeLogs = async () => {\n      if (logEntries.value.length === 0) {\n        ElMessage.warning('暂无日志条目数据，请先在批量分析或日志分析页面加载日志数据')\n        return\n      }\n      \n      analyzing.value = true\n      try {\n        // 直接使用已排序的日志条目数据进行手术分析\n        \n        // 检查数据大小\n        const dataSize = JSON.stringify(logEntries.value).length\n        const maxSize = 10 * 1024 * 1024 // 10MB\n        let analysisData = logEntries.value\n        \n        if (dataSize > maxSize) {\n          ElMessage.warning(`数据量较大(${(dataSize / 1024 / 1024).toFixed(1)}MB)，将进行数据采样以提高分析速度`)\n          \n          // 数据采样：保留关键数据点\n          const sampleSize = Math.floor(maxSize / (dataSize / logEntries.value.length))\n          const step = Math.floor(logEntries.value.length / sampleSize)\n          analysisData = []\n          \n          for (let i = 0; i < logEntries.value.length; i += step) {\n            analysisData.push(logEntries.value[i])\n            if (analysisData.length >= sampleSize) break\n          }\n          \n        }\n        \n\n        \n        // 调用新的API端点，传递已排序的日志条目数据\n        const response = await api.surgeryStatistics.analyzeSortedEntries(analysisData)\n        \n        if (response.data.success) {\n          surgeries.value = response.data.data || []\n          \n          \n          \n          if (surgeries.value.length > 0) {\n            activeTab.value = surgeries.value[0].id.toString()\n            surgeries.value.forEach(surgery => {\n              armDetailsVisible[surgery.id] = false\n              showAllAlarms[surgery.id] = false\n            })\n          }\n          \n          ElMessage.success(`手术数据分析完成，共发现 ${surgeries.value.length} 场手术`)\n        } else {\n          ElMessage.error(response.data.message || '分析失败')\n        }\n      } catch (error) {\n        ElMessage.error('分析日志数据失败: ' + (error.response?.data?.message || error.message))\n      } finally {\n        analyzing.value = false\n      }\n    }\n\n    // 导出报告\n    const exportReport = async (surgeryId) => {\n      try {\n        const response = await api.surgeryStatistics.exportReport(surgeryId)\n        ElMessage.success('报告导出功能开发中')\n      } catch (error) {\n        ElMessage.error('导出报告失败')\n      }\n    }\n\n    // 切换工具臂详情显示\n    const toggleArmDetails = (surgeryId, armIndex) => {\n      const key = `${surgeryId}_${armIndex}`\n      armDetailsVisible[key] = !armDetailsVisible[key]\n    }\n\n    // 切换报警记录显示\n    const toggleAlarms = (surgeryId) => {\n      showAllAlarms[surgeryId] = !showAllAlarms[surgeryId]\n    }\n\n    // 获取工具臂使用情况\n    const getArmUsages = (surgery) => {\n      return [\n        surgery.arm1_usage || [],\n        surgery.arm2_usage || [],\n        surgery.arm3_usage || [],\n        surgery.arm4_usage || []\n      ]\n    }\n\n    // 获取工具臂总时间\n    const getArmTotalTime = (armUsage) => {\n      if (!armUsage || armUsage.length === 0) return '0分钟'\n      \n      // 计算所有完整使用时间段的总时长\n      const totalMinutes = armUsage\n        .filter(usage => usage.startTime && usage.endTime)\n        .reduce((total, usage) => {\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)\n          return total + duration\n        }, 0)\n      \n      return `${totalMinutes}分钟`\n    }\n\n    // 获取报警类型标签类型\n    const getAlarmTypeTag = (type) => {\n      switch (type) {\n        case '错误':\n          return 'danger'\n        case '警告':\n          return 'warning'\n        case '网络':\n          return 'info'\n        default:\n          return 'info'\n      }\n    }\n\n    // 获取报警详情\n    const getAlarmDetails = (surgery) => {\n      if (!surgery || !surgery.alarm_details) return []\n      \n      let details = []\n      \n      if (typeof surgery.alarm_details === 'string') {\n        try {\n          details = JSON.parse(surgery.alarm_details)\n        } catch (error) {\n          console.error('解析alarm_details字符串失败:', error)\n          return []\n        }\n      } else {\n        details = surgery.alarm_details || []\n      }\n      \n      return details\n    }\n\n    // 格式化时间（24小时制）\n    const formatTime = (time) => {\n      if (!time) return '-'\n      const date = new Date(time)\n      const year = date.getFullYear()\n      const month = String(date.getMonth() + 1).padStart(2, '0')\n      const day = String(date.getDate()).padStart(2, '0')\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      const seconds = String(date.getSeconds()).padStart(2, '0')\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n    }\n\n    // 格式化手术时间范围\n    const formatSurgeryTime = (surgery) => {\n      if (!surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return '手术时间未确定'\n      }\n      const start = new Date(surgery.surgery_start_time).toLocaleString()\n      const end = new Date(surgery.surgery_end_time).toLocaleString()\n      return `${start} ~ ${end}`\n    }\n\n    // 格式化短时间（24小时制）\n    const formatTimeShort = (time) => {\n      if (!time) return '-'\n      const date = new Date(time)\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      return `${hours}:${minutes}`\n    }\n\n    // 获取统一的时间轴范围（确保所有时间计算使用相同基准）\n    const getTimelineRange = (surgery) => {\n      if (!surgery) return { start: null, end: null }\n      \n      // 获取开机时间\n      const powerOnTime = getPowerOnTime(surgery)\n      \n      // 获取手术结束时间\n      const surgeryEndTime = surgery.surgery_end_time\n      \n      // 获取关机时间\n      const powerOffTime = getPowerOffTime(surgery)\n      \n      // 确定时间轴起点：优先使用开机时间，如果没有则使用手术开始时间\n      let start = powerOnTime\n      if (!start && surgery.surgery_start_time) {\n        start = surgery.surgery_start_time\n      }\n      \n      // 确定时间轴终点：优先使用手术结束时间，如果没有则使用关机时间\n      let end = surgeryEndTime\n      if (!end && powerOffTime) {\n        end = powerOffTime\n      }\n      \n      // 如果仍然没有结束时间，使用最后一条日志的时间\n      if (!end && surgery.last_log_time) {\n        end = surgery.last_log_time\n      }\n      \n      // 确保开始时间早于结束时间\n      if (start && end) {\n        const startTime = new Date(start).getTime()\n        const endTime = new Date(end).getTime()\n        \n        if (startTime >= endTime) {\n          console.warn('时间轴范围异常：开始时间晚于或等于结束时间', {\n            surgery_id: surgery.surgery_id,\n            start: start,\n            end: end,\n            startTime: startTime,\n            endTime: endTime\n          })\n          // 如果时间范围异常，使用手术开始和结束时间\n          if (surgery.surgery_start_time && surgery.surgery_end_time) {\n            start = surgery.surgery_start_time\n            end = surgery.surgery_end_time\n          }\n        }\n      }\n      \n      return { start, end }\n    }\n\n    // 计算时间在时间轴上的位置百分比（改进版本，支持跨天）\n    const getTimePosition = (time, startTime, endTime) => {\n      if (!time || !startTime || !endTime) return 0\n      \n      try {\n        // 确保时间格式正确\n        const start = new Date(startTime).getTime()\n        const end = new Date(endTime).getTime()\n        const current = new Date(time).getTime()\n        \n        // 检查时间有效性\n        if (isNaN(start) || isNaN(end) || isNaN(current)) {\n          console.warn('时间计算异常：无效的时间值', { time, startTime, endTime })\n          return 0\n        }\n        \n        // 检查时间顺序\n        if (start >= end) {\n          console.warn('时间轴范围异常：开始时间晚于或等于结束时间', { startTime, endTime })\n          return 0\n        }\n        \n        // 计算位置百分比\n        const position = ((current - start) / (end - start)) * 100\n        \n        // 确保位置在有效范围内\n        return Math.max(0, Math.min(100, position))\n      } catch (error) {\n        console.error('时间位置计算失败:', error, { time, startTime, endTime })\n        return 0\n      }\n    }\n\n    // 获取时间轴刻度位置\n    const getTimelineTicks = (startTime, endTime) => {\n      if (!startTime || !endTime) return []\n      const start = new Date(startTime)\n      const end = new Date(endTime)\n      const duration = end.getTime() - start.getTime()\n      \n      // 根据手术时长决定刻度间隔\n      let interval\n      if (duration <= 30 * 60 * 1000) { // 30分钟以内，5分钟间隔\n        interval = 5 * 60 * 1000\n      } else if (duration <= 2 * 60 * 60 * 1000) { // 2小时以内，15分钟间隔\n        interval = 15 * 60 * 1000\n      } else { // 超过2小时，30分钟间隔\n        interval = 30 * 60 * 1000\n      }\n      \n      const ticks = []\n      let current = start.getTime() + interval // 从第一个间隔开始，避免与开始时间重叠\n      while (current < end.getTime()) { // 使用 < 而不是 <=，避免与结束时间重叠\n        const position = getTimePosition(current, startTime, endTime)\n        ticks.push({\n          time: new Date(current),\n          position: position\n        })\n        current += interval\n      }\n      \n      return ticks\n    }\n\n    // 合并重叠的时间段\n    const mergeOverlappingTimeRanges = (usages) => {\n      if (!usages || usages.length === 0) return []\n      \n      // 将使用记录转换为时间范围对象\n      const timeRanges = usages.map(usage => ({\n        startTime: new Date(usage.startTime).getTime(),\n        endTime: new Date(usage.endTime).getTime()\n      }))\n      \n      // 按开始时间排序\n      timeRanges.sort((a, b) => a.startTime - b.startTime)\n      \n      const merged = []\n      let current = timeRanges[0]\n      \n      for (let i = 1; i < timeRanges.length; i++) {\n        const next = timeRanges[i]\n        \n        // 如果当前时间段与下一个时间段重叠或相邻，则合并\n        if (current.endTime >= next.startTime) {\n          current.endTime = Math.max(current.endTime, next.endTime)\n        } else {\n          // 不重叠，添加当前时间段到结果中\n          merged.push(current)\n          current = next\n        }\n      }\n      \n      // 添加最后一个时间段\n      if (current) {\n        merged.push(current)\n      }\n      \n      return merged\n    }\n\n    // 获取工具臂时间线样式（时间对齐）\n    const getArmTimelineStyle = (armUsage, surgery) => {\n      if (!armUsage || armUsage.length === 0 || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 找到所有完整的使用时间段（有开始和结束时间）\n      const completeUsages = armUsage.filter(usage => usage.startTime && usage.endTime)\n      \n      if (completeUsages.length === 0) return { left: '0%', width: '0%' }\n      \n      // 如果有多个器械使用时间段，需要合并重叠的时间段\n      const mergedTimeRanges = mergeOverlappingTimeRanges(completeUsages)\n      \n      if (mergedTimeRanges.length === 0) return { left: '0%', width: '0%' }\n      \n      // 计算所有合并后时间段的总长度\n      let totalWidth = 0\n      const segments = []\n      \n      // 使用统一的时间轴范围\n      const timelineRange = getTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return { left: '0%', width: '0%' }\n      \n      mergedTimeRanges.forEach(range => {\n        const startPosition = getTimePosition(range.startTime, timelineRange.start, timelineRange.end)\n        const endPosition = getTimePosition(range.endTime, timelineRange.start, timelineRange.end)\n        const width = Math.max(0, endPosition - startPosition)\n        \n        segments.push({\n          left: `${startPosition}%`,\n          width: `${width}%`\n        })\n        \n        totalWidth += width\n      })\n      \n      // 如果有多个时间段，返回第一个（主要时间段）\n      // 如果需要显示多个时间段，可以在这里扩展逻辑\n      return segments.length > 0 ? segments[0] : { left: '0%', width: '0%' }\n    }\n\n    // 获取工具臂时间线所有段（用于显示多个时间段）\n    const getArmTimelineSegments = (armUsage, surgery) => {\n      if (!armUsage || armUsage.length === 0 || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return []\n      }\n      \n      // 找到所有完整的使用时间段（有开始和结束时间）\n      const completeUsages = armUsage.filter(usage => usage.startTime && usage.endTime)\n      \n      if (completeUsages.length === 0) return []\n      \n      // 合并重叠的时间段\n      const mergedTimeRanges = mergeOverlappingTimeRanges(completeUsages)\n      \n      if (mergedTimeRanges.length === 0) return []\n      \n      // 计算所有合并后时间段的样式\n      const segments = []\n      \n      // 使用统一的时间轴范围\n      const timelineRange = getTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return []\n      \n      mergedTimeRanges.forEach((range, index) => {\n        const startPosition = getTimePosition(range.startTime, timelineRange.start, timelineRange.end)\n        const endPosition = getTimePosition(range.endTime, timelineRange.start, timelineRange.end)\n        const width = Math.max(0, endPosition - startPosition)\n        \n        if (width > 0) {\n          segments.push({\n            left: `${startPosition}%`,\n            width: `${width}%`\n          })\n        }\n      })\n      \n      return segments\n    }\n\n    // 获取手术时间段在总时间轴上的样式\n    const getSurgeryTimelineStyle = (surgery) => {\n      if (!surgery || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 使用统一的时间轴范围\n      const timelineRange = getTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      const startPosition = getTimePosition(surgery.surgery_start_time, timelineRange.start, timelineRange.end)\n      const endPosition = getTimePosition(surgery.surgery_end_time, timelineRange.start, timelineRange.end)\n      const width = Math.max(0, endPosition - startPosition)\n      \n      return { \n        left: `${startPosition}%`, \n        width: `${width}%` \n      }\n    }\n\n    // 获取使用时间线样式（时间对齐）\n    const getUsageTimelineStyle = (usage, surgery) => {\n      if (!usage || !surgery.surgery_start_time || !surgery.surgery_end_time) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 检查是否有完整的时间段信息\n      if (!usage.startTime || !usage.endTime) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      // 使用统一的时间轴范围，确保与arm-timeline-bar完全对齐\n      const timelineRange = getTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) {\n        return { left: '0%', width: '0%' }\n      }\n      \n      const startTime = new Date(usage.startTime).getTime()\n      const endTime = new Date(usage.endTime).getTime()\n      \n      // 使用与arm-timeline-bar完全相同的时间计算逻辑\n      const startPosition = getTimePosition(startTime, timelineRange.start, timelineRange.end)\n      const endPosition = getTimePosition(endTime, timelineRange.start, timelineRange.end)\n      \n      // 确保进度条宽度不为负数，并且位置在有效范围内\n      const width = Math.max(0, endPosition - startPosition)\n      const left = Math.max(0, Math.min(100 - width, startPosition))\n      \n      return { \n        left: `${left}%`, \n        width: `${width}%` \n      }\n    }\n\n    // 获取能量时间\n    const getEnergyTime = (armUsage) => {\n      if (!armUsage || armUsage.length === 0) return '0分0秒'\n      \n      // 计算所有完整使用时间段的总时长\n      const totalSeconds = armUsage\n        .filter(usage => usage.startTime && usage.endTime)\n        .reduce((total, usage) => {\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000)\n          return total + duration\n        }, 0)\n      \n      const minutes = Math.floor(totalSeconds / 60)\n      const seconds = totalSeconds % 60\n      return `${minutes}分${seconds}秒`\n    }\n\n\n\n    // 获取开机时间：支持多个开机时间\n    const getPowerOnTime = (surgery) => {\n      if (!surgery) return null\n      \n      // 如果有开机时间数组，返回第一个（最早的开机时间）\n      if (surgery.power_on_times && surgery.power_on_times.length > 0) {\n        return surgery.power_on_times[0]\n      }\n      \n      // 兼容旧版本：如果有单个开机时间，直接使用\n      if (surgery.power_on_time) {\n        return surgery.power_on_time\n      }\n      \n      // 如果没有开机时间，使用手术开始时间\n      return surgery.surgery_start_time\n    }\n\n    // 获取关机时间：支持多个关机时间\n    const getPowerOffTime = (surgery) => {\n      if (!surgery) return null\n      \n      // 优先使用手术结束时间作为时间轴终点\n      if (surgery.surgery_end_time) {\n        return surgery.surgery_end_time\n      }\n      \n      // 如果有关机时间数组，返回最后一个（最晚的关机时间）\n      if (surgery.shutdown_times && surgery.shutdown_times.length > 0) {\n        return surgery.shutdown_times[surgery.shutdown_times.length - 1]\n      }\n      \n      // 兼容旧版本：如果有单个关机时间，直接使用\n      if (surgery.power_off_time) {\n        return surgery.power_off_time\n      }\n      \n      return null\n    }\n\n    // 获取所有开机时间\n    const getAllPowerOnTimes = (surgery) => {\n      if (!surgery) return []\n      \n      // 如果有开机时间数组，返回所有\n      if (surgery.power_on_times && surgery.power_on_times.length > 0) {\n        return surgery.power_on_times\n      }\n      \n      // 兼容旧版本：如果有单个开机时间，返回数组\n      if (surgery.power_on_time) {\n        return [surgery.power_on_time]\n      }\n      \n      return []\n    }\n\n    // 获取所有关机时间\n    const getAllPowerOffTimes = (surgery) => {\n      if (!surgery) return []\n      \n      // 如果有关机时间数组，返回所有\n      if (surgery.shutdown_times && surgery.shutdown_times.length > 0) {\n        return surgery.shutdown_times\n      }\n      \n      // 兼容旧版本：如果有单个关机时间，返回数组\n      if (surgery.power_off_time) {\n        return [surgery.power_off_time]\n      }\n      \n      return []\n    }\n\n    // 获取按时间排序的所有事件\n    const getSortedTimelineEvents = (surgery) => {\n      if (!surgery) return []\n      \n      const events = []\n      \n      // 添加开机事件 - 支持多个开机时间\n      const powerOnTimes = getAllPowerOnTimes(surgery)\n      powerOnTimes.forEach((time, index) => {\n        events.push({\n          time: new Date(time),\n          type: 'powerOn',\n          label: powerOnTimes.length > 1 ? `开机 ${index + 1}` : '开机',\n          color: 'green',\n          icon: 'PowerOff'\n        })\n      })\n      \n      // 添加手术开始事件\n      if (surgery.surgery_start_time) {\n        events.push({\n          time: new Date(surgery.surgery_start_time),\n          type: 'surgeryStart',\n          label: '手术开始',\n          color: 'blue',\n          icon: 'VideoPlay'\n        })\n      }\n      \n      // 添加手术结束事件\n      if (surgery.surgery_end_time) {\n        events.push({\n          time: new Date(surgery.surgery_end_time),\n          type: 'surgeryEnd',\n          label: '手术结束',\n          color: 'orange',\n          icon: 'VideoPause'\n        })\n      }\n      \n      // 添加关机事件 - 支持多个关机时间\n      const powerOffTimes = getAllPowerOffTimes(surgery)\n      powerOffTimes.forEach((time, index) => {\n        events.push({\n          time: new Date(time),\n          type: 'powerOff',\n          label: powerOffTimes.length > 1 ? `关机 ${index + 1}` : '关机',\n          color: 'red',\n          icon: 'PowerOff'\n        })\n      })\n      \n      // 按时间排序\n      return events.sort((a, b) => a.time.getTime() - b.time.getTime())\n    }\n\n    // 获取手术状态变化数据\n    const getStateChanges = (surgery) => {\n      if (!surgery) return []\n      \n      // 优先使用后端提供的状态机变化数据\n      let stateMachineChanges = []\n      \n      if (surgery.state_machine_changes) {\n        if (typeof surgery.state_machine_changes === 'string') {\n          try {\n            stateMachineChanges = JSON.parse(surgery.state_machine_changes)\n          } catch (error) {\n            console.error('解析state_machine_changes字符串失败:', error)\n            stateMachineChanges = []\n          }\n        } else {\n          stateMachineChanges = surgery.state_machine_changes || []\n        }\n      }\n      \n      // 调试信息\n      console.log('手术状态机变化数据:', surgery.surgery_id, stateMachineChanges)\n      \n      // 如果没有状态机变化数据，返回空数组\n      if (stateMachineChanges.length === 0) {\n        console.log('没有状态机变化数据')\n        return []\n      }\n      \n      // 将状态机变化数据转换为柱状图数据\n      const stateChanges = []\n      \n      for (let i = 0; i < stateMachineChanges.length; i++) {\n        const currentChange = stateMachineChanges[i]\n        const nextChange = stateMachineChanges[i + 1]\n        \n        const currentState = parseInt(currentChange.state)\n        const startTime = new Date(currentChange.time)\n        const endTime = nextChange ? new Date(nextChange.time) : (surgery.surgery_end_time ? new Date(surgery.surgery_end_time) : new Date())\n        const duration = endTime.getTime() - startTime.getTime()\n        \n        // 调试信息\n        console.log(`状态变化 ${i}: currentState=${currentState}, startTime=${startTime}, endTime=${endTime}, duration=${duration}ms`)\n        \n        // 根据currentState分类 - 新的阶段定义\n        let stateCategory = 'none'\n        \n        // 关机到开机阶段 (currentState <= 0) 不显示柱状图\n        if (currentState <= 0) {\n          stateCategory = 'none'\n        } \n        // currentState < 30 都用浅绿色柱状体表示\n        else if (currentState > 0 && currentState < 30) {\n          stateCategory = 'surgery' // 浅绿色 - 正常阶段\n        } \n        // currentState = 30 且未变化至 currentState >= 10 时都用红色柱状体表示\n        else if (currentState === 30) {\n          // 检查下一个状态是否 >= 10，如果不是则标记为错误\n          const nextState = nextChange ? parseInt(nextChange.state) : null\n          if (nextState === null || nextState < 10) {\n            stateCategory = 'error' // 红色 - 故障阶段\n          } else {\n            stateCategory = 'surgery' // 浅绿色 - 正常阶段\n          }\n        }\n        // currentState > 30 的其他状态不显示柱状图\n        else {\n          stateCategory = 'none'\n        }\n        \n        console.log(`状态分类: currentState=${currentState}, nextState=${nextChange ? nextChange.state : 'null'} -> stateCategory=${stateCategory}`)\n        \n        if (stateCategory !== 'none') {\n          stateChanges.push({\n            state: stateCategory,\n            startTime: startTime,\n            endTime: endTime,\n            duration: duration,\n            originalState: currentState,\n            stateName: currentChange.stateName || `状态${currentState}`\n          })\n        }\n      }\n      \n      console.log('生成的柱状图数据:', stateChanges)\n      return stateChanges\n    }\n\n    // 获取状态名称\n    const getStateName = (state) => {\n      const stateMap = {\n        'surgery': '正常阶段',\n        'error': '故障阶段',\n        'idle': '空闲',\n        'active': '激活',\n        'standby': '待机',\n        'offline': '离线'\n      }\n      return stateMap[state] || state\n    }\n\n    // 计算状态柱状图高度\n    const getStateBarHeight = (state) => {\n      // 根据状态类型设置不同高度\n      const heightMap = {\n        'surgery': 60,     // 正常阶段 60% 高度 (浅绿色)\n        'error': 100       // 故障阶段 100% 高度 (红色)\n      }\n      const height = heightMap[state] || 60;\n      console.log(`柱状图高度: state=${state}, height=${height}px`);\n      return height;\n    }\n\n    // 计算状态柱状图位置\n    const getStateBarPosition = (startTime, surgery) => {\n      if (!startTime || !surgery) return 0\n      \n      const timelineRange = getTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return 0\n      \n      const position = getTimePosition(startTime, timelineRange.start, timelineRange.end)\n      console.log(`柱状图位置计算: startTime=${startTime}, timelineStart=${timelineRange.start}, timelineEnd=${timelineRange.end}, position=${position}%`)\n      \n      // 确保位置在有效范围内\n      const clampedPosition = Math.max(0, Math.min(95, position)) // 留出5%的边距\n      return clampedPosition\n    }\n\n\n\n    // 按UID码分组器械使用\n    const getGroupedUsagesByUdi = (armUsage) => {\n      const grouped = {}\n      armUsage.forEach((usage, index) => {\n        // 使用UDI码作为分组键，如果没有UDI则使用器械名称和索引\n        const udi = usage.udi || `${usage.instrumentName}_${index}`\n        if (!grouped[udi]) {\n          grouped[udi] = {\n            instrumentName: usage.instrumentName,\n            usages: []\n          }\n        }\n        grouped[udi].usages.push(usage)\n      })\n      return grouped\n    }\n\n    // 获取分组器械的总使用时长\n    const getGroupedUsageDuration = (groupedUsage) => {\n      if (!groupedUsage || groupedUsage.usages.length === 0) return '0分钟'\n      \n      const totalDuration = groupedUsage.usages\n        .filter(usage => usage.startTime && usage.endTime)\n        .reduce((total, usage) => {\n          const duration = Math.floor((new Date(usage.endTime) - new Date(usage.startTime)) / 1000 / 60)\n          return total + duration\n        }, 0)\n      \n      return `${totalDuration}分钟`\n    }\n\n         // 根据进度条宽度获取合适的显示文本\n     const getSegmentText = (usage, surgery) => {\n       try {\n         // 计算进度条宽度百分比\n         const style = getUsageTimelineStyle(usage, surgery);\n         const width = style.width;\n         const widthPercent = parseFloat(width);\n         \n         // 获取器械名称\n         const instrumentName = usage.instrumentName || '器械';\n         \n         // 计算所需的最小宽度（每个字符约1.5%宽度，加上一些边距）\n         const minWidthPerChar = 1.5;\n         const padding = 2; // 左右边距\n         const requiredWidth = Math.min(instrumentName.length * minWidthPerChar + padding, 20); // 最大20%\n         \n         // 只有当宽度足够显示器械名称时才显示文本\n         if (widthPercent >= requiredWidth) {\n           // 如果宽度足够显示完整名称，直接显示\n           if (widthPercent >= instrumentName.length * minWidthPerChar + padding) {\n             return instrumentName;\n           } else {\n             // 否则截断显示\n             const maxChars = Math.floor((widthPercent - padding) / minWidthPerChar);\n             return instrumentName.substring(0, maxChars) + '...';\n           }\n         } else {\n           // 宽度不足，不显示任何文本\n           return '';\n         }\n       } catch (error) {\n         console.error('计算进度条文本失败:', error);\n         return '';\n       }\n     };\n\n    // 获取时间段对应的器械名称\n    const getSegmentInstrumentName = (segment, armUsage, surgery) => {\n      if (!segment || !armUsage || !surgery) return '未知器械'\n      \n      // 获取时间轴范围\n      const timelineRange = getTimelineRange(surgery)\n      if (!timelineRange.start || !timelineRange.end) return '未知器械'\n      \n      // 计算时间段的开始和结束时间\n      const startPercent = parseFloat(segment.left)\n      const endPercent = startPercent + parseFloat(segment.width)\n      \n      const startTime = new Date(timelineRange.start).getTime() + (startPercent / 100) * (new Date(timelineRange.end).getTime() - new Date(timelineRange.start).getTime())\n      const endTime = new Date(timelineRange.start).getTime() + (endPercent / 100) * (new Date(timelineRange.end).getTime() - new Date(timelineRange.start).getTime())\n      \n      // 查找在这个时间段内使用的器械\n      const instrumentsInSegment = armUsage.filter(usage => {\n        if (!usage.startTime || !usage.endTime) return false\n        \n        const usageStart = new Date(usage.startTime).getTime()\n        const usageEnd = new Date(usage.endTime).getTime()\n        \n        // 检查是否有重叠\n        return usageStart < endTime && usageEnd > startTime\n      })\n      \n      if (instrumentsInSegment.length === 0) return '无器械使用'\n      \n      // 返回第一个找到的器械名称\n      return instrumentsInSegment[0].instrumentName || '未知器械'\n    }\n\n    \n\n\n    // 标签页点击处理 - 使用防抖和安全的 nextTick\n    const handleTabClick = debounce((tab) => {\n      safeNextTick(() => {\n        activeTab.value = tab.name\n      })\n    }, 50)\n\n    // 标签页切换前的处理 - 使用安全的 nextTick\n    const handleBeforeTabLeave = (newTabName, oldTabName) => {\n      return safeNextTick().then(() => true)\n    }\n\n\n\n    // 生命周期\n    onMounted(async () => {\n      // 立即拦截 ResizeObserver 错误\n      const suppressResizeObserverErrors = () => {\n        // 重写 console.error\n        const originalError = console.error\n        console.error = (...args) => {\n          if (args[0] && typeof args[0] === 'string' && args[0].includes('ResizeObserver loop completed with undelivered notifications')) {\n            return\n          }\n          originalError.apply(console, args)\n        }\n        \n        // 重写 window.handleError\n        if (window.handleError) {\n          const originalHandleError = window.handleError\n          window.handleError = (error) => {\n            if (error && error.message && error.message.includes('ResizeObserver loop completed with undelivered notifications')) {\n              return\n            }\n            return originalHandleError(error)\n          }\n        }\n      }\n      \n      // 立即应用错误抑制\n      suppressResizeObserverErrors()\n      \n      // 添加 ResizeObserver 错误处理\n      const handleResizeObserverError = (event) => {\n        if (event.message && event.message.includes('ResizeObserver loop completed with undelivered notifications')) {\n          event.preventDefault()\n          return false\n        }\n      }\n      \n      // 监听错误事件\n      window.addEventListener('error', handleResizeObserverError)\n      \n      // 监听未处理的 Promise 错误\n      const handleUnhandledRejection = (event) => {\n        if (event.reason && event.reason.message && event.reason.message.includes('ResizeObserver loop completed with undelivered notifications')) {\n          event.preventDefault()\n          return false\n        }\n      }\n      window.addEventListener('unhandledrejection', handleUnhandledRejection)\n      \n      try {\n        // 检查URL参数中是否有批量日志ID需要分析\n        const logIdsParam = route.query.logIds\n        if (logIdsParam) {\n          try {\n            const logIds = logIdsParam.split(',').map(id => parseInt(id))\n            if (logIds && logIds.length > 0) {\n              // 自动分析批量日志数据\n              await loadBatchLogEntriesByIds()\n              return // 如果进行了批量分析，就不需要继续检查其他数据\n            }\n          } catch (error) {\n            console.error('解析URL参数中的日志ID失败:', error)\n          }\n        }\n        \n        // 直接检查sessionStorage中的数据\n        let batchData = null\n        let singleData = null\n        \n        try {\n          const batchEntries = sessionStorage.getItem('batchLogEntries')\n          if (batchEntries) {\n            batchData = JSON.parse(batchEntries)\n          }\n        } catch (error) {\n          // 静默处理错误\n        }\n        \n        try {\n          const singleEntries = sessionStorage.getItem('logEntries')\n          if (singleEntries) {\n            singleData = JSON.parse(singleEntries)\n          }\n        } catch (error) {\n          // 静默处理错误\n        }\n        \n        // 检查computed属性\n        \n        // 检查是否需要自动分析\n        const autoAnalyze = sessionStorage.getItem('autoAnalyze')\n        const autoAnalyzeLogId = sessionStorage.getItem('autoAnalyzeLogId')\n        if (autoAnalyze === 'true' && autoAnalyzeLogId) {\n          sessionStorage.removeItem('autoAnalyze') // 清除标志\n          sessionStorage.removeItem('autoAnalyzeLogId') // 清除日志ID\n          // 延迟一下确保页面完全加载\n          setTimeout(() => {\n            // 使用日志ID进行分析，而不是传递大量日志条目数据\n            loadBatchLogEntriesByIds()\n          }, 1000)\n        }\n      } catch (error) {\n        console.error('页面初始化错误:', error)\n      }\n      \n      // 清理函数\n      return () => {\n        window.removeEventListener('error', handleResizeObserverError)\n        window.removeEventListener('unhandledrejection', handleUnhandledRejection)\n      }\n    })\n\n          return {\n        surgeries,\n        activeTab,\n        armDetailsVisible,\n        showAllAlarms,\n        analyzing,\n        logEntriesCount,\n        analyzeLogs,\n        exportReport,\n        toggleArmDetails,\n        toggleAlarms,\n        getArmUsages,\n        getArmTotalTime,\n        getArmTimelineStyle,\n              getArmTimelineSegments,\n      getSurgeryTimelineStyle,\n      getUsageTimelineStyle,\n        getEnergyTime,\n        getAlarmTypeTag,\n        getAlarmDetails,\n        formatTime,\n        formatSurgeryTime,\n        formatTimeShort,\n        getTimePosition,\n        getTimelineTicks,\n        handleTabClick,\n        getAnalysisButtonText,\n        getTimeRange,\n        loadBatchLogEntriesByIds,\n        getPowerOnTime,\n        getPowerOffTime,\n        getAllPowerOnTimes,\n        getAllPowerOffTimes,\n        getSurgeryTimelineStyle,\n        getGroupedUsagesByUdi,\n        getGroupedUsageDuration,\n        getSegmentText,\n        getTimelineRange,\n        getSegmentInstrumentName,\n        getSortedTimelineEvents,\n        getStateChanges,\n        getStateName,\n        getStateBarHeight,\n        getStateBarPosition,\n        handleBeforeTabLeave,\n\n        // 调试函数：检查手术时间数据\n        debugSurgeryTimeData: (surgery) => {\n          if (!surgery) return;\n          \n          console.log('=== 手术时间数据调试 ===');\n          console.log('手术ID:', surgery.surgery_id);\n          console.log('开机时间:', surgery.power_on_times);\n          console.log('关机时间:', surgery.shutdown_times);\n          console.log('手术开始时间:', surgery.surgery_start_time);\n          console.log('手术结束时间:', surgery.surgery_end_time);\n          console.log('最后日志时间:', surgery.last_log_time);\n          \n          // 检查开机时间数据\n          const powerOnTimes = getAllPowerOnTimes(surgery);\n          console.log('解析的开机时间:', powerOnTimes);\n          console.log('开机时间数量:', powerOnTimes.length);\n          \n          // 检查关机时间数据\n          const powerOffTimes = getAllPowerOffTimes(surgery);\n          console.log('解析的关机时间:', powerOffTimes);\n          console.log('关机时间数量:', powerOffTimes.length);\n          \n          // 检查时间线事件\n          const timelineEvents = getSortedTimelineEvents(surgery);\n          console.log('时间线事件:', timelineEvents);\n          console.log('时间线事件数量:', timelineEvents.length);\n          \n          const timelineRange = getTimelineRange(surgery);\n          console.log('计算的时间轴范围:', timelineRange);\n          \n          if (timelineRange.start && timelineRange.end) {\n            const startTime = new Date(timelineRange.start);\n            const endTime = new Date(timelineRange.end);\n            const duration = endTime.getTime() - startTime.getTime();\n            \n            console.log('时间轴详细信息:', {\n              start: startTime.toISOString(),\n              end: endTime.toISOString(),\n              duration: Math.floor(duration / 1000 / 60) + '分钟',\n              isCrossDay: startTime.getDate() !== endTime.getDate() || \n                         startTime.getMonth() !== endTime.getMonth() || \n                         startTime.getFullYear() !== endTime.getFullYear()\n            });\n          }\n          \n          console.log('=== 调试结束 ===');\n        }\n\n      }\n  }\n}\n</script>\n\n<style scoped>\n.surgery-statistics-container {\n  padding: 20px;\n  min-height: calc(100vh - 40px);\n  box-sizing: border-box;\n}\n\n.action-bar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.analysis-section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  min-height: 400px;\n}\n\n.title-section {\n  display: flex;\n  flex-direction: column;\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.page-subtitle {\n  margin: 4px 0 0 0;\n  font-size: 14px;\n  color: #909399;\n}\n\n.empty-card {\n  text-align: center;\n  padding: 40px;\n  margin-top: 100px;\n}\n\n.empty-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  min-height: 300px;\n  justify-content: center;\n}\n\n.empty-icon {\n  font-size: 48px;\n  color: #C0C4CC;\n}\n\n.empty-content h3 {\n  margin: 0;\n  font-size: 18px;\n  color: #303133;\n}\n\n.empty-content p {\n  margin: 0;\n  color: #909399;\n}\n\n.log-entries-info {\n  width: 100%;\n  max-width: 600px;\n  margin: 20px 0;\n  text-align: left;\n}\n\n.entries-preview {\n  font-size: 12px;\n  color: #606266;\n  margin-top: 8px;\n}\n\n.analysis-info-card {\n  margin-bottom: 20px;\n}\n\n.tab-card {\n  border-radius: 8px;\n  min-height: 500px;\n  /* 优化ResizeObserver性能 */\n  contain: layout style paint;\n}\n\n/* 优化标签页性能 */\n.el-tabs__content {\n  contain: layout style paint;\n}\n\n.el-tab-pane {\n  contain: layout style paint;\n}\n\n/* 减少标签页切换时的重绘 */\n.el-tabs__item {\n  will-change: auto;\n}\n\n.el-tabs__content {\n  will-change: auto;\n}\n\n/* 禁用标签页切换动画，减少 ResizeObserver 错误 */\n.el-tabs__item {\n  transition: none !important;\n}\n\n.el-tabs__content {\n  transition: none !important;\n}\n\n.el-tab-pane {\n  transition: none !important;\n}\n\n/* 优化标签页内容渲染 */\n.el-tabs__content > .el-tab-pane {\n  contain: layout style paint;\n  will-change: auto;\n}\n\n/* 减少标签页切换时的布局计算 */\n.el-tabs__header {\n  contain: layout style paint;\n}\n\n.el-tabs__nav-wrap {\n  contain: layout style paint;\n}\n\n.el-tabs__nav {\n  contain: layout style paint;\n}\n\n.export-section {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 20px;\n}\n\n/* 手术信息布局 */\n.surgery-info-layout {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n  align-items: stretch;\n}\n\n.timeline-section {\n  width: 30%;\n  flex-shrink: 0;\n}\n\n.state-chart-section {\n  width: 70%;\n  flex-shrink: 0;\n}\n\n/* 手术信息卡片样式 */\n.info-card {\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  /* 确保时间线内容不被遮挡 */\n  overflow: visible;\n}\n\n/* 状态图表卡片样式 */\n.state-chart-card {\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.info-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #E4E7ED;\n  flex-shrink: 0;\n}\n\n.info-header .time {\n  font-size: 16px;\n  font-weight: 500;\n  color: #1d2129;\n}\n\n.info-header .badges {\n  display: flex;\n  gap: 8px;\n}\n\n/* 时间线样式 */\n.el-timeline {\n  padding: 0;\n  flex: 1;\n  overflow-y: auto;\n  /* 确保时间线圆点不被遮挡 */\n  padding-left: 8px;\n}\n\n.el-timeline-item {\n  padding-bottom: 15px;\n  /* 确保时间线节点有足够空间 */\n  padding-left: 5px;\n}\n\n.el-timeline-item:last-child {\n  padding-bottom: 0;\n}\n\n/* 确保时间线圆点完全可见 */\n:deep(.el-timeline-item__node) {\n  z-index: 4;\n  position: relative;\n  /* 确保圆点不被遮挡 */\n  margin-left: 7px;\n}\n\n:deep(.el-timeline-item__node--large) {\n  width: 10px;\n  height: 10px;\n}\n\n/* 确保时间线连接线不被遮挡 */\n:deep(.el-timeline-item__tail) {\n  z-index: 5;\n  position: relative;\n}\n\n/* 确保时间线内容区域有足够空间 */\n:deep(.el-timeline-item__wrapper) {\n  padding-left: 8px;\n}\n\n.timeline-content {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 12px;\n  background-color: #f8f9fa;\n  border-radius: 6px;\n  border-left: 3px solid;\n  /* 移除悬停动画效果 */\n  transition: none;\n}\n\n/* 移除悬停时的动态效果 */\n.timeline-content:hover {\n  /* 移除 transform 和 box-shadow 效果 */\n  transform: none;\n  box-shadow: none;\n}\n\n.timeline-icon {\n  font-size: 16px;\n  color: #409EFF;\n}\n\n.timeline-text {\n  font-size: 14px;\n  font-weight: 500;\n  color: #303133;\n}\n\n/* 时间线项目颜色 - 根据事件类型设置 */\n.timeline-content {\n  border-left-color: #409EFF;\n  background-color: #f8f9fa;\n}\n\n/* 开机事件样式 */\n.timeline-content.timeline-powerOn {\n  border-left-color: #67C23A;\n  background-color: #f0f9ff;\n}\n\n/* 手术开始事件样式 */\n.timeline-content.timeline-surgeryStart {\n  border-left-color: #409EFF;\n  background-color: #f0f9ff;\n}\n\n/* 手术结束事件样式 */\n.timeline-content.timeline-surgeryEnd {\n  border-left-color: #E6A23C;\n  background-color: #fff7ed;\n}\n\n/* 关机事件样式 */\n.timeline-content.timeline-powerOff {\n  border-left-color: #F56C6C;\n  background-color: #fef0f0;\n}\n\n/* 时间线时间戳样式 */\n.el-timeline-item__timestamp {\n  font-size: 12px !important;\n  color: #909399 !important;\n  font-weight: 500 !important;\n}\n\n/* 状态图表样式 */\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #E4E7ED;\n  flex-shrink: 0;\n}\n\n.chart-title {\n  font-size: 16px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.chart-legend {\n  display: flex;\n  gap: 16px;\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 12px;\n  color: #606266;\n}\n\n.legend-color {\n  width: 12px;\n  height: 12px;\n  border-radius: 2px;\n}\n\n.legend-color.state-normal {\n  background-color: #95D475; /* 浅绿色 - 正常状态 */\n}\n\n.legend-color.state-error {\n  background-color: #F56C6C; /* 红色 - 故障状态 */\n}\n\n.legend-color.state-shutdown {\n  background-color: #909399; /* 灰色 - 关机状态 */\n}\n\n.state-chart-container {\n  position: relative;\n  height: 120px;\n  background-color: #FAFAFA;\n  border-radius: 6px;\n  border: 1px solid #E4E7ED;\n  overflow: visible;\n  flex: 1;\n}\n\n\n\n.chart-bars {\n  position: relative;\n  height: 100%;\n  padding: 10px 40px;\n}\n\n.chart-bar {\n  position: absolute;\n  bottom: 0;\n  width: 30px;\n  border-radius: 2px 2px 0 0;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.chart-bar:hover {\n  transform: scaleY(1.1);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n}\n\n.chart-bar.state-surgery {\n  background-color: #95D475; /* 浅绿色 - 正常阶段 */\n}\n\n.chart-bar.state-error {\n  background-color: #F56C6C; /* 红色 - 故障阶段 */\n}\n\n.bar-tooltip {\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-size: 12px;\n  white-space: nowrap;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0.3s ease;\n  z-index: 1000;\n}\n\n.chart-bar:hover .bar-tooltip {\n  opacity: 1;\n}\n\n.tooltip-state {\n  font-weight: 600;\n  margin-bottom: 4px;\n}\n\n.tooltip-original {\n  color: #909399;\n  font-size: 11px;\n  margin-bottom: 2px;\n}\n\n.tooltip-time {\n  color: #E4E7ED;\n  margin-bottom: 2px;\n}\n\n.tooltip-duration {\n  color: #67C23A;\n  font-weight: 500;\n}\n\n.chart-timeline {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 30px;\n  border-top: 1px solid #E4E7ED;\n  background-color: #FFFFFF;\n}\n\n.time-tick {\n  position: absolute;\n  top: 0;\n  transform: translateX(-50%);\n}\n\n.tick-line {\n  width: 1px;\n  height: 8px;\n  background-color: #DCDFE6;\n  margin: 0 auto;\n}\n\n.tick-label {\n  font-size: 10px;\n  color: #909399;\n  text-align: center;\n  margin-top: 4px;\n  white-space: nowrap;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .surgery-info-layout {\n    flex-direction: column;\n    gap: 16px;\n  }\n  \n  .timeline-section,\n  .state-chart-section {\n    width: 100%;\n  }\n  \n  .info-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 8px;\n  }\n  \n  .timeline-content {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 4px;\n  }\n  \n  .chart-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 12px;\n  }\n  \n  .chart-legend {\n    flex-wrap: wrap;\n    gap: 12px;\n  }\n  \n  .state-chart-container {\n    height: 100px;\n  }\n}\n\n/* 器械使用分组样式 */\n.usage-group {\n  margin-bottom: 16px;\n  padding: 16px;\n  background-color: #FFFFFF;\n  border-radius: 6px;\n  border: 1px solid #E4E7ED;\n}\n\n.usage-group-header {\n  margin-bottom: 12px;\n}\n\n.usage-group-info {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.usage-group-name {\n  font-size: 14px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.usage-group-udi {\n  font-size: 12px;\n  color: #909399;\n}\n\n.usage-group-duration {\n  font-size: 12px;\n  color: #67C23A;\n  font-weight: 500;\n}\n\n.usage-group-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n}\n\n.usage-group-color.arm-1 { background-color: #409EFF; }\n.usage-group-color.arm-2 { background-color: #67C23A; }\n.usage-group-color.arm-3 { background-color: #E6A23C; }\n.usage-group-color.arm-4 { background-color: #F56C6C; }\n\n/* 工具提示样式 */\n.el-tooltip__popper {\n  z-index: 9999;\n}\n\n/* 自定义工具提示样式 */\n:deep(.usage-time-tooltip) {\n  background-color: rgba(0, 0, 0, 0.9) !important;\n  color: white !important;\n  border: none !important;\n  border-radius: 6px !important;\n  padding: 10px 12px !important;\n  font-size: 12px !important;\n  font-weight: 500 !important;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4) !important;\n  line-height: 1.4 !important;\n  max-width: 300px !important;\n  white-space: pre-line !important;\n}\n\n:deep(.usage-time-tooltip .el-tooltip__arrow) {\n  border-top-color: rgba(0, 0, 0, 0.9) !important;\n}\n\n/* 移除旧的样式 */\n.time-info-cards {\n  display: none;\n}\n\n.time-card {\n  display: none;\n}\n\n.time-card-content {\n  display: none;\n}\n\n.usage-item {\n  display: none;\n}\n\n.usage-label {\n  display: none;\n}\n\n.usage-name {\n  display: none;\n}\n\n.usage-udi {\n  display: none;\n}\n\n.usage-duration {\n  display: none;\n}\n\n.usage-timeline-container {\n  display: none;\n}\n\n.usage-timeline {\n  display: none;\n}\n\n.timeline-segment-sub {\n  display: none;\n}\n\n/* 移除旧的时间信息样式 */\n.time-info-section {\n  display: none;\n}\n\n.time-info-header {\n  display: none;\n}\n\n.time-info-title {\n  display: none;\n}\n\n.time-info-content {\n  display: none;\n}\n\n.time-info-item {\n  display: none;\n}\n\n.time-icon {\n  display: none;\n}\n\n.time-info {\n  display: none;\n}\n\n.time-label {\n  display: none;\n}\n\n.arm-usage-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.unified-timeline-view {\n  position: relative;\n  min-height: 120px;\n  margin-bottom: 30px;\n  /* 优化渲染性能 */\n  contain: layout style paint;\n  will-change: transform;\n}\n\n.surgery-progress-container {\n  margin-bottom: 30px;\n  padding: 16px;\n  background-color: #FAFAFA;\n  border-radius: 8px;\n  border: 1px solid #E4E7ED;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.surgery-timeline-wrapper {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.surgery-label {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  min-width: 120px;\n  flex-shrink: 0;\n}\n\n.surgery-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n  background: linear-gradient(90deg, #409EFF, #67C23A);\n}\n\n.surgery-name {\n  font-weight: 600;\n  color: #303133;\n}\n\n.progress-labels {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 8px;\n  padding-left: 132px; /* 120px标签宽度 + 12px间距 */\n}\n\n.time-label {\n  font-size: 14px;\n  color: #303133;\n  font-weight: 500;\n}\n\n.surgery-progress {\n  margin-bottom: 8px;\n}\n\n.surgery-timeline-container {\n  position: relative;\n  height: 20px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n  border: 1px solid #DCDFE6;\n  overflow: hidden;\n  flex: 1;\n  min-width: 0;\n  box-sizing: border-box;\n}\n\n.surgery-timeline-bar {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.surgery-timeline-segment {\n  position: absolute;\n  height: 100%;\n  background: linear-gradient(90deg, #409EFF, #67C23A);\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.surgery-segment-text {\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0 8px;\n}\n\n.surgery-duration-info {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  font-size: 12px;\n  color: #666;\n  min-width: 120px;\n  flex-shrink: 0;\n  align-items: flex-start;\n}\n\n.surgery-duration-info .duration-text {\n  font-weight: 500;\n  color: #409EFF;\n}\n\n.surgery-duration-info .time-range {\n  color: #909399;\n  font-size: 11px;\n}\n\n.surgery-duration-info .timeline-range {\n  color: #606266;\n  font-size: 11px;\n  font-style: italic;\n}\n\n\n\n/* 时间值样式（保留用于其他地方） */\n.time-value {\n  font-size: 14px;\n  font-weight: 600;\n  color: #303133;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n\n\n\n\n.arm-timeline {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 20px;\n  position: relative;\n  z-index: 2;\n  /* 优化渲染性能 */\n  contain: layout style paint;\n}\n\n.arm-item {\n  border: 1px solid #E4E7ED;\n  border-radius: 8px;\n  padding: 16px;\n  background-color: #FAFAFA;\n  margin-bottom: 16px;\n}\n\n.arm-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n\n.arm-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.arm-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n}\n\n.arm-1 { background-color: #409EFF; }\n.arm-2 { background-color: #67C23A; }\n.arm-3 { background-color: #E6A23C; }\n.arm-4 { background-color: #F56C6C; }\n\n.arm-name {\n  font-weight: 600;\n  color: #303133;\n}\n\n.arm-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.arm-timeline-container {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 12px;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0;\n  /* 确保对齐 */\n  position: relative;\n}\n\n/* 当arm-timeline-container没有arm-label时的样式 */\n.arm-timeline-container.no-label {\n  gap: 0;\n}\n\n.arm-timeline-container.no-label .arm-timeline-bar {\n  flex: 1;\n  width: 100%;\n}\n\n.arm-label {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  min-width: 120px;\n  flex-shrink: 0;\n  padding: 0;\n  margin: 0;\n  /* 确保对齐 */\n  position: relative;\n}\n\n.arm-timeline-bar {\n  position: relative;\n  height: 20px;\n  background: #F5F7FA;\n  border-radius: 4px;\n  overflow: hidden;\n  flex: 1;\n  min-width: 0;\n  border: 1px solid #DCDFE6;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  /* 确保对齐 */\n  left: 0;\n  right: 0;\n}\n\n\n\n.timeline-segment {\n  position: absolute;\n  height: 100%;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 12px;\n  font-weight: 500;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.timeline-segment.arm-1 { background-color: #409EFF; }\n.timeline-segment.arm-2 { background-color: #67C23A; }\n.timeline-segment.arm-3 { background-color: #E6A23C; }\n.timeline-segment.arm-4 { background-color: #F56C6C; }\n\n/* 确保segment-content占满整个进度条区域 */\n.segment-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.segment-text {\n  font-size: 11px;\n  font-weight: 500;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0 4px;\n  text-align: center;\n  color: white;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n  min-height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.arm-details {\n  margin-top: 16px;\n  padding-top: 0;\n  border-top: 1px solid #E4E7ED;\n}\n\n\n\n.energy-time {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #909399;\n  margin-top: 12px;\n}\n\n.energy-icon {\n  color: #E6A23C;\n}\n\n.alarm-card {\n  margin-bottom: 20px;\n}\n\n.alarm-summary {\n  margin-top: 16px;\n  text-align: center;\n}\n\n.alarm-toggle {\n  margin-top: 12px;\n  text-align: center;\n}\n\n.alarm-toggle .el-button {\n  color: #409EFF;\n  font-size: 14px;\n}\n\n.alarm-toggle .el-button:hover {\n  color: #66b1ff;\n}\n\n\n\n.stats-section {\n  margin-top: 20px;\n}\n\n.stats-card {\n  background-color: #F5F7FA;\n  border-radius: 8px;\n  padding: 16px;\n}\n\n.stats-card h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.stats-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.stats-list li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  font-size: 12px;\n  color: #606266;\n}\n\n.stats-list li:last-child {\n  margin-bottom: 0;\n}\n\n/* 多个时间显示样式 */\n.time-item {\n  margin-bottom: 4px;\n  padding: 2px 0;\n  font-size: 13px;\n  color: #606266;\n}\n\n.time-item:last-child {\n  margin-bottom: 0;\n}\n\n.time-item:not(:last-child) {\n  border-bottom: 1px solid #EBEEF5;\n  padding-bottom: 4px;\n}\n\n.time-value {\n  min-height: 20px;\n}\n\n/* 确保时间轴对齐的全局样式 */\n.arm-timeline-container {\n  display: flex !important;\n  align-items: center !important;\n  gap: 12px !important;\n  margin-bottom: 12px !important;\n  width: 100% !important;\n  box-sizing: border-box !important;\n  padding: 0 !important;\n  position: relative !important;\n}\n\n/* 额外的 ResizeObserver 优化 */\n.surgery-statistics-container {\n  contain: layout style paint;\n}\n\n.tab-card {\n  contain: layout style paint;\n}\n\n/* 减少标签页内容的重绘 */\n.el-tabs__content > .el-tab-pane {\n  contain: layout style paint;\n  will-change: auto;\n  transform: translateZ(0);\n}\n\n/* 优化复杂组件的渲染 */\n.surgery-info-layout {\n  contain: layout style paint;\n  will-change: auto;\n}\n\n.unified-timeline-view {\n  contain: layout style paint;\n  will-change: auto;\n}\n\n/* 禁用不必要的动画和过渡 */\n.el-collapse-transition {\n  transition: none !important;\n}\n\n.el-fade-in-linear-enter-active,\n.el-fade-in-linear-leave-active {\n  transition: none !important;\n}\n\n/* 优化表格渲染 */\n.el-table {\n  contain: layout style paint;\n}\n\n.el-table__body-wrapper {\n  contain: layout style paint;\n}\n\n.arm-label {\n  display: flex !important;\n  align-items: center !important;\n  gap: 8px !important;\n  min-width: 120px !important;\n  flex-shrink: 0 !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  position: relative !important;\n}\n\n.arm-timeline-bar {\n  position: relative !important;\n  height: 20px !important;\n  background: #F5F7FA !important;\n  border-radius: 4px !important;\n  overflow: hidden !important;\n  flex: 1 !important;\n  min-width: 0 !important;\n  border: 1px solid #DCDFE6 !important;\n  box-sizing: border-box !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  left: 0 !important;\n  right: 0 !important;\n}\n\n/* 确保所有时间轴进度条完全对齐，基于容器左边偏移相同距离 */\n.arm-item .arm-timeline-container .arm-timeline-bar,\n.usage-group .arm-timeline-container .arm-timeline-bar {\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n  width: 100% !important;\n  max-width: none !important;\n  position: relative !important;\n}\n\n/* 确保时间轴容器内的所有元素都基于相同的左边偏移 */\n.arm-timeline-container .arm-label {\n  position: relative !important;\n  left: 0 !important;\n}\n\n.arm-timeline-container .arm-timeline-bar {\n  position: relative !important;\n  left: 0 !important;\n}\n\n/* 器械使用时间段的特殊样式 */\n.arm-timeline-container .timeline-segment {\n  opacity: 0.7; /* 降低透明度 */\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.arm-timeline-container .timeline-segment:hover {\n  opacity: 1; /* 悬停时高亮显示 */\n  transform: scale(1.02);\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n  z-index: 10;\n}\n\n\n</style> ","import { render } from \"./SurgeryStatistics.vue?vue&type=template&id=cb517a7c&scoped=true\"\nimport script from \"./SurgeryStatistics.vue?vue&type=script&lang=js\"\nexport * from \"./SurgeryStatistics.vue?vue&type=script&lang=js\"\n\nimport \"./SurgeryStatistics.vue?vue&type=style&index=0&id=cb517a7c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-cb517a7c\"]])\n\nexport default __exports__"],"names":["class","surgeries","length","analyzing","logEntriesCount","type","analyzeLogs","loading","disabled","getAnalysisButtonText","activeTab","handleTabClick","lazy","handleBeforeTabLeave","stretch","closable","addable","surgery","key","id","label","surgery_id","name","toString","exportReport","debugSurgeryTimeData","style","alarm_count","size","getSortedTimelineEvents","event","index","timestamp","formatTime","time","color","icon","header","total_duration","surgery_start_time","surgery_end_time","getSurgeryTimelineStyle","formatTimeShort","getTimelineRange","start","end","getArmUsages","armUsage","plain","toggleArmDetails","getArmTimelineSegments","segment","segmentIndex","content","getSegmentInstrumentName","placement","getGroupedUsagesByUdi","groupedUsage","udiCode","instrumentName","getGroupedUsageDuration","usages","usage","usageIndex","getUsageTimelineStyle","startTime","endTime","Math","floor","Date","getSegmentText","getEnergyTime","armDetailsVisible","data","getAlarmDetails","slice","showAllAlarms","undefined","prop","width","default","row","code","error_code","status","toggleAlarms","components","DataAnalysis","Download","SwitchButton","Close","VideoPlay","VideoPause","ArrowUp","ArrowDown","ArrowLeft","Calendar","PowerOff","Lightning","Globe","InfoFilled","Loading","setup","route","logEntries","surgeryData","sessionStorage","getItem","JSON","parse","entries","dataAge","now","console","log","removeItem","compressed","decompressedEntries","map","entry","t","e","param1","p1","param2","p2","param3","p3","param4","p4","explanation","exp","log_name","ln","error","batchEntries","isCompressed","singleEntries","value","loadBatchLogEntriesByIds","async","logIdsParam","query","logIds","split","parseInt","response","api","surgeryStatistics","analyzeByLogIds","success","forEach","message","getTimeRange","timestamps","minTime","min","maxTime","max","dataSize","stringify","maxSize","analysisData","warning","toFixed","sampleSize","step","i","push","analyzeSortedEntries","surgeryId","armIndex","arm1_usage","arm2_usage","arm3_usage","arm4_usage","getArmTotalTime","totalMinutes","filter","reduce","total","duration","getAlarmTypeTag","alarm_details","details","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatSurgeryTime","toLocaleString","powerOnTime","getPowerOnTime","surgeryEndTime","powerOffTime","getPowerOffTime","last_log_time","getTime","warn","getTimePosition","current","isNaN","position","getTimelineTicks","interval","ticks","mergeOverlappingTimeRanges","timeRanges","sort","a","b","merged","next","getArmTimelineStyle","left","completeUsages","mergedTimeRanges","totalWidth","segments","timelineRange","range","startPosition","endPosition","totalSeconds","power_on_times","power_on_time","shutdown_times","power_off_time","getAllPowerOnTimes","getAllPowerOffTimes","events","powerOnTimes","powerOffTimes","getStateChanges","stateMachineChanges","state_machine_changes","stateChanges","currentChange","nextChange","currentState","state","stateCategory","nextState","originalState","stateName","getStateName","stateMap","getStateBarHeight","heightMap","height","getStateBarPosition","clampedPosition","grouped","udi","totalDuration","widthPercent","parseFloat","minWidthPerChar","padding","requiredWidth","maxChars","substring","startPercent","endPercent","instrumentsInSegment","usageStart","usageEnd","tab","newTabName","oldTabName","then","suppressResizeObserverErrors","originalError","args","includes","apply","window","handleError","originalHandleError","handleResizeObserverError","preventDefault","addEventListener","handleUnhandledRejection","reason","batchData","singleData","autoAnalyze","autoAnalyzeLogId","setTimeout","removeEventListener","timelineEvents","toISOString","isCrossDay","__exports__","render"],"sourceRoot":""}